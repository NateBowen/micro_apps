###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       05/Apr/2017  15:43:51
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\stm32f4xx_syscfg.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\stm32f4xx_syscfg.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.2.0RC2
      6            * @date    20-February-2013
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9           @verbatim
     10              
     11           ===============================================================================
     12                               ##### How to use this driver #####
     13           ===============================================================================
     14              [..] This driver provides functions for:
     15                      
     16                 (#) Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     17                      
     18                 (#) Swapping the internal flash Bank1 and Bank2 this features is only visible for 
     19                     STM32F429x/STM32F439x Devices. 
     20                          
     21                 (#) Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     22                        
     23                 (#) Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     24            
     25                 -@- SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     26                     using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     27                             
     28           @endverbatim      
     29            ******************************************************************************
     30            * @attention
     31            *
     32            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     33            *
     34            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     35            * You may not use this file except in compliance with the License.
     36            * You may obtain a copy of the License at:
     37            *
     38            *        http://www.st.com/software_license_agreement_liberty_v2
     39            *
     40            * Unless required by applicable law or agreed to in writing, software 
     41            * distributed under the License is distributed on an "AS IS" BASIS, 
     42            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     43            * See the License for the specific language governing permissions and
     44            * limitations under the License.
     45            *
     46            ******************************************************************************
     47            */
     48          
     49          /* Includes ------------------------------------------------------------------*/
     50          #include "stm32f4xx_syscfg.h"
     51          #include "stm32f4xx_rcc.h"
     52          
     53          /** @addtogroup STM32F4xx_StdPeriph_Driver
     54            * @{
     55            */
     56          
     57          /** @defgroup SYSCFG 
     58            * @brief SYSCFG driver modules
     59            * @{
     60            */ 
     61          
     62          /* Private typedef -----------------------------------------------------------*/
     63          /* Private define ------------------------------------------------------------*/
     64          /* ------------ RCC registers bit address in the alias region ----------- */
     65          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     66          /* ---  MEMRMP Register ---*/ 
     67          /* Alias word address of UFB_MODE bit */ 
     68          #define MEMRMP_OFFSET             SYSCFG_OFFSET 
     69          #define UFB_MODE_BitNumber        ((uint8_t)0x8) 
     70          #define UFB_MODE_BB               (PERIPH_BB_BASE + (MEMRMP_OFFSET * 32) + (UFB_MODE_BitNumber * 4)) 
     71          
     72          
     73          /* ---  PMC Register ---*/ 
     74          /* Alias word address of MII_RMII_SEL bit */ 
     75          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     76          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     77          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     78          
     79          /* ---  CMPCR Register ---*/ 
     80          /* Alias word address of CMP_PD bit */ 
     81          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     82          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     83          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup SYSCFG_Private_Functions
     91            * @{
     92            */ 
     93          
     94          /**
     95            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     96            *   registers to their default reset values.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          void SYSCFG_DeInit(void)
    101          {
   \                     SYSCFG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    102             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x4080      MOV      R0,#+16384
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    103             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    104          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    105          
    106          /**
    107            * @brief  Changes the mapping of the specified pin.
    108            * @param  SYSCFG_Memory: selects the memory remapping.
    109            *         This parameter can be one of the following values:
    110            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
    111            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
    112            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000 for STM32F40xx/41xx and STM32F427x/437x devices. 
    113            *            @arg SYSCFG_MemoryRemap_FMC:         FMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000 for STM32F429x/439x devices.  
    114            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    115            *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F429x/439x devices.            
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    119          {
    120            /* Check the parameters */
    121            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
    122          
    123            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
   \                     SYSCFG_MemoryRemapConfig: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable4  ;; 0x40013800
   \   00000004   0x6008             STR      R0,[R1, #+0]
    124          }
   \   00000006   0x4770             BX       LR               ;; return
    125          
    126          #if defined (STM32F429X)
    127          /**
    128            * @brief  Enables or disables the Interal FLASH Bank Swapping.
    129            *   
    130            * @note   This function can be used only for STM32F429x/STM32439x devices. 
    131            *
    132            * @param  NewState: new state of Interal FLASH Bank swapping.
    133            *          This parameter can be one of the following values:
    134            *            @arg ENABLE: Flash Bank2 mapped at 0x08000000 (and aliased @0x00000000) 
    135            *                         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)   
    136            *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
    137                                      and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
    138            * @retval None
    139            */
    140          void SYSCFG_MemorySwappingBank(FunctionalState NewState)
    141          {
    142            /* Check the parameters */
    143            assert_param(IS_FUNCTIONAL_STATE(NewState));
    144          
    145            *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
    146          }
    147          #endif /* STM32F429X */ 
    148          
    149          /**
    150            * @brief  Selects the GPIO pin used as EXTI Line.
    151            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    152            *          EXTI lines where x can be (A..K) for STM32F429x/439x devices or (A..I) 
    153            *          for STM32F40xx/STM32F41xx and STM32F427x/STM32F437x devices.
    154            *            
    155            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    156            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    157            *           for EXTI_PortSourceGPIOI x can be (0..11) for STM32F40xx/STM32F41xx 
    158            *           and STM32F427x/STM32F437x devices and for EXTI_PortSourceGPIOK x can   
    159            *           be (0..7) for STM32F429x/STM32F439x devices. 
    160            *             
    161            * @retval None
    162            */

   \                                 In section .text, align 2, keep-with-next
    163          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    164          {
   \                     SYSCFG_EXTILineConfig: (+1)
   \   00000000   0xB410             PUSH     {R4}
    165            uint32_t tmp = 0x00;
   \   00000002   0x2200             MOVS     R2,#+0
    166          
    167            /* Check the parameters */
    168            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
    169            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
    170          
    171            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
   \   00000004   0x220F             MOVS     R2,#+15
   \   00000006   0xF011 0x0303      ANDS     R3,R1,#0x3
   \   0000000A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000C   0x009B             LSLS     R3,R3,#+2
   \   0000000E   0x409A             LSLS     R2,R2,R3
    172            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
   \   00000010   0x....             LDR.N    R3,??DataTable4_1  ;; 0x40013808
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x108C             ASRS     R4,R1,#+2
   \   00000016   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000001A   0xEA33 0x0202      BICS     R2,R3,R2
   \   0000001E   0x....             LDR.N    R3,??DataTable4_1  ;; 0x40013808
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x108C             ASRS     R4,R1,#+2
   \   00000024   0xF843 0x2024      STR      R2,[R3, R4, LSL #+2]
    173            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
   \   00000028   0x....             LDR.N    R2,??DataTable4_1  ;; 0x40013808
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x108B             ASRS     R3,R1,#+2
   \   0000002E   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xF011 0x0303      ANDS     R3,R1,#0x3
   \   00000038   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003A   0x009B             LSLS     R3,R3,#+2
   \   0000003C   0x4098             LSLS     R0,R0,R3
   \   0000003E   0x4310             ORRS     R0,R0,R2
   \   00000040   0x....             LDR.N    R2,??DataTable4_1  ;; 0x40013808
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x1089             ASRS     R1,R1,#+2
   \   00000046   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    174          }
   \   0000004A   0xBC10             POP      {R4}
   \   0000004C   0x4770             BX       LR               ;; return
    175          
    176          /**
    177            * @brief  Selects the ETHERNET media interface 
    178            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    179            *          This parameter can be one of the following values: 
    180            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    181            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    182            * @retval None 
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    185          { 
    186            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
    187            /* Configure MII_RMII selection bit */ 
    188            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
   \                     SYSCFG_ETH_MediaInterfaceConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2  ;; 0x422700dc
   \   00000002   0x6008             STR      R0,[R1, #+0]
    189          }
   \   00000004   0x4770             BX       LR               ;; return
    190          
    191          /**
    192            * @brief  Enables or disables the I/O Compensation Cell.
    193            * @note   The I/O compensation cell can be used only when the device supply
    194            *         voltage ranges from 2.4 to 3.6 V.  
    195            * @param  NewState: new state of the I/O Compensation Cell.
    196            *          This parameter can be one of the following values:
    197            *            @arg ENABLE: I/O compensation cell enabled  
    198            *            @arg DISABLE: I/O compensation cell power-down mode  
    199            * @retval None
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    202          {
    203            /* Check the parameters */
    204            assert_param(IS_FUNCTIONAL_STATE(NewState));
    205          
    206            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
   \                     SYSCFG_CompensationCellCmd: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable4_3  ;; 0x42270400
   \   00000004   0x6008             STR      R0,[R1, #+0]
    207          }
   \   00000006   0x4770             BX       LR               ;; return
    208          
    209          /**
    210            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    211            * @param  None
    212            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    213            */

   \                                 In section .text, align 2, keep-with-next
    214          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    215          {
    216            FlagStatus bitstatus = RESET;
   \                     SYSCFG_GetCompensationCellStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    217              
    218            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40013820
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD501             BPL.N    ??SYSCFG_GetCompensationCellStatus_0
    219            {
    220              bitstatus = SET;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE000             B.N      ??SYSCFG_GetCompensationCellStatus_1
    221            }
    222            else
    223            {
    224              bitstatus = RESET;
   \                     ??SYSCFG_GetCompensationCellStatus_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
    225            }
    226            return bitstatus;
   \                     ??SYSCFG_GetCompensationCellStatus_1: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x4770             BX       LR               ;; return
    227          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x422700DC         DC32     0x422700dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x42270400         DC32     0x42270400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40013820         DC32     0x40013820
    228          
    229          /**
    230            * @}
    231            */
    232          
    233          /**
    234            * @}
    235            */
    236          
    237          /**
    238            * @}
    239            */
    240          
    241          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SYSCFG_CompensationCellCmd
       8   SYSCFG_DeInit
         8   -> RCC_APB2PeriphResetCmd
       0   SYSCFG_ETH_MediaInterfaceConfig
       4   SYSCFG_EXTILineConfig
       0   SYSCFG_GetCompensationCellStatus
       0   SYSCFG_MemoryRemapConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       8  SYSCFG_CompensationCellCmd
      24  SYSCFG_DeInit
       6  SYSCFG_ETH_MediaInterfaceConfig
      78  SYSCFG_EXTILineConfig
      20  SYSCFG_GetCompensationCellStatus
       8  SYSCFG_MemoryRemapConfig

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
