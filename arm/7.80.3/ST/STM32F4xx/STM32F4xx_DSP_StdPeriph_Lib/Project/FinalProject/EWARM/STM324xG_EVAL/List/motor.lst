###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  18:36:37
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\motor.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\motor.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\motor.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\motor.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\motor.c
      1          #include "motor.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void Motor_Config(void){
   \                     Motor_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
      4          
      5            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
      6            TIM_OCInitTypeDef  TIM_OCInitStructure;
      7            GPIO_InitTypeDef GPIO_InitStructure;
      8          
      9            RCC_APB1PeriphClockCmd(MOTOR_TIMx_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     10            RCC_AHB1PeriphClockCmd(MOTOR_PORT_CLOCK, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     11          
     12            GPIO_InitStructure.GPIO_Pin = MOTOR_PIN;
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x9000             STR      R0,[SP, #+0]
     13            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     14            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0005      STRB     R0,[SP, #+5]
     15            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0006      STRB     R0,[SP, #+6]
     16            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF88D 0x0007      STRB     R0,[SP, #+7]
     17            GPIO_Init(MOTOR_PORT, &GPIO_InitStructure);
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x....             LDR.N    R0,??DataTable1  ;; 0x40020000
   \   00000034   0x.... 0x....      BL       GPIO_Init
     18          
     19            GPIO_PinAFConfig(MOTOR_PORT, MOTOR_PINSOURCE, MOTOR_AF_TIMx);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0x....             LDR.N    R0,??DataTable1  ;; 0x40020000
   \   0000003E   0x.... 0x....      BL       GPIO_PinAFConfig
     20          
     21            TIM_TimeBaseStructure.TIM_Period = MOTOR_PWM_PERIOD;
   \   00000042   0xF44F 0x602F      MOV      R0,#+2800
   \   00000046   0x9003             STR      R0,[SP, #+12]
     22            TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_CLOCK_PRESCALAR;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     23            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     24            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     25            TIM_TimeBaseInit(MOTOR_TIMx, &TIM_TimeBaseStructure);
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000060   0x.... 0x....      BL       TIM_TimeBaseInit
     26          
     27            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000064   0x2060             MOVS     R0,#+96
   \   00000066   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     28            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     29            TIM_OCInitStructure.TIM_Pulse = 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9007             STR      R0,[SP, #+28]
     30            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     31            TIM_OC3Init(MOTOR_TIMx, &TIM_OCInitStructure);
   \   0000007A   0xA905             ADD      R1,SP,#+20
   \   0000007C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000080   0x.... 0x....      BL       TIM_OC3Init
     32          
     33            TIM_OC3PreloadConfig(MOTOR_TIMx, TIM_OCPreload_Disable);
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000008A   0x.... 0x....      BL       TIM_OC3PreloadConfig
     34            TIM_ARRPreloadConfig(MOTOR_TIMx, ENABLE);
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000094   0x.... 0x....      BL       TIM_ARRPreloadConfig
     35          
     36            TIM_Cmd(MOTOR_TIMx, ENABLE);
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000009E   0x.... 0x....      BL       TIM_Cmd
     37          }
   \   000000A2   0xB00B             ADD      SP,SP,#+44
   \   000000A4   0xBD00             POP      {PC}             ;; return
     38          
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void SetMotorDutyCycle(uint8_t dutyCycle){
     41            uint16_t pulse = MOTOR_PWM_PERIOD * dutyCycle / 100;
   \                     SetMotorDutyCycle: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF44F 0x612F      MOV      R1,#+2800
   \   00000006   0x4348             MULS     R0,R1,R0
   \   00000008   0x2164             MOVS     R1,#+100
   \   0000000A   0xFB90 0xF0F1      SDIV     R0,R0,R1
     42            TIM2->CCR3 = pulse;
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x....             LDR.N    R1,??DataTable1_1  ;; 0x4000003c
   \   00000012   0x6008             STR      R0,[R1, #+0]
     43          }
   \   00000014   0x4770             BX       LR               ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          uint8_t CalculateDutyCycle(uint16_t freq){
     46            if(freq > 6500){
   \                     CalculateDutyCycle: (+1)
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0xF641 0x1165      MOVW     R1,#+6501
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xDB02             BLT.N    ??CalculateDutyCycle_0
     47              freq = 6500;
   \   0000000A   0xF641 0x1064      MOVW     R0,#+6500
   \   0000000E   0xE006             B.N      ??CalculateDutyCycle_1
     48            }
     49            else if(freq < 4500){
   \                     ??CalculateDutyCycle_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF241 0x1194      MOVW     R1,#+4500
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??CalculateDutyCycle_1
     50              freq = 4500;
   \   0000001A   0xF241 0x1094      MOVW     R0,#+4500
     51            }
     52            uint8_t dutyCycle = (6500-freq)/20;
   \                     ??CalculateDutyCycle_1: (+1)
   \   0000001E   0xF641 0x1164      MOVW     R1,#+6500
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x1A08             SUBS     R0,R1,R0
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0xFB90 0xF0F1      SDIV     R0,R0,R1
     53            return dutyCycle;
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x4770             BX       LR               ;; return
     54          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4000003C         DC32     0x4000003c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CalculateDutyCycle
      48   Motor_Config
        48   -> GPIO_Init
        48   -> GPIO_PinAFConfig
        48   -> RCC_AHB1PeriphClockCmd
        48   -> RCC_APB1PeriphClockCmd
        48   -> TIM_ARRPreloadConfig
        48   -> TIM_Cmd
        48   -> TIM_OC3Init
        48   -> TIM_OC3PreloadConfig
        48   -> TIM_TimeBaseInit
       0   SetMotorDutyCycle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      48  CalculateDutyCycle
     166  Motor_Config
      22  SetMotorDutyCycle

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
