###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       05/Apr/2017  20:24:47
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\led.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\led.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\led.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\led.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\led.c
      1          #include "led.h"
      2          #include "delay.h"
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void LED_Config(void) {
   \                     LED_Config: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
      5            
      6            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
      7            GPIO_InitTypeDef GPIO_InitStructure;
      8            
      9            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
   \   0000000A   0x200C             MOVS     R0,#+12
   \   0000000C   0x9000             STR      R0,[SP, #+0]
     10            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0004      STRB     R0,[SP, #+4]
     11            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF88D 0x0006      STRB     R0,[SP, #+6]
     12            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0xF88D 0x0005      STRB     R0,[SP, #+5]
     13            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF88D 0x0007      STRB     R0,[SP, #+7]
     14            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x....             LDR.N    R0,??DataTable0  ;; 0x40020400
   \   0000002A   0x.... 0x....      BL       GPIO_Init
     15            
     16            if((GPIOB->IDR & 0X0001) == 0X0001){   
   \   0000002E   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40020410
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x07C0             LSLS     R0,R0,#+31
   \   00000034   0xD516             BPL.N    ??LED_Config_0
     17              
     18              GPIOB->BSRRL = GPIO_Pin_3;     // IR EMITTER LED OFF   
   \   00000036   0x2008             MOVS     R0,#+8
   \   00000038   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40020418
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
     19              
     20              // CHECK TO SEE IF START DIP SWITCH IS ON
     21              for(uint8_t i = 0 ; i<=5 ; i++){
   \   0000003C   0x2400             MOVS     R4,#+0
   \                     ??LED_Config_1: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C06             CMP      R4,#+6
   \   00000042   0xDA38             BGE.N    ??LED_Config_2
     22                
     23                GPIOB->BSRRL = GPIO_Pin_2;   // INDICATOR LED ON
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40020418
   \   00000048   0x8008             STRH     R0,[R1, #+0]
     24                Delay(500);                  // 1/2 SECOND DELAY
   \   0000004A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000004E   0x.... 0x....      BL       Delay
     25                
     26                GPIOB->BSRRH = GPIO_Pin_2;   // INDICATOR LED OFF
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x....             LDR.N    R1,??DataTable0_3  ;; 0x4002041a
   \   00000056   0x8008             STRH     R0,[R1, #+0]
     27                Delay(500);                  // 1/2 SECOND DELAY
   \   00000058   0xF44F 0x70FA      MOV      R0,#+500
   \   0000005C   0x.... 0x....      BL       Delay
     28                
     29                
     30                // 1 SECOND TOTAL AS SPECIFIED REPEATED FIVE TIMES 
     31                // 1 BLINK PER SECOND
     32              }
   \   00000060   0x1C64             ADDS     R4,R4,#+1
   \   00000062   0xE7EC             B.N      ??LED_Config_1
     33            }
     34            
     35            else if(((GPIOB->IDR & 0X0001) == 0X0001) && ((GPIOB->IDR & 0X0002) == 0X0002)){
   \                     ??LED_Config_0: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40020410
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x07C0             LSLS     R0,R0,#+31
   \   0000006A   0xD524             BPL.N    ??LED_Config_2
   \   0000006C   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40020410
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x0780             LSLS     R0,R0,#+30
   \   00000072   0xD520             BPL.N    ??LED_Config_2
     36              
     37              GPIOB->BSRRH = GPIO_Pin_3;     // IR EMITTER LED OFF
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0x....             LDR.N    R1,??DataTable0_3  ;; 0x4002041a
   \   00000078   0x8008             STRH     R0,[R1, #+0]
     38              // CHECK TO SEE IF START DIP SWITCH IS ON    
     39              for(uint8_t i = 0; i<=8 ; i++){
   \   0000007A   0x2400             MOVS     R4,#+0
   \   0000007C   0xE018             B.N      ??LED_Config_3
     40                
     41                GPIOB->BSRRL = GPIO_Pin_2;   // INDICATOR LED ON
   \                     ??LED_Config_4: (+1)
   \   0000007E   0x2004             MOVS     R0,#+4
   \   00000080   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40020418
   \   00000082   0x8008             STRH     R0,[R1, #+0]
     42                Delay(250);                  // 1/4 SECOND DELAY
   \   00000084   0x20FA             MOVS     R0,#+250
   \   00000086   0x.... 0x....      BL       Delay
     43                
     44                GPIOB->BSRRH = GPIO_Pin_2;   // INDICATOR LED OFF
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0x....             LDR.N    R1,??DataTable0_3  ;; 0x4002041a
   \   0000008E   0x8008             STRH     R0,[R1, #+0]
     45                Delay(250);                  // 1/4 SECOND DELAY
   \   00000090   0x20FA             MOVS     R0,#+250
   \   00000092   0x.... 0x....      BL       Delay
     46                
     47                GPIOB->BSRRL = GPIO_Pin_2;   // INDICATOR LED ON
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40020418
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
     48                Delay(250);                  // 1/4 SECOND DELAY
   \   0000009C   0x20FA             MOVS     R0,#+250
   \   0000009E   0x.... 0x....      BL       Delay
     49                
     50                GPIOB->BSRRH = GPIO_Pin_2;   // INDICATOR LED OFF
   \   000000A2   0x2004             MOVS     R0,#+4
   \   000000A4   0x....             LDR.N    R1,??DataTable0_3  ;; 0x4002041a
   \   000000A6   0x8008             STRH     R0,[R1, #+0]
     51                Delay(250);                  // 1/4 SECOND DELAY
   \   000000A8   0x20FA             MOVS     R0,#+250
   \   000000AA   0x.... 0x....      BL       Delay
     52                
     53                
     54                // 1 SECOND TOTAL AS SPECIFIED REPEATED FIVE TIMES 
     55                // 2 BLINKS PER SECOND
     56              }
   \   000000AE   0x1C64             ADDS     R4,R4,#+1
   \                     ??LED_Config_3: (+1)
   \   000000B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B2   0x2C09             CMP      R4,#+9
   \   000000B4   0xDBE3             BLT.N    ??LED_Config_4
     57            }
     58          }
   \                     ??LED_Config_2: (+1)
   \   000000B6   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     59          
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void IndicatorLEDOn(void){
     62          
     63          }
   \                     IndicatorLEDOn: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void IndicatorLEDOff(void){
     66            
     67          }
   \                     IndicatorLEDOff: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void IREmitterOn(void){
     70          
     71          }
   \                     IREmitterOn: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void IREmitterOff(void){
     74          
     75          }
   \                     IREmitterOff: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40020410         DC32     0x40020410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x40020418         DC32     0x40020418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x4002041A         DC32     0x4002041a

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   IREmitterOff
       0   IREmitterOn
       0   IndicatorLEDOff
       0   IndicatorLEDOn
      16   LED_Config
        16   -> Delay
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       2  IREmitterOff
       2  IREmitterOn
       2  IndicatorLEDOff
       2  IndicatorLEDOn
     184  LED_Config

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
