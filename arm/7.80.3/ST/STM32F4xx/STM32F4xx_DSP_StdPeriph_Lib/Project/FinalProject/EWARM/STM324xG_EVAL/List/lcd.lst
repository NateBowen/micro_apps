###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  18:36:33
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\lcd.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\lcd.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\lcd.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\lcd.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\lcd.c
      1          #include "lcd.h"
      2          #include "delay.h"
      3          
      4          
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void LCD_Command(uint8_t data){
   \                     LCD_Command: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      7            LCD_PORT->ODR = data;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000006   0x6008             STR      R0,[R1, #+0]
      8            LCD_PORT->ODR &= ~LCD_RS_PIN;
   \   00000008   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000010   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000012   0x6008             STR      R0,[R1, #+0]
      9            LCD_PORT->ODR &= ~LCD_RW_PIN;
   \   00000014   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000001C   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     10            LCD_PORT->ODR |= LCD_ENABLE_PIN;
   \   00000020   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000028   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     11            Delay(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Delay
     12            LCD_PORT->ODR &= ~(LCD_ENABLE_PIN);
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     13            Delay(100);
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0x.... 0x....      BL       Delay
     14          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
     15          
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void LCD_Write(uint8_t data){ 
   \                     LCD_Write: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     18            LCD_PORT->ODR = data;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000006   0x6008             STR      R0,[R1, #+0]
     19            LCD_PORT->ODR |= LCD_RS_PIN;
   \   00000008   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000010   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000012   0x6008             STR      R0,[R1, #+0]
     20            LCD_PORT->ODR &= ~LCD_RW_PIN;
   \   00000014   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000001C   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     21            LCD_PORT->ODR |= LCD_ENABLE_PIN;
   \   00000020   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000028   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     22            Delay(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Delay
     23            LCD_PORT->ODR &= ~(LCD_ENABLE_PIN);
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     24            Delay(100);
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0x.... 0x....      BL       Delay
     25          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
     26          
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void LCD_WriteDigit(uint8_t data){ 
   \                     LCD_WriteDigit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29            LCD_Write(DIGIT_OFFSET | data);
   \   00000002   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LCD_Write
     30          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     31          
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void LCD_DisplayINVALID(void){
   \                     LCD_DisplayINVALID: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     34            LCD_Write(LETTER_i);
   \   00000002   0x2069             MOVS     R0,#+105
   \   00000004   0x.... 0x....      BL       LCD_Write
     35            LCD_Write(LETTER_n);
   \   00000008   0x206E             MOVS     R0,#+110
   \   0000000A   0x.... 0x....      BL       LCD_Write
     36            LCD_Write(LETTER_v);
   \   0000000E   0x2076             MOVS     R0,#+118
   \   00000010   0x.... 0x....      BL       LCD_Write
     37            LCD_Write(LETTER_a);
   \   00000014   0x2061             MOVS     R0,#+97
   \   00000016   0x.... 0x....      BL       LCD_Write
     38            LCD_Write(LETTER_l);
   \   0000001A   0x206C             MOVS     R0,#+108
   \   0000001C   0x.... 0x....      BL       LCD_Write
     39            LCD_Write(LETTER_i);
   \   00000020   0x2069             MOVS     R0,#+105
   \   00000022   0x.... 0x....      BL       LCD_Write
     40            LCD_Write(LETTER_d);
   \   00000026   0x2064             MOVS     R0,#+100
   \   00000028   0x.... 0x....      BL       LCD_Write
     41          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     42          
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void LCD_ClearDisplay(void){
   \                     LCD_ClearDisplay: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45            LCD_Command(0x01);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       LCD_Command
     46          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     47          
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void LCD_Config(void) {
   \                     LCD_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     50            
     51            GPIO_InitTypeDef GPIO_InitStructure;
     52            
     53            RCC_AHB1PeriphClockCmd(LCD_PORT_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     54            
     55            GPIO_InitStructure.GPIO_Pin = LCD_DATA_BUS | LCD_ENABLE_PIN | LCD_RW_PIN | LCD_RS_PIN;
   \   0000000C   0xF240 0x70FF      MOVW     R0,#+2047
   \   00000010   0x9000             STR      R0,[SP, #+0]
     56            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
     57            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0006      STRB     R0,[SP, #+6]
     58            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0005      STRB     R0,[SP, #+5]
     59            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0007      STRB     R0,[SP, #+7]
     60            GPIO_Init(LCD_PORT, &GPIO_InitStructure);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40020c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
     61             
     62            LCD_PORT->ODR &= ~LCD_ENABLE_PIN;
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     63            Delay(15);           //Wait >15 msec after power is applied
   \   0000003E   0x200F             MOVS     R0,#+15
   \   00000040   0x.... 0x....      BL       Delay
     64            LCD_Command(0x30);    //command 0x30 = Wake up
   \   00000044   0x2030             MOVS     R0,#+48
   \   00000046   0x.... 0x....      BL       LCD_Command
     65            Delay(5);            //must wait 5ms, busy flag not available
   \   0000004A   0x2005             MOVS     R0,#+5
   \   0000004C   0x.... 0x....      BL       Delay
     66            LCD_Command(0x30);    //command 0x30 = Wake up #2
   \   00000050   0x2030             MOVS     R0,#+48
   \   00000052   0x.... 0x....      BL       LCD_Command
     67            Delay(1);            //must wait 160us, busy flag not available
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       Delay
     68            LCD_Command(0x30);    //command 0x30 = Wake up #3
   \   0000005C   0x2030             MOVS     R0,#+48
   \   0000005E   0x.... 0x....      BL       LCD_Command
     69            Delay(1);            //must wait 160us, busy flag not available
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       Delay
     70          
     71            LCD_Command(0x10);    //Set cursor
   \   00000068   0x2010             MOVS     R0,#+16
   \   0000006A   0x.... 0x....      BL       LCD_Command
     72            LCD_Command(0x01);    //Clear
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      BL       LCD_Command
     73            LCD_Command(0x0E);    //Display ON; Cursor ON, Blink ON
   \   00000074   0x200E             MOVS     R0,#+14
   \   00000076   0x.... 0x....      BL       LCD_Command
     74            LCD_Command(0x06);    //Entry mode set
   \   0000007A   0x2006             MOVS     R0,#+6
   \   0000007C   0x.... 0x....      BL       LCD_Command
     75          }
   \   00000080   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020C14         DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40020C00         DC32     0x40020c00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LCD_ClearDisplay
         8   -> LCD_Command
       8   LCD_Command
         8   -> Delay
      16   LCD_Config
        16   -> Delay
        16   -> GPIO_Init
        16   -> LCD_Command
        16   -> RCC_AHB1PeriphClockCmd
       8   LCD_DisplayINVALID
         8   -> LCD_Write
       8   LCD_Write
         8   -> Delay
       8   LCD_WriteDigit
         8   -> LCD_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      10  LCD_ClearDisplay
      70  LCD_Command
     130  LCD_Config
      46  LCD_DisplayINVALID
      70  LCD_Write
      14  LCD_WriteDigit

 
 348 bytes in section .text
 
 348 bytes of CODE memory

Errors: none
Warnings: none
