###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  18:36:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\buzzer.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\buzzer.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\buzzer.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\buzzer.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\buzzer.c
      1          #include "buzzer.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void Buzzer_Config(void){
   \                     Buzzer_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
      4            
      5            GPIO_InitTypeDef GPIO_InitStructure;
      6            
      7            RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000000A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
      8            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
      9            
     10            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   00000016   0x2008             MOVS     R0,#+8
   \   00000018   0x9000             STR      R0,[SP, #+0]
     11            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xF88D 0x0004      STRB     R0,[SP, #+4]
     12            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0xF88D 0x0005      STRB     R0,[SP, #+5]
     13            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x0006      STRB     R0,[SP, #+6]
     14            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF88D 0x0007      STRB     R0,[SP, #+7]
     15            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000036   0x.... 0x....      BL       GPIO_Init
     16            
     17            GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM9);  
   \   0000003A   0x2203             MOVS     R2,#+3
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0x....             LDR.N    R0,??DataTable3  ;; 0x40020000
   \   00000040   0x.... 0x....      BL       GPIO_PinAFConfig
     18          
     19          }
   \   00000044   0xBD07             POP      {R0-R2,PC}       ;; return
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void BuzzerOnLow(void){
   \                     BuzzerOnLow: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     22            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     23            TIM_OCInitTypeDef  TIM_OCInitStructure;
     24            
     25            TIM_TimeBaseStructure.TIM_Period = BUZZER_PERIOD_LOW;
   \   00000004   0xF240 0x104D      MOVW     R0,#+333
   \   00000008   0x9001             STR      R0,[SP, #+4]
     26            TIM_TimeBaseStructure.TIM_Prescaler = BUZZER_CLOCK_PRESCALAR;
   \   0000000A   0x20A8             MOVS     R0,#+168
   \   0000000C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     27            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     28            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     29            TIM_TimeBaseInit(TIM9, &TIM_TimeBaseStructure);
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   00000020   0x.... 0x....      BL       TIM_TimeBaseInit
     30            
     31            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000024   0x2060             MOVS     R0,#+96
   \   00000026   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     32            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     33            TIM_OCInitStructure.TIM_Pulse = BUZZER_PERIOD_LOW / 2;
   \   00000030   0x20A6             MOVS     R0,#+166
   \   00000032   0x9005             STR      R0,[SP, #+20]
     34            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     35            TIM_OC2Init(TIM9, &TIM_OCInitStructure);  
   \   0000003A   0xA903             ADD      R1,SP,#+12
   \   0000003C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   0000003E   0x.... 0x....      BL       TIM_OC2Init
     36            
     37            TIM_Cmd(TIM9, ENABLE);
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   00000046   0x.... 0x....      BL       TIM_Cmd
     38          }
   \   0000004A   0xB009             ADD      SP,SP,#+36
   \   0000004C   0xBD00             POP      {PC}             ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void BuzzerOnHigh(void){
   \                     BuzzerOnHigh: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     41            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     42            TIM_OCInitTypeDef  TIM_OCInitStructure;
     43            
     44            TIM_TimeBaseStructure.TIM_Period = BUZZER_PERIOD_HIGH;
   \   00000004   0x20C8             MOVS     R0,#+200
   \   00000006   0x9001             STR      R0,[SP, #+4]
     45            TIM_TimeBaseStructure.TIM_Prescaler = BUZZER_CLOCK_PRESCALAR;
   \   00000008   0x20A8             MOVS     R0,#+168
   \   0000000A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     46            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     47            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     48            TIM_TimeBaseInit(TIM9, &TIM_TimeBaseStructure);
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   0000001E   0x.... 0x....      BL       TIM_TimeBaseInit
     49            
     50            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000022   0x2060             MOVS     R0,#+96
   \   00000024   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     51            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     52            TIM_OCInitStructure.TIM_Pulse = BUZZER_PERIOD_HIGH / 2;
   \   0000002E   0x2064             MOVS     R0,#+100
   \   00000030   0x9005             STR      R0,[SP, #+20]
     53            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     54            TIM_OC2Init(TIM9, &TIM_OCInitStructure);  
   \   00000038   0xA903             ADD      R1,SP,#+12
   \   0000003A   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   0000003C   0x.... 0x....      BL       TIM_OC2Init
     55            
     56            TIM_Cmd(TIM9, ENABLE);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   00000044   0x.... 0x....      BL       TIM_Cmd
     57          }
   \   00000048   0xB009             ADD      SP,SP,#+36
   \   0000004A   0xBD00             POP      {PC}             ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void BuzzerOff(void){
   \                     BuzzerOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     60            TIM_Cmd(TIM9, DISABLE);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40014000
   \   00000006   0x.... 0x....      BL       TIM_Cmd
     61          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40014000         DC32     0x40014000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BuzzerOff
         8   -> TIM_Cmd
      40   BuzzerOnHigh
        40   -> TIM_Cmd
        40   -> TIM_OC2Init
        40   -> TIM_TimeBaseInit
      40   BuzzerOnLow
        40   -> TIM_Cmd
        40   -> TIM_OC2Init
        40   -> TIM_TimeBaseInit
      16   Buzzer_Config
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      12  BuzzerOff
      76  BuzzerOnHigh
      78  BuzzerOnLow
      70  Buzzer_Config

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
