###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  18:43:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
      1          #include "main.h"
      2          #include "delay.h"
      3          #include "buzzer.h"
      4          #include "led.h"
      5          #include "motor.h"
      6          #include "lcd.h"
      7          #include "switch.h"
      8          #include "encoder.h"
      9          #include "sr4.h"
     10          
     11          #define STOP_DISTANCE   5
     12          

   \                                 In section .text, align 4, keep-with-next
     13          int main(void)
     14          {
   \                     main: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     15            Delay_Config();
   \   00000002   0x.... 0x....      BL       Delay_Config
     16            LED_Config();
   \   00000006   0x.... 0x....      BL       LED_Config
     17            LCD_Config();
   \   0000000A   0x.... 0x....      BL       LCD_Config
     18            Buzzer_Config();
   \   0000000E   0x.... 0x....      BL       Buzzer_Config
     19            Switch_Config();
   \   00000012   0x.... 0x....      BL       Switch_Config
     20            Encoder_Config();
   \   00000016   0x.... 0x....      BL       Encoder_Config
     21            Motor_Config();
   \   0000001A   0x.... 0x....      BL       Motor_Config
   \   0000001E   0xE011             B.N      ??main_0
     22          
     23            uint16_t frequency, currentDistance;
     24            uint8_t calculatedDutyCycle;
     25          
     26            while (1)
     27            {
     28             if (!START_SWITCH_HIGH) {
     29                BuzzerOnHigh();
     30          
     31                for (uint8_t i = 0; i < NUM_START_BLINKS; i++) {
     32                  IndicatorLEDOn();
     33                  Delay(500);
     34                  IndicatorLEDOff();
     35                  Delay(500);
     36                }
     37          
     38                BuzzerOff();
     39                IREmitterOn();
     40                SetMotorDutyCycle(50);
     41          
     42               while (STOP_SWITCH_HIGH && (currentDistance > STOP_DISTANCE)) {
     43                  frequency = GetEncoderFrequency();
     44                  calculatedDutyCycle = CalculateDutyCycle(frequency);
     45                  SetMotorDutyCycle(calculatedDutyCycle);
     46                  currentDistance = GetDistance();
     47                }
     48          
     49                SetMotorDutyCycle(0);
     50                BuzzerOnLow();
     51          
     52                for(uint8_t i = 0; i < NUM_STOP_BLINKS; i++) {
     53                  IndicatorLEDOn();
   \                     ??main_1: (+1)
   \   00000020   0x.... 0x....      BL       IndicatorLEDOn
     54                  Delay(250);
   \   00000024   0x20FA             MOVS     R0,#+250
   \   00000026   0x.... 0x....      BL       Delay
     55                  IndicatorLEDOff();
   \   0000002A   0x.... 0x....      BL       IndicatorLEDOff
     56                  Delay(250);
   \   0000002E   0x20FA             MOVS     R0,#+250
   \   00000030   0x.... 0x....      BL       Delay
     57                }
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??main_2: (+1)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D08             CMP      R5,#+8
   \   0000003A   0xDBF1             BLT.N    ??main_1
     58          
     59                BuzzerOff();
   \   0000003C   0x.... 0x....      BL       BuzzerOff
     60                IREmitterOff();
   \   00000040   0x.... 0x....      BL       IREmitterOff
   \                     ??main_0: (+1)
   \   00000044   0x481C             LDR.N    R0,??main_3      ;; 0x40020410
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x0780             LSLS     R0,R0,#+30
   \   0000004A   0xD4FB             BMI.N    ??main_0
   \   0000004C   0x.... 0x....      BL       BuzzerOnHigh
   \   00000050   0x2500             MOVS     R5,#+0
   \   00000052   0xE00C             B.N      ??main_4
   \                     ??main_5: (+1)
   \   00000054   0x.... 0x....      BL       IndicatorLEDOn
   \   00000058   0xF44F 0x70FA      MOV      R0,#+500
   \   0000005C   0x.... 0x....      BL       Delay
   \   00000060   0x.... 0x....      BL       IndicatorLEDOff
   \   00000064   0xF44F 0x70FA      MOV      R0,#+500
   \   00000068   0x.... 0x....      BL       Delay
   \   0000006C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??main_4: (+1)
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0x2D05             CMP      R5,#+5
   \   00000072   0xDBEF             BLT.N    ??main_5
   \   00000074   0x.... 0x....      BL       BuzzerOff
   \   00000078   0x.... 0x....      BL       IREmitterOn
   \   0000007C   0x2032             MOVS     R0,#+50
   \   0000007E   0x.... 0x....      BL       SetMotorDutyCycle
   \   00000082   0xE00A             B.N      ??main_6
   \                     ??main_7: (+1)
   \   00000084   0x.... 0x....      BL       GetEncoderFrequency
   \   00000088   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0x.... 0x....      BL       CalculateDutyCycle
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x.... 0x....      BL       SetMotorDutyCycle
   \   00000094   0x.... 0x....      BL       GetDistance
   \   00000098   0x0004             MOVS     R4,R0
   \                     ??main_6: (+1)
   \   0000009A   0x4807             LDR.N    R0,??main_3      ;; 0x40020410
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x07C0             LSLS     R0,R0,#+31
   \   000000A0   0xD502             BPL.N    ??main_8
   \   000000A2   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000A4   0x2C06             CMP      R4,#+6
   \   000000A6   0xDAED             BGE.N    ??main_7
   \                     ??main_8: (+1)
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      BL       SetMotorDutyCycle
   \   000000AE   0x.... 0x....      BL       BuzzerOnLow
   \   000000B2   0x2500             MOVS     R5,#+0
   \   000000B4   0xE7BF             B.N      ??main_2
   \   000000B6   0xBF00             Nop      
   \                     ??main_3:
   \   000000B8   0x40020410         DC32     0x40020410
     61              }
     62            }
     63          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> BuzzerOff
        16   -> BuzzerOnHigh
        16   -> BuzzerOnLow
        16   -> Buzzer_Config
        16   -> CalculateDutyCycle
        16   -> Delay
        16   -> Delay_Config
        16   -> Encoder_Config
        16   -> GetDistance
        16   -> GetEncoderFrequency
        16   -> IREmitterOff
        16   -> IREmitterOn
        16   -> IndicatorLEDOff
        16   -> IndicatorLEDOn
        16   -> LCD_Config
        16   -> LED_Config
        16   -> Motor_Config
        16   -> SetMotorDutyCycle
        16   -> Switch_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     188  main

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
