###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       05/Apr/2017  21:54:22
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\FinalProject\main.c
      1          #include "main.h"
      2          #include "delay.h"
      3          #include "buzzer.h"
      4          #include "led.h"
      5          #include "motor.h"
      6          #include "lcd.h"
      7          #include "switch.h"
      8          #include "encoder.h"
      9          

   \                                 In section .text, align 2, keep-with-next
     10          int main(void)
     11          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     12            Delay_Config();
   \   00000002   0x.... 0x....      BL       Delay_Config
     13            LED_Config();
   \   00000006   0x.... 0x....      BL       LED_Config
     14            LCD_Config();
   \   0000000A   0x.... 0x....      BL       LCD_Config
     15            Buzzer_Config();
   \   0000000E   0x.... 0x....      BL       Buzzer_Config
     16            Switch_Config();
   \   00000012   0x.... 0x....      BL       Switch_Config
     17            Encoder_Config();
   \   00000016   0x.... 0x....      BL       Encoder_Config
     18            Motor_Config();
   \   0000001A   0x.... 0x....      BL       Motor_Config
   \   0000001E   0xE011             B.N      ??main_0
     19            
     20            uint16_t frequency;
     21            uint8_t calculatedDutyCycle;
     22            
     23            while (1)
     24            {  
     25          //    if (!START_SWITCH_HIGH) {
     26              if (1) {      
     27                BuzzerOnHigh();
     28                
     29                for (uint8_t i = 0; i < NUM_START_BLINKS; i++) {
     30                  IndicatorLEDOn();
     31                  Delay(500);
     32                  IndicatorLEDOff();
     33                  Delay(500);
     34                }
     35                
     36                BuzzerOff();    
     37                IREmitterOn();
     38                SetMotorDutyCycle(50);
     39                
     40          //      while (STOP_SWITCH_HIGH) {
     41                for(uint8_t i = 0; i < 8; i++){
     42                  frequency = GetEncoderFrequency();
     43                  calculatedDutyCycle = CalculateDutyCycle(frequency);
     44                  SetMotorDutyCycle(calculatedDutyCycle); 
     45                }
     46                
     47                SetMotorDutyCycle(0);
     48                BuzzerOnLow();
     49                
     50                for(uint8_t i = 0; i < NUM_STOP_BLINKS; i++) {
     51                  IndicatorLEDOn();
   \                     ??main_1: (+1)
   \   00000020   0x.... 0x....      BL       IndicatorLEDOn
     52                  Delay(250);
   \   00000024   0x20FA             MOVS     R0,#+250
   \   00000026   0x.... 0x....      BL       Delay
     53                  IndicatorLEDOff();
   \   0000002A   0x.... 0x....      BL       IndicatorLEDOff
     54                  Delay(250);
   \   0000002E   0x20FA             MOVS     R0,#+250
   \   00000030   0x.... 0x....      BL       Delay
     55                }
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_2: (+1)
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x2C08             CMP      R4,#+8
   \   0000003A   0xDBF1             BLT.N    ??main_1
     56                
     57                BuzzerOff();
   \   0000003C   0x.... 0x....      BL       BuzzerOff
     58                IREmitterOff();     
   \   00000040   0x.... 0x....      BL       IREmitterOff
   \                     ??main_0: (+1)
   \   00000044   0x.... 0x....      BL       BuzzerOnHigh
   \   00000048   0x2400             MOVS     R4,#+0
   \   0000004A   0xE00C             B.N      ??main_3
   \                     ??main_4: (+1)
   \   0000004C   0x.... 0x....      BL       IndicatorLEDOn
   \   00000050   0xF44F 0x70FA      MOV      R0,#+500
   \   00000054   0x.... 0x....      BL       Delay
   \   00000058   0x.... 0x....      BL       IndicatorLEDOff
   \   0000005C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000060   0x.... 0x....      BL       Delay
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_3: (+1)
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C05             CMP      R4,#+5
   \   0000006A   0xDBEF             BLT.N    ??main_4
   \   0000006C   0x.... 0x....      BL       BuzzerOff
   \   00000070   0x.... 0x....      BL       IREmitterOn
   \   00000074   0x2032             MOVS     R0,#+50
   \   00000076   0x.... 0x....      BL       SetMotorDutyCycle
   \   0000007A   0x2400             MOVS     R4,#+0
   \   0000007C   0xE008             B.N      ??main_5
   \                     ??main_6: (+1)
   \   0000007E   0x.... 0x....      BL       GetEncoderFrequency
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x.... 0x....      BL       CalculateDutyCycle
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       SetMotorDutyCycle
   \   0000008E   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_5: (+1)
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x2C08             CMP      R4,#+8
   \   00000094   0xDBF3             BLT.N    ??main_6
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      BL       SetMotorDutyCycle
   \   0000009C   0x.... 0x....      BL       BuzzerOnLow
   \   000000A0   0x2400             MOVS     R4,#+0
   \   000000A2   0xE7C8             B.N      ??main_2
     59              }
     60            }
     61          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> BuzzerOff
         8   -> BuzzerOnHigh
         8   -> BuzzerOnLow
         8   -> Buzzer_Config
         8   -> CalculateDutyCycle
         8   -> Delay
         8   -> Delay_Config
         8   -> Encoder_Config
         8   -> GetEncoderFrequency
         8   -> IREmitterOff
         8   -> IREmitterOn
         8   -> IndicatorLEDOff
         8   -> IndicatorLEDOn
         8   -> LCD_Config
         8   -> LED_Config
         8   -> Motor_Config
         8   -> SetMotorDutyCycle
         8   -> Switch_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  main

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
