###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       27/Feb/2017  18:51:24
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\main.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab6\main.c
      1          #include "main.h"
      2          
      3          #define SIG_PIN         GPIO_Pin_15
      4          #define DATA_PINS       0xFF00
      5          

   \                                 In section .bss, align 4
      6          GPIO_InitTypeDef        GPIO_InitStructure;
   \                     GPIO_InitStructure:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
      7          NVIC_InitTypeDef        NVIC_InitStructureMain;
   \                     NVIC_InitStructureMain:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      8          TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   \                     TIM_TimeBaseStructure:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
      9          TIM_OCInitTypeDef       TIM_OCInitStructure;
   \                     TIM_OCInitStructure:
   \   00000000                      DS8 20
     10          

   \                                 In section .text, align 4, keep-with-next
     11          int main(void)
     12          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     13            /*!< At this stage the microcontroller clock setting is already configured, 
     14            this is done through SystemInit() function which is called from startup
     15            files (startup_stm32f40xx.s/startup_stm32f427x.s/startup_stm32f429x.s)
     16            before to branch to application main. 
     17            To reconfigure the default setting of SystemInit() function, refer to
     18            system_stm32f4xx.c file
     19            */  
     20            
     21            uint16_t ticks = ((SystemCoreClock / 2) / (2500)) - 1;
   \   00000002   0x483B             LDR.N    R0,??main_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0xF640 0x11C4      MOVW     R1,#+2500
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x1E44             SUBS     R4,R0,#+1
     22            
     23            
     24            /* Time base default values configuration */
     25          //  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
     26            
     27            /* Output compare default values configuration */
     28          //  TIM_OCStructInit(&TIM_OCInitStructure);
     29              
     30            // Set up clocks for all peripherals
     31            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     32            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2008             MOVS     R0,#+8
   \   0000001E   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     33            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     34            
     35            // Set up GPIOC port for SIG_PIN
     36            GPIO_InitStructure.GPIO_Pin = SIG_PIN;
   \   0000002A   0xF44F 0x4000      MOV      R0,#+32768
   \   0000002E   0x4931             LDR.N    R1,??main_0+0x4
   \   00000030   0x6008             STR      R0,[R1, #+0]
     37            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x492F             LDR.N    R1,??main_0+0x4
   \   00000036   0x7108             STRB     R0,[R1, #+4]
     38            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x492E             LDR.N    R1,??main_0+0x4
   \   0000003C   0x7188             STRB     R0,[R1, #+6]
     39            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x492C             LDR.N    R1,??main_0+0x4
   \   00000042   0x71C8             STRB     R0,[R1, #+7]
     40            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x492B             LDR.N    R1,??main_0+0x4
   \   00000048   0x7148             STRB     R0,[R1, #+5]
     41            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000004A   0x492A             LDR.N    R1,??main_0+0x4
   \   0000004C   0x482A             LDR.N    R0,??main_0+0x8  ;; 0x40020800
   \   0000004E   0x.... 0x....      BL       GPIO_Init
     42            
     43            // Set up GPIOD port for DATA_PINS
     44            GPIO_InitStructure.GPIO_Pin = DATA_PINS;
   \   00000052   0xF44F 0x407F      MOV      R0,#+65280
   \   00000056   0x4927             LDR.N    R1,??main_0+0x4
   \   00000058   0x6008             STR      R0,[R1, #+0]
     45            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x4925             LDR.N    R1,??main_0+0x4
   \   0000005E   0x7108             STRB     R0,[R1, #+4]
     46            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x4924             LDR.N    R1,??main_0+0x4
   \   00000064   0x7188             STRB     R0,[R1, #+6]
     47            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x4922             LDR.N    R1,??main_0+0x4
   \   0000006A   0x71C8             STRB     R0,[R1, #+7]
     48            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x4921             LDR.N    R1,??main_0+0x4
   \   00000070   0x7148             STRB     R0,[R1, #+5]
     49            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000072   0x4920             LDR.N    R1,??main_0+0x4
   \   00000074   0x4820             LDR.N    R0,??main_0+0x8  ;; 0x40020800
   \   00000076   0x.... 0x....      BL       GPIO_Init
     50            
     51            // Set up TIM5 base configuration
     52            TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
   \   0000007A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000007E   0x491F             LDR.N    R1,??main_0+0xC
   \   00000080   0x6048             STR      R0,[R1, #+4]
     53            TIM_TimeBaseStructure.TIM_Prescaler = 0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x491D             LDR.N    R1,??main_0+0xC
   \   00000086   0x8008             STRH     R0,[R1, #+0]
     54            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x491C             LDR.N    R1,??main_0+0xC
   \   0000008C   0x8108             STRH     R0,[R1, #+8]
     55            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x491A             LDR.N    R1,??main_0+0xC
   \   00000092   0x8048             STRH     R0,[R1, #+2]
     56            TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
   \   00000094   0x4919             LDR.N    R1,??main_0+0xC
   \   00000096   0x481A             LDR.N    R0,??main_0+0x10  ;; 0x40000c00
   \   00000098   0x.... 0x....      BL       TIM_TimeBaseInit
     57            
     58            // Output Compare Timing Mode configuaration: Channel 1
     59            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x4919             LDR.N    R1,??main_0+0x14
   \   000000A0   0x8008             STRH     R0,[R1, #+0]
     60            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x4917             LDR.N    R1,??main_0+0x14
   \   000000A6   0x8048             STRH     R0,[R1, #+2]
     61            TIM_OCInitStructure.TIM_Pulse = ticks;
   \   000000A8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AA   0x4816             LDR.N    R0,??main_0+0x14
   \   000000AC   0x6084             STR      R4,[R0, #+8]
     62            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x4914             LDR.N    R1,??main_0+0x14
   \   000000B2   0x8188             STRH     R0,[R1, #+12]
     63            TIM_OC1Init(TIM5, &TIM_OCInitStructure);
   \   000000B4   0x4913             LDR.N    R1,??main_0+0x14
   \   000000B6   0x4812             LDR.N    R0,??main_0+0x10  ;; 0x40000c00
   \   000000B8   0x.... 0x....      BL       TIM_OC1Init
     64              
     65            // Set up NVIC
     66            NVIC_InitStructureMain.NVIC_IRQChannel = TIM5_IRQn;
   \   000000BC   0x2032             MOVS     R0,#+50
   \   000000BE   0x4912             LDR.N    R1,??main_0+0x18
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
     67            NVIC_InitStructureMain.NVIC_IRQChannelPreemptionPriority = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x4910             LDR.N    R1,??main_0+0x18
   \   000000C6   0x7048             STRB     R0,[R1, #+1]
     68            NVIC_InitStructureMain.NVIC_IRQChannelSubPriority = 1;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x490F             LDR.N    R1,??main_0+0x18
   \   000000CC   0x7088             STRB     R0,[R1, #+2]
     69            NVIC_InitStructureMain.NVIC_IRQChannelCmd = ENABLE;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x490D             LDR.N    R1,??main_0+0x18
   \   000000D2   0x70C8             STRB     R0,[R1, #+3]
     70            NVIC_Init(&NVIC_InitStructureMain);
   \   000000D4   0x480C             LDR.N    R0,??main_0+0x18
   \   000000D6   0x.... 0x....      BL       NVIC_Init
     71            
     72            // Enable TIM5 interrupts
     73            TIM_ITConfig(TIM5, TIM_IT_CC1, ENABLE);
   \   000000DA   0x2201             MOVS     R2,#+1
   \   000000DC   0x2102             MOVS     R1,#+2
   \   000000DE   0x4808             LDR.N    R0,??main_0+0x10  ;; 0x40000c00
   \   000000E0   0x.... 0x....      BL       TIM_ITConfig
     74            
     75            // Enable TIM5 counter
     76            TIM_Cmd(TIM5, ENABLE);
   \   000000E4   0x2101             MOVS     R1,#+1
   \   000000E6   0x4806             LDR.N    R0,??main_0+0x10  ;; 0x40000c00
   \   000000E8   0x.... 0x....      BL       TIM_Cmd
     77            
     78            // Infinite loop
     79            while (1)
   \                     ??main_1: (+1)
   \   000000EC   0xE7FE             B.N      ??main_1
   \   000000EE   0xBF00             Nop      
   \                     ??main_0:
   \   000000F0   0x........         DC32     SystemCoreClock
   \   000000F4   0x........         DC32     GPIO_InitStructure
   \   000000F8   0x40020800         DC32     0x40020800
   \   000000FC   0x........         DC32     TIM_TimeBaseStructure
   \   00000100   0x40000C00         DC32     0x40000c00
   \   00000104   0x........         DC32     TIM_OCInitStructure
   \   00000108   0x........         DC32     NVIC_InitStructureMain
     80            {
     81              
     82            }
     83          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> GPIO_Init
         8   -> NVIC_Init
         8   -> RCC_AHB1PeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> TIM_Cmd
         8   -> TIM_ITConfig
         8   -> TIM_OC1Init
         8   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  GPIO_InitStructure
       4  NVIC_InitStructureMain
      20  TIM_OCInitStructure
      12  TIM_TimeBaseStructure
     268  main

 
  44 bytes in section .bss
 268 bytes in section .text
 
 268 bytes of CODE memory
  44 bytes of DATA memory

Errors: none
Warnings: none
