###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       10/Apr/2017  17:10:51
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\List\stm324xg_eval.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\Obj\stm324xg_eval.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm324xg_eval.c
      4            * @author  MCD Application Team
      5            * @version V1.1.1
      6            * @date    11-January-2013
      7            * @brief   This file provides
      8            *            - set of firmware functions to manage Leds, push-button and COM ports
      9            *            - low level initialization functions for SD card (on SDIO) and
     10            *              serial EEPROM (sEE)
     11            *          available on STM324xG-EVAL evaluation board(MB786) RevB from
     12            *          STMicroelectronics.
     13            ******************************************************************************
     14            * @attention
     15            *
     16            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     17            *
     18            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     19            * You may not use this file except in compliance with the License.
     20            * You may obtain a copy of the License at:
     21            *
     22            *        http://www.st.com/software_license_agreement_liberty_v2
     23            *
     24            * Unless required by applicable law or agreed to in writing, software 
     25            * distributed under the License is distributed on an "AS IS" BASIS, 
     26            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     27            * See the License for the specific language governing permissions and
     28            * limitations under the License.
     29            *
     30            ******************************************************************************
     31            */ 
     32            
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm324xg_eval.h"
     35          #include "stm32f4xx_sdio.h"
     36          #include "stm32f4xx_dma.h"
     37          #include "stm32f4xx_i2c.h"
     38          
     39          /** @addtogroup Utilities
     40            * @{
     41            */ 
     42          
     43          /** @addtogroup STM32_EVAL
     44            * @{
     45            */ 
     46          
     47          /** @addtogroup STM324xG_EVAL
     48            * @{
     49            */   
     50              
     51          /** @defgroup STM324xG_EVAL_LOW_LEVEL 
     52            * @brief This file provides firmware functions to manage Leds, push-buttons, 
     53            *        COM ports, SD card on SDIO and serial EEPROM (sEE) available on 
     54            *        STM324xG-EVAL evaluation board from STMicroelectronics.
     55            * @{
     56            */ 
     57          
     58          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_TypesDefinitions
     59            * @{
     60            */ 
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Defines
     67            * @{
     68            */ 
     69          /**
     70            * @}
     71            */ 
     72          
     73          
     74          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Macros
     75            * @{
     76            */ 
     77          /**
     78            * @}
     79            */ 
     80          
     81          
     82          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Variables
     83            * @{
     84            */ 

   \                                 In section .data, align 4
     85          GPIO_TypeDef* GPIO_PORT[LEDn] = {LED1_GPIO_PORT, LED2_GPIO_PORT, LED3_GPIO_PORT,
   \                     GPIO_PORT:
   \   00000000   0x40021800         DC32 40021800H, 40021800H, 40022000H, 40020800H
   \              0x40021800   
   \              0x40022000   
   \              0x40020800   
     86                                           LED4_GPIO_PORT};

   \                                 In section .rodata, align 4
     87          const uint16_t GPIO_PIN[LEDn] = {LED1_PIN, LED2_PIN, LED3_PIN,
   \                     GPIO_PIN:
   \   00000000   0x0040 0x0100      DC16 64, 256, 512, 128
   \              0x0200 0x0080
     88                                           LED4_PIN};

   \                                 In section .rodata, align 4
     89          const uint32_t GPIO_CLK[LEDn] = {LED1_GPIO_CLK, LED2_GPIO_CLK, LED3_GPIO_CLK,
   \                     GPIO_CLK:
   \   00000000   0x00000040         DC32 64, 64, 256, 4
   \              0x00000040   
   \              0x00000100   
   \              0x00000004   
     90                                           LED4_GPIO_CLK};
     91          

   \                                 In section .data, align 4
     92          GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {WAKEUP_BUTTON_GPIO_PORT, TAMPER_BUTTON_GPIO_PORT,
   \                     BUTTON_PORT:
   \   00000000   0x40020000         DC32 40020000H, 40020800H, 40021800H
   \              0x40020800   
   \              0x40021800   
     93                                                KEY_BUTTON_GPIO_PORT}; 
     94          

   \                                 In section .rodata, align 4
     95          const uint16_t BUTTON_PIN[BUTTONn] = {WAKEUP_BUTTON_PIN, TAMPER_BUTTON_PIN,
   \                     BUTTON_PIN:
   \   00000000   0x0001 0x2000      DC16 1, 8192, 32768
   \              0x8000       
   \   00000006   0x00 0x00          DC8 0, 0
     96                                                KEY_BUTTON_PIN}; 
     97          

   \                                 In section .rodata, align 4
     98          const uint32_t BUTTON_CLK[BUTTONn] = {WAKEUP_BUTTON_GPIO_CLK, TAMPER_BUTTON_GPIO_CLK,
   \                     BUTTON_CLK:
   \   00000000   0x00000001         DC32 1, 4, 64
   \              0x00000004   
   \              0x00000040   
     99                                                KEY_BUTTON_GPIO_CLK};
    100          

   \                                 In section .rodata, align 4
    101          const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {WAKEUP_BUTTON_EXTI_LINE,
   \                     BUTTON_EXTI_LINE:
   \   00000000   0x0001 0x2000      DC16 1, 8192, 32768
   \              0x8000       
   \   00000006   0x00 0x00          DC8 0, 0
    102                                                      TAMPER_BUTTON_EXTI_LINE, 
    103                                                      KEY_BUTTON_EXTI_LINE};
    104          

   \                                 In section .rodata, align 4
    105          const uint16_t BUTTON_PORT_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PORT_SOURCE,
   \                     BUTTON_PORT_SOURCE:
   \   00000000   0x0000 0x0002      DC16 0, 2, 6
   \              0x0006       
   \   00000006   0x00 0x00          DC8 0, 0
    106                                                        TAMPER_BUTTON_EXTI_PORT_SOURCE, 
    107                                                        KEY_BUTTON_EXTI_PORT_SOURCE};
    108          								 

   \                                 In section .rodata, align 4
    109          const uint16_t BUTTON_PIN_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PIN_SOURCE,
   \                     BUTTON_PIN_SOURCE:
   \   00000000   0x0000 0x000D      DC16 0, 13, 15
   \              0x000F       
   \   00000006   0x00 0x00          DC8 0, 0
    110                                                       TAMPER_BUTTON_EXTI_PIN_SOURCE, 
    111                                                       KEY_BUTTON_EXTI_PIN_SOURCE}; 

   \                                 In section .rodata, align 4
    112          const uint16_t BUTTON_IRQn[BUTTONn] = {WAKEUP_BUTTON_EXTI_IRQn, TAMPER_BUTTON_EXTI_IRQn,
   \                     BUTTON_IRQn:
   \   00000000   0x0006 0x0028      DC16 6, 40, 40
   \              0x0028       
   \   00000006   0x00 0x00          DC8 0, 0
    113                                                 KEY_BUTTON_EXTI_IRQn};
    114          

   \                                 In section .data, align 4
    115          USART_TypeDef* COM_USART[COMn] = {EVAL_COM1}; 
   \                     COM_USART:
   \   00000000   0x40004800         DC32 40004800H
    116          

   \                                 In section .data, align 4
    117          GPIO_TypeDef* COM_TX_PORT[COMn] = {EVAL_COM1_TX_GPIO_PORT};
   \                     COM_TX_PORT:
   \   00000000   0x40020800         DC32 40020800H
    118           

   \                                 In section .data, align 4
    119          GPIO_TypeDef* COM_RX_PORT[COMn] = {EVAL_COM1_RX_GPIO_PORT};
   \                     COM_RX_PORT:
   \   00000000   0x40020800         DC32 40020800H
    120          

   \                                 In section .rodata, align 4
    121          const uint32_t COM_USART_CLK[COMn] = {EVAL_COM1_CLK};
   \                     COM_USART_CLK:
   \   00000000   0x00040000         DC32 262144
    122          

   \                                 In section .rodata, align 4
    123          const uint32_t COM_TX_PORT_CLK[COMn] = {EVAL_COM1_TX_GPIO_CLK};
   \                     COM_TX_PORT_CLK:
   \   00000000   0x00000004         DC32 4
    124           

   \                                 In section .rodata, align 4
    125          const uint32_t COM_RX_PORT_CLK[COMn] = {EVAL_COM1_RX_GPIO_CLK};
   \                     COM_RX_PORT_CLK:
   \   00000000   0x00000004         DC32 4
    126          

   \                                 In section .rodata, align 2
    127          const uint16_t COM_TX_PIN[COMn] = {EVAL_COM1_TX_PIN};
   \                     COM_TX_PIN:
   \   00000000   0x0400             DC16 1024
    128          

   \                                 In section .rodata, align 2
    129          const uint16_t COM_RX_PIN[COMn] = {EVAL_COM1_RX_PIN};
   \                     COM_RX_PIN:
   \   00000000   0x0800             DC16 2048
    130           

   \                                 In section .rodata, align 2
    131          const uint16_t COM_TX_PIN_SOURCE[COMn] = {EVAL_COM1_TX_SOURCE};
   \                     COM_TX_PIN_SOURCE:
   \   00000000   0x000A             DC16 10
    132          

   \                                 In section .rodata, align 2
    133          const uint16_t COM_RX_PIN_SOURCE[COMn] = {EVAL_COM1_RX_SOURCE};
   \                     COM_RX_PIN_SOURCE:
   \   00000000   0x000B             DC16 11
    134           

   \                                 In section .rodata, align 2
    135          const uint16_t COM_TX_AF[COMn] = {EVAL_COM1_TX_AF};
   \                     COM_TX_AF:
   \   00000000   0x0007             DC16 7
    136           

   \                                 In section .rodata, align 2
    137          const uint16_t COM_RX_AF[COMn] = {EVAL_COM1_RX_AF};
   \                     COM_RX_AF:
   \   00000000   0x0007             DC16 7
    138          

   \                                 In section .bss, align 4
    139          DMA_InitTypeDef    sEEDMA_InitStructure; 
   \                     sEEDMA_InitStructure:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
    140          NVIC_InitTypeDef   NVIC_InitStructure;
   \                     NVIC_InitStructure:
   \   00000000                      DS8 4
    141          
    142          /**
    143            * @}
    144            */ 
    145          
    146          
    147          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_FunctionPrototypes
    148            * @{
    149            */ 
    150          
    151          /**
    152            * @}
    153            */ 
    154          
    155          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Functions
    156            * @{
    157            */ 
    158          
    159          /**
    160            * @brief  Configures LED GPIO.
    161            * @param  Led: Specifies the Led to be configured. 
    162            *   This parameter can be one of following parameters:
    163            *     @arg LED1
    164            *     @arg LED2
    165            *     @arg LED3
    166            *     @arg LED4
    167            * @retval None
    168            */

   \                                 In section .text, align 2, keep-with-next
    169          void STM_EVAL_LEDInit(Led_TypeDef Led)
    170          {
   \                     STM_EVAL_LEDInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    171            GPIO_InitTypeDef  GPIO_InitStructure;
    172            
    173            /* Enable the GPIO_LED Clock */
    174            RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    175          
    176          
    177            /* Configure the GPIO_LED pin */
    178            GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    179            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xF88D 0x0004      STRB     R0,[SP, #+4]
    180            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x0006      STRB     R0,[SP, #+6]
    181            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xF88D 0x0007      STRB     R0,[SP, #+7]
    182            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xF88D 0x0005      STRB     R0,[SP, #+5]
    183            GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000044   0x.... 0x....      BL       GPIO_Init
    184          }
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    185          
    186          /**
    187            * @brief  Turns selected LED On.
    188            * @param  Led: Specifies the Led to be set on. 
    189            *   This parameter can be one of following parameters:
    190            *     @arg LED1
    191            *     @arg LED2
    192            *     @arg LED3
    193            *     @arg LED4  
    194            * @retval None
    195            */

   \                                 In section .text, align 2, keep-with-next
    196          void STM_EVAL_LEDOn(Led_TypeDef Led)
    197          {
    198            GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
   \                     STM_EVAL_LEDOn: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000014   0x8301             STRH     R1,[R0, #+24]
    199          }
   \   00000016   0x4770             BX       LR               ;; return
    200          
    201          /**
    202            * @brief  Turns selected LED Off.
    203            * @param  Led: Specifies the Led to be set off. 
    204            *   This parameter can be one of following parameters:
    205            *     @arg LED1
    206            *     @arg LED2
    207            *     @arg LED3
    208            *     @arg LED4 
    209            * @retval None
    210            */

   \                                 In section .text, align 2, keep-with-next
    211          void STM_EVAL_LEDOff(Led_TypeDef Led)
    212          {
    213            GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
   \                     STM_EVAL_LEDOff: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000014   0x8341             STRH     R1,[R0, #+26]
    214          }
   \   00000016   0x4770             BX       LR               ;; return
    215          
    216          /**
    217            * @brief  Toggles the selected LED.
    218            * @param  Led: Specifies the Led to be toggled. 
    219            *   This parameter can be one of following parameters:
    220            *     @arg LED1
    221            *     @arg LED2
    222            *     @arg LED3
    223            *     @arg LED4  
    224            * @retval None
    225            */

   \                                 In section .text, align 2, keep-with-next
    226          void STM_EVAL_LEDToggle(Led_TypeDef Led)
    227          {
    228            GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
   \                     STM_EVAL_LEDToggle: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x6949             LDR      R1,[R1, #+20]
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xF832 0x2010      LDRH     R2,[R2, R0, LSL #+1]
   \   00000016   0x4051             EORS     R1,R2,R1
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000022   0x6141             STR      R1,[R0, #+20]
    229          }
   \   00000024   0x4770             BX       LR               ;; return
    230          
    231          /**
    232            * @brief  Configures Button GPIO and EXTI Line.
    233            * @param  Button: Specifies the Button to be configured.
    234            *   This parameter can be one of following parameters:   
    235            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    236            *     @arg BUTTON_TAMPER: Tamper Push Button  
    237            *     @arg BUTTON_KEY: Key Push Button 
    238            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    239            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    240            *     @arg BUTTON_UP: Joystick Up Push Button 
    241            *     @arg BUTTON_DOWN: Joystick Down Push Button
    242            *     @arg BUTTON_SEL: Joystick Sel Push Button
    243            * @param  Button_Mode: Specifies Button mode.
    244            *   This parameter can be one of following parameters:   
    245            *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
    246            *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
    247            *                     generation capability  
    248            * @retval None
    249            */

   \                                 In section .text, align 2, keep-with-next
    250          void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    251          {
   \                     STM_EVAL_PBInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    252            GPIO_InitTypeDef GPIO_InitStructure;
    253            EXTI_InitTypeDef EXTI_InitStructure;
    254            NVIC_InitTypeDef NVIC_InitStructure;
    255          
    256          
    257            /* Enable the BUTTON Clock */
    258            RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000014   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    259            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0xF44F 0x4080      MOV      R0,#+16384
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    260          
    261            /* Configure Button pin as input */
    262            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x0010      STRB     R0,[SP, #+16]
    263            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF88D 0x0013      STRB     R0,[SP, #+19]
    264            GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000038   0x9003             STR      R0,[SP, #+12]
    265            GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
   \   0000003A   0xA903             ADD      R1,SP,#+12
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000046   0x.... 0x....      BL       GPIO_Init
    266          
    267          
    268            if (Button_Mode == BUTTON_MODE_EXTI)
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x2D01             CMP      R5,#+1
   \   0000004E   0xD139             BNE.N    ??STM_EVAL_PBInit_0
    269            {
    270              /* Connect Button EXTI Line to Button GPIO Pin */
    271              SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0xF830 0x1014      LDRH     R1,[R0, R4, LSL #+1]
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x.... 0x....      BL       SYSCFG_EXTILineConfig
    272          
    273              /* Configure Button EXTI line */
    274              EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000076   0x9001             STR      R0,[SP, #+4]
    275              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF88D 0x0008      STRB     R0,[SP, #+8]
    276          
    277              if(Button != BUTTON_WAKEUP)
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x2C00             CMP      R4,#+0
   \   00000082   0xD003             BEQ.N    ??STM_EVAL_PBInit_1
    278              {
    279                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
   \   00000084   0x200C             MOVS     R0,#+12
   \   00000086   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   0000008A   0xE002             B.N      ??STM_EVAL_PBInit_2
    280              }
    281              else
    282              {
    283                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
   \                     ??STM_EVAL_PBInit_1: (+1)
   \   0000008C   0x2008             MOVS     R0,#+8
   \   0000008E   0xF88D 0x0009      STRB     R0,[SP, #+9]
    284              }
    285              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \                     ??STM_EVAL_PBInit_2: (+1)
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xF88D 0x000A      STRB     R0,[SP, #+10]
    286              EXTI_Init(&EXTI_InitStructure);
   \   00000098   0xA801             ADD      R0,SP,#+4
   \   0000009A   0x.... 0x....      BL       EXTI_Init
    287          
    288              /* Enable and set Button EXTI Interrupt to the lowest priority */
    289              NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   000000A8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    290              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \   000000AC   0x200F             MOVS     R0,#+15
   \   000000AE   0xF88D 0x0001      STRB     R0,[SP, #+1]
    291              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   \   000000B2   0x200F             MOVS     R0,#+15
   \   000000B4   0xF88D 0x0002      STRB     R0,[SP, #+2]
    292              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xF88D 0x0003      STRB     R0,[SP, #+3]
    293          
    294              NVIC_Init(&NVIC_InitStructure); 
   \   000000BE   0x4668             MOV      R0,SP
   \   000000C0   0x.... 0x....      BL       NVIC_Init
    295            }
    296          }
   \                     ??STM_EVAL_PBInit_0: (+1)
   \   000000C4   0xB005             ADD      SP,SP,#+20
   \   000000C6   0xBD30             POP      {R4,R5,PC}       ;; return
    297          
    298          /**
    299            * @brief  Returns the selected Button state.
    300            * @param  Button: Specifies the Button to be checked.
    301            *   This parameter can be one of following parameters:    
    302            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    303            *     @arg BUTTON_TAMPER: Tamper Push Button  
    304            *     @arg BUTTON_KEY: Key Push Button 
    305            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    306            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    307            *     @arg BUTTON_UP: Joystick Up Push Button 
    308            *     @arg BUTTON_DOWN: Joystick Down Push Button
    309            *     @arg BUTTON_SEL: Joystick Sel Push Button    
    310            * @retval The Button GPIO pin value.
    311            */

   \                                 In section .text, align 2, keep-with-next
    312          uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
    313          {
   \                     STM_EVAL_PBGetState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    314            return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable13_4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable13_5
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000016   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    315          }
    316          
    317          
    318          /**
    319            * @brief  Configures COM port.
    320            * @param  COM: Specifies the COM port to be configured.
    321            *   This parameter can be one of following parameters:    
    322            *     @arg COM1
    323            *     @arg COM2  
    324            * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
    325            *   contains the configuration information for the specified USART peripheral.
    326            * @retval None
    327            */

   \                                 In section .text, align 2, keep-with-next
    328          void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
    329          {
   \                     STM_EVAL_COMInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    330            GPIO_InitTypeDef GPIO_InitStructure;
    331          
    332            /* Enable GPIO clock */
    333            RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable13_11
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000001E   0x4310             ORRS     R0,R2,R0
   \   00000020   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    334          
    335            if (COM == COM1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD107             BNE.N    ??STM_EVAL_COMInit_0
    336            {
    337              /* Enable UART clock */
    338              RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000036   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    339            }
    340          
    341            /* Connect PXx to USARTx_Tx*/
    342            GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
   \                     ??STM_EVAL_COMInit_0: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xF830 0x2014      LDRH     R2,[R0, R4, LSL #+1]
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_14
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0xF830 0x1014      LDRH     R1,[R0, R4, LSL #+1]
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005A   0x.... 0x....      BL       GPIO_PinAFConfig
    343          
    344            /* Connect PXx to USARTx_Rx*/
    345            GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xF830 0x2014      LDRH     R2,[R0, R4, LSL #+1]
   \   00000068   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0xF830 0x1014      LDRH     R1,[R0, R4, LSL #+1]
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007E   0x.... 0x....      BL       GPIO_PinAFConfig
    346          
    347            /* Configure USART Tx as alternate function  */
    348            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF88D 0x0006      STRB     R0,[SP, #+6]
    349            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xF88D 0x0007      STRB     R0,[SP, #+7]
    350            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0xF88D 0x0004      STRB     R0,[SP, #+4]
    351          
    352            GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable13_19
   \   00000098   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009A   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   0000009E   0x9000             STR      R0,[SP, #+0]
    353            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000A0   0x2002             MOVS     R0,#+2
   \   000000A2   0xF88D 0x0005      STRB     R0,[SP, #+5]
    354            GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
   \   000000A6   0x4669             MOV      R1,SP
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   000000AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000B2   0x.... 0x....      BL       GPIO_Init
    355          
    356            /* Configure USART Rx as alternate function  */
    357            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   000000B6   0x2002             MOVS     R0,#+2
   \   000000B8   0xF88D 0x0004      STRB     R0,[SP, #+4]
    358            GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable13_20
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   000000C6   0x9000             STR      R0,[SP, #+0]
    359            GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
   \   000000C8   0x4669             MOV      R1,SP
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000D4   0x.... 0x....      BL       GPIO_Init
    360          
    361            /* USART configuration */
    362            USART_Init(COM_USART[COM], USART_InitStruct);
   \   000000D8   0x0029             MOVS     R1,R5
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000E4   0x.... 0x....      BL       USART_Init
    363              
    364            /* Enable USART */
    365            USART_Cmd(COM_USART[COM], ENABLE);
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   000000EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F0   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F4   0x.... 0x....      BL       USART_Cmd
    366          }
   \   000000F8   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    367          
    368          /**
    369            * @brief  DeInitializes the SDIO interface.
    370            * @param  None
    371            * @retval None
    372            */

   \                                 In section .text, align 2, keep-with-next
    373          void SD_LowLevel_DeInit(void)
    374          {
   \                     SD_LowLevel_DeInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    375            GPIO_InitTypeDef  GPIO_InitStructure;
    376            
    377            /*!< Disable SDIO Clock */
    378            SDIO_ClockCmd(DISABLE);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       SDIO_ClockCmd
    379            
    380            /*!< Set Power State to OFF */
    381            SDIO_SetPowerState(SDIO_PowerState_OFF);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       SDIO_SetPowerState
    382          
    383            /*!< DeInitializes the SDIO peripheral */
    384            SDIO_DeInit();
   \   00000010   0x.... 0x....      BL       SDIO_DeInit
    385            
    386            /* Disable the SDIO APB2 Clock */
    387            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xF44F 0x6000      MOV      R0,#+2048
   \   0000001A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    388          
    389            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x2108             MOVS     R1,#+8
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000026   0x.... 0x....      BL       GPIO_PinAFConfig
    390            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x2109             MOVS     R1,#+9
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000032   0x.... 0x....      BL       GPIO_PinAFConfig
    391            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x210A             MOVS     R1,#+10
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000003E   0x.... 0x....      BL       GPIO_PinAFConfig
    392            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0x210B             MOVS     R1,#+11
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000004A   0x.... 0x....      BL       GPIO_PinAFConfig
    393            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x210C             MOVS     R1,#+12
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000056   0x.... 0x....      BL       GPIO_PinAFConfig
    394            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0x2102             MOVS     R1,#+2
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_23  ;; 0x40020c00
   \   00000062   0x.... 0x....      BL       GPIO_PinAFConfig
    395          
    396            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    397            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
   \   00000066   0xF44F 0x6070      MOV      R0,#+3840
   \   0000006A   0x9000             STR      R0,[SP, #+0]
    398            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    399            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xF88D 0x0007      STRB     R0,[SP, #+7]
    400            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000078   0x4669             MOV      R1,SP
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000007E   0x.... 0x....      BL       GPIO_Init
    401          
    402            /* Configure PD.02 CMD line */
    403            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000082   0x2004             MOVS     R0,#+4
   \   00000084   0x9000             STR      R0,[SP, #+0]
    404            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable13_23  ;; 0x40020c00
   \   0000008C   0x.... 0x....      BL       GPIO_Init
    405          
    406            /* Configure PC.12 pin: CLK pin */
    407            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
   \   00000090   0xF44F 0x5080      MOV      R0,#+4096
   \   00000094   0x9000             STR      R0,[SP, #+0]
    408            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000009C   0x.... 0x....      BL       GPIO_Init
    409          }
   \   000000A0   0xBD07             POP      {R0-R2,PC}       ;; return
    410          
    411          /**
    412            * @brief  Initializes the SD Card and put it into StandBy State (Ready for 
    413            *         data transfer).
    414            * @param  None
    415            * @retval None
    416            */

   \                                 In section .text, align 2, keep-with-next
    417          void SD_LowLevel_Init(void)
    418          {
   \                     SD_LowLevel_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    419            GPIO_InitTypeDef  GPIO_InitStructure;
    420          
    421            /* GPIOC and GPIOD Periph clock enable */
    422            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x208C             MOVS     R0,#+140
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    423          
    424            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
   \   0000000C   0x220C             MOVS     R2,#+12
   \   0000000E   0x2108             MOVS     R1,#+8
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000014   0x.... 0x....      BL       GPIO_PinAFConfig
    425            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
   \   00000018   0x220C             MOVS     R2,#+12
   \   0000001A   0x2109             MOVS     R1,#+9
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000020   0x.... 0x....      BL       GPIO_PinAFConfig
    426            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
   \   00000024   0x220C             MOVS     R2,#+12
   \   00000026   0x210A             MOVS     R1,#+10
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000002C   0x.... 0x....      BL       GPIO_PinAFConfig
    427            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
   \   00000030   0x220C             MOVS     R2,#+12
   \   00000032   0x210B             MOVS     R1,#+11
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000038   0x.... 0x....      BL       GPIO_PinAFConfig
    428            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x210C             MOVS     R1,#+12
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000044   0x.... 0x....      BL       GPIO_PinAFConfig
    429            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
   \   00000048   0x220C             MOVS     R2,#+12
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_23  ;; 0x40020c00
   \   00000050   0x.... 0x....      BL       GPIO_PinAFConfig
    430          
    431            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    432            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x9000             STR      R0,[SP, #+0]
    433            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    434            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xF88D 0x0004      STRB     R0,[SP, #+4]
    435            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF88D 0x0006      STRB     R0,[SP, #+6]
    436            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0xF88D 0x0007      STRB     R0,[SP, #+7]
    437            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000072   0x4669             MOV      R1,SP
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   00000078   0x.... 0x....      BL       GPIO_Init
    438          
    439            /* Configure PD.02 CMD line */
    440            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   0000007C   0x2004             MOVS     R0,#+4
   \   0000007E   0x9000             STR      R0,[SP, #+0]
    441            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000080   0x4669             MOV      R1,SP
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable13_23  ;; 0x40020c00
   \   00000086   0x.... 0x....      BL       GPIO_Init
    442          
    443            /* Configure PC.12 pin: CLK pin */
    444            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
   \   0000008A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000008E   0x9000             STR      R0,[SP, #+0]
    445            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF88D 0x0007      STRB     R0,[SP, #+7]
    446            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable13_22  ;; 0x40020800
   \   0000009C   0x.... 0x....      BL       GPIO_Init
    447            
    448            /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
    449            GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
   \   000000A0   0xF44F 0x5000      MOV      R0,#+8192
   \   000000A4   0x9000             STR      R0,[SP, #+0]
    450            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF88D 0x0004      STRB     R0,[SP, #+4]
    451            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0xF88D 0x0007      STRB     R0,[SP, #+7]
    452            GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
   \   000000B2   0x4669             MOV      R1,SP
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable13_24  ;; 0x40021c00
   \   000000B8   0x.... 0x....      BL       GPIO_Init
    453          
    454            /* Enable the SDIO APB2 Clock */
    455            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0xF44F 0x6000      MOV      R0,#+2048
   \   000000C2   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    456          
    457            /* Enable the DMA2 Clock */
    458            RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
   \   000000C6   0x2101             MOVS     R1,#+1
   \   000000C8   0xF45F 0x0080      MOVS     R0,#+4194304
   \   000000CC   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    459          }
   \   000000D0   0xBD07             POP      {R0-R2,PC}       ;; return
    460          
    461          /**
    462            * @brief  Configures the DMA2 Channel4 for SDIO Tx request.
    463            * @param  BufferSRC: pointer to the source buffer
    464            * @param  BufferSize: buffer size
    465            * @retval None
    466            */

   \                                 In section .text, align 2, keep-with-next
    467          void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
    468          {
   \                     SD_LowLevel_DMA_TxConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    469            DMA_InitTypeDef SDDMA_InitStructure;
    470          
    471            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
   \   00000008   0xF05F 0x51FA      MOVS     R1,#+524288000
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable13_25  ;; 0x40026458
   \   00000010   0x.... 0x....      BL       DMA_ClearFlag
    472          
    473            /* DMA2 Stream3  or Stream6 disable */
    474            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_25  ;; 0x40026458
   \   0000001A   0x.... 0x....      BL       DMA_Cmd
    475          
    476            /* DMA2 Stream3  or Stream6 Config */
    477            DMA_DeInit(SD_SDIO_DMA_STREAM);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable13_25  ;; 0x40026458
   \   00000022   0x.... 0x....      BL       DMA_DeInit
    478          
    479            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
   \   00000026   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000002A   0x9000             STR      R0,[SP, #+0]
    480            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable13_26  ;; 0x40012c80
   \   00000030   0x9001             STR      R0,[SP, #+4]
    481            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
   \   00000032   0x9502             STR      R5,[SP, #+8]
    482            SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
   \   00000034   0x2040             MOVS     R0,#+64
   \   00000036   0x9003             STR      R0,[SP, #+12]
    483            SDDMA_InitStructure.DMA_BufferSize = BufferSize;
   \   00000038   0x9404             STR      R4,[SP, #+16]
    484            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9005             STR      R0,[SP, #+20]
    485            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   0000003E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000042   0x9006             STR      R0,[SP, #+24]
    486            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \   00000044   0xF44F 0x5080      MOV      R0,#+4096
   \   00000048   0x9007             STR      R0,[SP, #+28]
    487            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \   0000004A   0xF44F 0x4080      MOV      R0,#+16384
   \   0000004E   0x9008             STR      R0,[SP, #+32]
    488            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x9009             STR      R0,[SP, #+36]
    489            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   00000054   0xF45F 0x3040      MOVS     R0,#+196608
   \   00000058   0x900A             STR      R0,[SP, #+40]
    490            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   \   0000005A   0x2004             MOVS     R0,#+4
   \   0000005C   0x900B             STR      R0,[SP, #+44]
    491            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   \   0000005E   0x2003             MOVS     R0,#+3
   \   00000060   0x900C             STR      R0,[SP, #+48]
    492            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
   \   00000062   0xF45F 0x0000      MOVS     R0,#+8388608
   \   00000066   0x900D             STR      R0,[SP, #+52]
    493            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
   \   00000068   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000006C   0x900E             STR      R0,[SP, #+56]
    494            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
   \   0000006E   0x4669             MOV      R1,SP
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable13_25  ;; 0x40026458
   \   00000074   0x.... 0x....      BL       DMA_Init
    495            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0x2110             MOVS     R1,#+16
   \   0000007C   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000007E   0x.... 0x....      BL       DMA_ITConfig
    496            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
   \   00000082   0x2120             MOVS     R1,#+32
   \   00000084   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   00000086   0x.... 0x....      BL       DMA_FlowControllerConfig
    497          
    498            /* DMA2 Stream3  or Stream6 enable */
    499            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000008E   0x.... 0x....      BL       DMA_Cmd
    500              
    501          }
   \   00000092   0xB00F             ADD      SP,SP,#+60
   \   00000094   0xBD30             POP      {R4,R5,PC}       ;; return
    502          
    503          /**
    504            * @brief  Configures the DMA2 Channel4 for SDIO Rx request.
    505            * @param  BufferDST: pointer to the destination buffer
    506            * @param  BufferSize: buffer size
    507            * @retval None
    508            */

   \                                 In section .text, align 2, keep-with-next
    509          void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
    510          {
   \                     SD_LowLevel_DMA_RxConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    511            DMA_InitTypeDef SDDMA_InitStructure;
    512          
    513            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
   \   00000008   0xF05F 0x51FA      MOVS     R1,#+524288000
   \   0000000C   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000000E   0x.... 0x....      BL       DMA_ClearFlag
    514          
    515            /* DMA2 Stream3  or Stream6 disable */
    516            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   00000016   0x.... 0x....      BL       DMA_Cmd
    517          
    518            /* DMA2 Stream3 or Stream6 Config */
    519            DMA_DeInit(SD_SDIO_DMA_STREAM);
   \   0000001A   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000001C   0x.... 0x....      BL       DMA_DeInit
    520          
    521            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
   \   00000020   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000024   0x9000             STR      R0,[SP, #+0]
    522            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
   \   00000026   0x....             LDR.N    R0,??DataTable13_26  ;; 0x40012c80
   \   00000028   0x9001             STR      R0,[SP, #+4]
    523            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
   \   0000002A   0x9502             STR      R5,[SP, #+8]
    524            SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9003             STR      R0,[SP, #+12]
    525            SDDMA_InitStructure.DMA_BufferSize = BufferSize;
   \   00000030   0x9404             STR      R4,[SP, #+16]
    526            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9005             STR      R0,[SP, #+20]
    527            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   00000036   0xF44F 0x6080      MOV      R0,#+1024
   \   0000003A   0x9006             STR      R0,[SP, #+24]
    528            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \   0000003C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000040   0x9007             STR      R0,[SP, #+28]
    529            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \   00000042   0xF44F 0x4080      MOV      R0,#+16384
   \   00000046   0x9008             STR      R0,[SP, #+32]
    530            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9009             STR      R0,[SP, #+36]
    531            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   0000004C   0xF45F 0x3040      MOVS     R0,#+196608
   \   00000050   0x900A             STR      R0,[SP, #+40]
    532            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x900B             STR      R0,[SP, #+44]
    533            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x900C             STR      R0,[SP, #+48]
    534            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
   \   0000005A   0xF45F 0x0000      MOVS     R0,#+8388608
   \   0000005E   0x900D             STR      R0,[SP, #+52]
    535            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
   \   00000060   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000064   0x900E             STR      R0,[SP, #+56]
    536            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000006A   0x.... 0x....      BL       DMA_Init
    537            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
   \   0000006E   0x2201             MOVS     R2,#+1
   \   00000070   0x2110             MOVS     R1,#+16
   \   00000072   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   00000074   0x.... 0x....      BL       DMA_ITConfig
    538            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
   \   00000078   0x2120             MOVS     R1,#+32
   \   0000007A   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   0000007C   0x.... 0x....      BL       DMA_FlowControllerConfig
    539          
    540            /* DMA2 Stream3 or Stream6 enable */
    541            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40026458
   \   00000084   0x.... 0x....      BL       DMA_Cmd
    542          }
   \   00000088   0xB00F             ADD      SP,SP,#+60
   \   0000008A   0xBD30             POP      {R4,R5,PC}       ;; return
    543          
    544          /**
    545            * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
    546            * @param  None
    547            * @retval None
    548            */

   \                                 In section .text, align 2, keep-with-next
    549          void sEE_LowLevel_DeInit(void)
    550          {
   \                     sEE_LowLevel_DeInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    551            GPIO_InitTypeDef  GPIO_InitStructure; 
    552             
    553            /* sEE_I2C Peripheral Disable */
    554            I2C_Cmd(sEE_I2C, DISABLE);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable13_27  ;; 0x40005400
   \   00000008   0x.... 0x....      BL       I2C_Cmd
    555           
    556            /* sEE_I2C DeInit */
    557            I2C_DeInit(sEE_I2C);
   \   0000000C   0x....             LDR.N    R0,??DataTable13_27  ;; 0x40005400
   \   0000000E   0x.... 0x....      BL       I2C_DeInit
    558          
    559            /*!< sEE_I2C Periph clock disable */
    560            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000018   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    561              
    562            /*!< GPIO configuration */  
    563            /*!< Configure sEE_I2C pins: SCL */
    564            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
   \   0000001C   0x2040             MOVS     R0,#+64
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    565            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF88D 0x0004      STRB     R0,[SP, #+4]
    566            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x0007      STRB     R0,[SP, #+7]
    567            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   00000030   0x.... 0x....      BL       GPIO_Init
    568          
    569            /*!< Configure sEE_I2C pins: SDA */
    570            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
   \   00000034   0xF44F 0x7000      MOV      R0,#+512
   \   00000038   0x9000             STR      R0,[SP, #+0]
    571            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       GPIO_Init
    572          
    573            /* Configure and enable I2C DMA TX Stream interrupt */
    574            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
   \   00000042   0x2011             MOVS     R0,#+17
   \   00000044   0x....             LDR.N    R1,??DataTable13_29
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    575            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable13_29
   \   0000004C   0x7048             STRB     R0,[R1, #+1]
    576            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR.N    R1,??DataTable13_29
   \   00000052   0x7088             STRB     R0,[R1, #+2]
    577            NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x....             LDR.N    R1,??DataTable13_29
   \   00000058   0x70C8             STRB     R0,[R1, #+3]
    578            NVIC_Init(&NVIC_InitStructure);
   \   0000005A   0x....             LDR.N    R0,??DataTable13_29
   \   0000005C   0x.... 0x....      BL       NVIC_Init
    579          
    580            /* Configure and enable I2C DMA RX Stream interrupt */
    581            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
   \   00000060   0x200B             MOVS     R0,#+11
   \   00000062   0x....             LDR.N    R1,??DataTable13_29
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    582            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x....             LDR.N    R1,??DataTable13_29
   \   0000006A   0x7048             STRB     R0,[R1, #+1]
    583            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x....             LDR.N    R1,??DataTable13_29
   \   00000070   0x7088             STRB     R0,[R1, #+2]
    584            NVIC_Init(&NVIC_InitStructure);   
   \   00000072   0x....             LDR.N    R0,??DataTable13_29
   \   00000074   0x.... 0x....      BL       NVIC_Init
    585            
    586            /* Disable and Deinitialize the DMA Streams */
    587            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   0000007C   0x.... 0x....      BL       DMA_Cmd
    588            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000084   0x.... 0x....      BL       DMA_Cmd
    589            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
   \   00000088   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   0000008A   0x.... 0x....      BL       DMA_DeInit
    590            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
   \   0000008E   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000090   0x.... 0x....      BL       DMA_DeInit
    591          }
   \   00000094   0xBD07             POP      {R0-R2,PC}       ;; return
    592          
    593          /**
    594            * @brief  Initializes peripherals used by the I2C EEPROM driver.
    595            * @param  None
    596            * @retval None
    597            */

   \                                 In section .text, align 2, keep-with-next
    598          void sEE_LowLevel_Init(void)
    599          {
   \                     sEE_LowLevel_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    600            GPIO_InitTypeDef  GPIO_InitStructure; 
    601             
    602            /*!< sEE_I2C Periph clock enable */
    603            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000000A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    604            
    605            /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
    606            RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    607          
    608            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF44F 0x4080      MOV      R0,#+16384
   \   0000001C   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    609            
    610            /* Reset sEE_I2C IP */
    611            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000026   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    612            
    613            /* Release reset signal of sEE_I2C IP */
    614            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000030   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    615           
    616            /*!< GPIO configuration */
    617            /* Connect PXx to I2C_SCL*/
    618            GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
   \   00000034   0x2204             MOVS     R2,#+4
   \   00000036   0x2106             MOVS     R1,#+6
   \   00000038   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   0000003A   0x.... 0x....      BL       GPIO_PinAFConfig
    619            /* Connect PXx to I2C_SDA*/
    620            GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
   \   0000003E   0x2204             MOVS     R2,#+4
   \   00000040   0x2109             MOVS     R1,#+9
   \   00000042   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   00000044   0x.... 0x....      BL       GPIO_PinAFConfig
    621            
    622            /*!< Configure sEE_I2C pins: SCL */   
    623            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
   \   00000048   0x2040             MOVS     R0,#+64
   \   0000004A   0x9000             STR      R0,[SP, #+0]
    624            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    625            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0xF88D 0x0005      STRB     R0,[SP, #+5]
    626            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    627            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF88D 0x0007      STRB     R0,[SP, #+7]
    628            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   00000068   0x.... 0x....      BL       GPIO_Init
    629          
    630            /*!< Configure sEE_I2C pins: SDA */
    631            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
   \   0000006C   0xF44F 0x7000      MOV      R0,#+512
   \   00000070   0x9000             STR      R0,[SP, #+0]
    632            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
   \   00000072   0x4669             MOV      R1,SP
   \   00000074   0x....             LDR.N    R0,??DataTable13_28  ;; 0x40020400
   \   00000076   0x.... 0x....      BL       GPIO_Init
    633          
    634           
    635            /* Configure and enable I2C DMA TX Channel interrupt */
    636            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
   \   0000007A   0x2011             MOVS     R0,#+17
   \   0000007C   0x....             LDR.N    R1,??DataTable13_29
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    637            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x....             LDR.N    R1,??DataTable13_29
   \   00000084   0x7048             STRB     R0,[R1, #+1]
    638            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x....             LDR.N    R1,??DataTable13_29
   \   0000008A   0x7088             STRB     R0,[R1, #+2]
    639            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x....             LDR.N    R1,??DataTable13_29
   \   00000090   0x70C8             STRB     R0,[R1, #+3]
    640            NVIC_Init(&NVIC_InitStructure);
   \   00000092   0x....             LDR.N    R0,??DataTable13_29
   \   00000094   0x.... 0x....      BL       NVIC_Init
    641          
    642            /* Configure and enable I2C DMA RX Channel interrupt */
    643            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
   \   00000098   0x200B             MOVS     R0,#+11
   \   0000009A   0x....             LDR.N    R1,??DataTable13_29
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    644            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x....             LDR.N    R1,??DataTable13_29
   \   000000A2   0x7048             STRB     R0,[R1, #+1]
    645            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x....             LDR.N    R1,??DataTable13_29
   \   000000A8   0x7088             STRB     R0,[R1, #+2]
    646            NVIC_Init(&NVIC_InitStructure);  
   \   000000AA   0x....             LDR.N    R0,??DataTable13_29
   \   000000AC   0x.... 0x....      BL       NVIC_Init
    647            
    648            /*!< I2C DMA TX and RX channels configuration */
    649            /* Enable the DMA clock */
    650            RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
   \   000000B0   0x2101             MOVS     R1,#+1
   \   000000B2   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000000B6   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    651            
    652            /* Clear any pending flag on Rx Stream  */
    653            DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
    654                                                 sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
   \   000000BA   0x....             LDR.N    R1,??DataTable13_32  ;; 0x203d0000
   \   000000BC   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   000000BE   0x.... 0x....      BL       DMA_ClearFlag
    655            /* Disable the EE I2C Tx DMA stream */
    656            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   000000C6   0x.... 0x....      BL       DMA_Cmd
    657            /* Configure the DMA stream for the EE I2C peripheral TX direction */
    658            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
   \   000000CA   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   000000CC   0x.... 0x....      BL       DMA_DeInit
    659            sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
   \   000000D0   0xF05F 0x7000      MOVS     R0,#+33554432
   \   000000D4   0x....             LDR.N    R1,??DataTable13_33
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    660            sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
   \   000000D8   0x....             LDR.N    R0,??DataTable13_34  ;; 0x40005410
   \   000000DA   0x....             LDR.N    R1,??DataTable13_33
   \   000000DC   0x6048             STR      R0,[R1, #+4]
    661            sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x....             LDR.N    R1,??DataTable13_33
   \   000000E2   0x6088             STR      R0,[R1, #+8]
    662            sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
   \   000000E4   0x2040             MOVS     R0,#+64
   \   000000E6   0x....             LDR.N    R1,??DataTable13_33
   \   000000E8   0x60C8             STR      R0,[R1, #+12]
    663            sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
   \   000000EA   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000EE   0x....             LDR.N    R1,??DataTable13_33
   \   000000F0   0x6108             STR      R0,[R1, #+16]
    664            sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x....             LDR.N    R1,??DataTable13_33
   \   000000F6   0x6148             STR      R0,[R1, #+20]
    665            sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   000000F8   0xF44F 0x6080      MOV      R0,#+1024
   \   000000FC   0x....             LDR.N    R1,??DataTable13_33
   \   000000FE   0x6188             STR      R0,[R1, #+24]
    666            sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x....             LDR.N    R1,??DataTable13_33
   \   00000104   0x61C8             STR      R0,[R1, #+28]
    667            sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x....             LDR.N    R1,??DataTable13_33
   \   0000010A   0x6208             STR      R0,[R1, #+32]
    668            sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x....             LDR.N    R1,??DataTable13_33
   \   00000110   0x6248             STR      R0,[R1, #+36]
    669            sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   00000112   0xF45F 0x3040      MOVS     R0,#+196608
   \   00000116   0x....             LDR.N    R1,??DataTable13_33
   \   00000118   0x6288             STR      R0,[R1, #+40]
    670            sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   \   0000011A   0x2004             MOVS     R0,#+4
   \   0000011C   0x....             LDR.N    R1,??DataTable13_33
   \   0000011E   0x62C8             STR      R0,[R1, #+44]
    671            sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   \   00000120   0x2003             MOVS     R0,#+3
   \   00000122   0x....             LDR.N    R1,??DataTable13_33
   \   00000124   0x6308             STR      R0,[R1, #+48]
    672            sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x....             LDR.N    R1,??DataTable13_33
   \   0000012A   0x6348             STR      R0,[R1, #+52]
    673            sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x....             LDR.N    R1,??DataTable13_33
   \   00000130   0x6388             STR      R0,[R1, #+56]
    674            DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
   \   00000132   0x....             LDR.N    R1,??DataTable13_33
   \   00000134   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   00000136   0x.... 0x....      BL       DMA_Init
    675          
    676            /* Clear any pending flag on Rx Stream */
    677            DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
    678                                                 sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
   \   0000013A   0x....             LDR.N    R1,??DataTable13_35  ;; 0x1080003d
   \   0000013C   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   0000013E   0x.... 0x....      BL       DMA_ClearFlag
    679            /* Disable the EE I2C DMA Rx stream */
    680            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000146   0x.... 0x....      BL       DMA_Cmd
    681            /* Configure the DMA stream for the EE I2C peripheral RX direction */
    682            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
   \   0000014A   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   0000014C   0x.... 0x....      BL       DMA_DeInit
    683            DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
   \   00000150   0x....             LDR.N    R1,??DataTable13_33
   \   00000152   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000154   0x.... 0x....      BL       DMA_Init
    684            
    685            /* Enable the DMA Channels Interrupts */
    686            DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
   \   00000158   0x2201             MOVS     R2,#+1
   \   0000015A   0x2110             MOVS     R1,#+16
   \   0000015C   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   0000015E   0x.... 0x....      BL       DMA_ITConfig
    687            DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
   \   00000162   0x2201             MOVS     R2,#+1
   \   00000164   0x2110             MOVS     R1,#+16
   \   00000166   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000168   0x.... 0x....      BL       DMA_ITConfig
    688          }
   \   0000016C   0xBD07             POP      {R0-R2,PC}       ;; return
    689          
    690          /**
    691            * @brief  Initializes DMA channel used by the I2C EEPROM driver.
    692            * @param  None
    693            * @retval None
    694            */

   \                                 In section .text, align 2, keep-with-next
    695          void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
    696          { 
   \                     sEE_LowLevel_DMAConfig: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    697            /* Initialize the DMA with the new parameters */
    698            if (Direction == sEE_DIRECTION_TX)
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD10B             BNE.N    ??sEE_LowLevel_DMAConfig_0
    699            {
    700              /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    701              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
   \   00000006   0x....             LDR.N    R2,??DataTable13_33
   \   00000008   0x6090             STR      R0,[R2, #+8]
    702              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
   \   0000000A   0x2040             MOVS     R0,#+64
   \   0000000C   0x....             LDR.N    R2,??DataTable13_33
   \   0000000E   0x60D0             STR      R0,[R2, #+12]
    703              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
   \   00000010   0x....             LDR.N    R0,??DataTable13_33
   \   00000012   0x6101             STR      R1,[R0, #+16]
    704              DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
   \   00000014   0x....             LDR.N    R1,??DataTable13_33
   \   00000016   0x....             LDR.N    R0,??DataTable13_30  ;; 0x400260a0
   \   00000018   0x.... 0x....      BL       DMA_Init
   \   0000001C   0xE00A             B.N      ??sEE_LowLevel_DMAConfig_1
    705            }
    706            else
    707            { 
    708              /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    709              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
   \                     ??sEE_LowLevel_DMAConfig_0: (+1)
   \   0000001E   0x....             LDR.N    R2,??DataTable13_33
   \   00000020   0x6090             STR      R0,[R2, #+8]
    710              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R2,??DataTable13_33
   \   00000026   0x60D0             STR      R0,[R2, #+12]
    711              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
   \   00000028   0x....             LDR.N    R0,??DataTable13_33
   \   0000002A   0x6101             STR      R1,[R0, #+16]
    712              DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
   \   0000002C   0x....             LDR.N    R1,??DataTable13_33
   \   0000002E   0x....             LDR.N    R0,??DataTable13_31  ;; 0x40026010
   \   00000030   0x.... 0x....      BL       DMA_Init
    713            }
    714          }
   \                     ??sEE_LowLevel_DMAConfig_1: (+1)
   \   00000034   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     GPIO_CLK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     GPIO_PIN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     GPIO_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     BUTTON_CLK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     BUTTON_PIN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     BUTTON_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     BUTTON_PIN_SOURCE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     BUTTON_PORT_SOURCE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     BUTTON_EXTI_LINE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     BUTTON_IRQn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     COM_TX_PORT_CLK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     COM_RX_PORT_CLK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     COM_USART_CLK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     COM_TX_AF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     COM_TX_PIN_SOURCE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     COM_TX_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     COM_RX_AF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     COM_RX_PIN_SOURCE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     COM_RX_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x........         DC32     COM_TX_PIN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     COM_RX_PIN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     COM_USART

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x40021C00         DC32     0x40021c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x40026458         DC32     0x40026458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x40012C80         DC32     0x40012c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x........         DC32     NVIC_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_31:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_32:
   \   00000000   0x203D0000         DC32     0x203d0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_33:
   \   00000000   0x........         DC32     sEEDMA_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_34:
   \   00000000   0x40005410         DC32     0x40005410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_35:
   \   00000000   0x1080003D         DC32     0x1080003d
    715          
    716          /**
    717            * @}
    718            */ 
    719          
    720          
    721          /**
    722            * @}
    723            */ 
    724          
    725          /**
    726            * @}
    727            */
    728          
    729          /**
    730            * @}
    731            */    
    732          
    733          /**
    734            * @}
    735            */ 
    736              
    737          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   SD_LowLevel_DMA_RxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      72   SD_LowLevel_DMA_TxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      16   SD_LowLevel_DeInit
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_APB2PeriphClockCmd
        16   -> SDIO_ClockCmd
        16   -> SDIO_DeInit
        16   -> SDIO_SetPowerState
      16   SD_LowLevel_Init
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB2PeriphClockCmd
      24   STM_EVAL_COMInit
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_Init
      16   STM_EVAL_LEDInit
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   STM_EVAL_LEDOff
       0   STM_EVAL_LEDOn
       0   STM_EVAL_LEDToggle
       8   STM_EVAL_PBGetState
         8   -> GPIO_ReadInputDataBit
      32   STM_EVAL_PBInit
        32   -> EXTI_Init
        32   -> GPIO_Init
        32   -> NVIC_Init
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SYSCFG_EXTILineConfig
       8   sEE_LowLevel_DMAConfig
         8   -> DMA_Init
      16   sEE_LowLevel_DeInit
        16   -> DMA_Cmd
        16   -> DMA_DeInit
        16   -> GPIO_Init
        16   -> I2C_Cmd
        16   -> I2C_DeInit
        16   -> NVIC_Init
        16   -> RCC_APB1PeriphClockCmd
      16   sEE_LowLevel_Init
        16   -> DMA_ClearFlag
        16   -> DMA_Cmd
        16   -> DMA_DeInit
        16   -> DMA_ITConfig
        16   -> DMA_Init
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> NVIC_Init
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB1PeriphClockCmd
        16   -> RCC_APB1PeriphResetCmd
        16   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_31
       4  ??DataTable13_32
       4  ??DataTable13_33
       4  ??DataTable13_34
       4  ??DataTable13_35
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      12  BUTTON_CLK
       8  BUTTON_EXTI_LINE
       8  BUTTON_IRQn
       8  BUTTON_PIN
       8  BUTTON_PIN_SOURCE
      12  BUTTON_PORT
       8  BUTTON_PORT_SOURCE
       2  COM_RX_AF
       2  COM_RX_PIN
       2  COM_RX_PIN_SOURCE
       4  COM_RX_PORT
       4  COM_RX_PORT_CLK
       2  COM_TX_AF
       2  COM_TX_PIN
       2  COM_TX_PIN_SOURCE
       4  COM_TX_PORT
       4  COM_TX_PORT_CLK
       4  COM_USART
       4  COM_USART_CLK
      16  GPIO_CLK
       8  GPIO_PIN
      16  GPIO_PORT
       4  NVIC_InitStructure
     140  SD_LowLevel_DMA_RxConfig
     150  SD_LowLevel_DMA_TxConfig
     162  SD_LowLevel_DeInit
     210  SD_LowLevel_Init
     250  STM_EVAL_COMInit
      74  STM_EVAL_LEDInit
      24  STM_EVAL_LEDOff
      24  STM_EVAL_LEDOn
      38  STM_EVAL_LEDToggle
      28  STM_EVAL_PBGetState
     200  STM_EVAL_PBInit
      60  sEEDMA_InitStructure
      54  sEE_LowLevel_DMAConfig
     150  sEE_LowLevel_DeInit
     366  sEE_LowLevel_Init

 
    64 bytes in section .bss
    40 bytes in section .data
   100 bytes in section .rodata
 2 014 bytes in section .text
 
 2 014 bytes of CODE  memory
   100 bytes of CONST memory
   104 bytes of DATA  memory

Errors: none
Warnings: none
