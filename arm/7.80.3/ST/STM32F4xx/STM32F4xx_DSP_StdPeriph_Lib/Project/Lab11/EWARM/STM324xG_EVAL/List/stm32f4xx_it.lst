###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       10/Apr/2017  20:18:42
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\stm32f4xx_it.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\stm32f4xx_it.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\List\stm32f4xx_it.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\EWARM\STM324xG_EVAL\Obj\stm32f4xx_it.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab11\stm32f4xx_it.c
      1          #include "stm32f4xx_it.h"
      2          #include "main.h"
      3          
      4          extern CanTxMsg TxMessage;
      5          extern CanRxMsg RxMessage;
      6          extern char recievedMsg[8];
      7          

   \                                 In section .bss, align 4
      8          int recieveIndex = 0, transmitIndex = 0;
   \                     recieveIndex:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     transmitIndex:
   \   00000000                      DS8 4
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void CAN1_RX0_IRQHandler(void) {
   \                     CAN1_RX0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     11            CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
   \   00000002   0x....             LDR.N    R2,??DataTable1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40006400
   \   00000008   0x.... 0x....      BL       CAN_Receive
     12            
     13            if ((RxMessage.StdId == 0x321)&&(RxMessage.IDE == CAN_ID_STD) && (RxMessage.DLC == 8)) {
   \   0000000C   0x....             LDR.N    R0,??DataTable1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF240 0x3121      MOVW     R1,#+801
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD111             BNE.N    ??CAN1_RX0_IRQHandler_0
   \   00000018   0x....             LDR.N    R0,??DataTable1
   \   0000001A   0x7A00             LDRB     R0,[R0, #+8]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD10D             BNE.N    ??CAN1_RX0_IRQHandler_0
   \   00000020   0x....             LDR.N    R0,??DataTable1
   \   00000022   0x7A80             LDRB     R0,[R0, #+10]
   \   00000024   0x2808             CMP      R0,#+8
   \   00000026   0xD109             BNE.N    ??CAN1_RX0_IRQHandler_0
     14              for(int i = 0; i < 8; i++) {
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE005             B.N      ??CAN1_RX0_IRQHandler_1
     15                recievedMsg[i] = RxMessage.Data[i];
   \                     ??CAN1_RX0_IRQHandler_2: (+1)
   \   0000002C   0x....             LDR.N    R1,??DataTable1
   \   0000002E   0x4401             ADD      R1,R1,R0
   \   00000030   0x7AC9             LDRB     R1,[R1, #+11]
   \   00000032   0x....             LDR.N    R2,??DataTable1_2
   \   00000034   0x5411             STRB     R1,[R2, R0]
     16              }
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \                     ??CAN1_RX0_IRQHandler_1: (+1)
   \   00000038   0x2808             CMP      R0,#+8
   \   0000003A   0xDBF7             BLT.N    ??CAN1_RX0_IRQHandler_2
     17            }
     18            // trigger transmit... me wants morez
     19            CAN_Transmit(CANx, &TxMessage);
   \                     ??CAN1_RX0_IRQHandler_0: (+1)
   \   0000003C   0x....             LDR.N    R1,??DataTable1_3
   \   0000003E   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40006400
   \   00000040   0x.... 0x....      BL       CAN_Transmit
     20          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void CAN1_TX_IRQHandler(void) {
   \                     CAN1_TX_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     23            //clear flag
     24            CAN_ClearFlag(CANx, CAN_FLAG_RQCP0);
   \   00000002   0x....             LDR.N    R1,??DataTable1_4  ;; 0x38000001
   \   00000004   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40006400
   \   00000006   0x.... 0x....      BL       CAN_ClearFlag
     25          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     RxMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40006400         DC32     0x40006400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     recievedMsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     TxMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x38000001         DC32     0x38000001

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CAN1_RX0_IRQHandler
         8   -> CAN_Receive
         8   -> CAN_Transmit
       8   CAN1_TX_IRQHandler
         8   -> CAN_ClearFlag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      70  CAN1_RX0_IRQHandler
      12  CAN1_TX_IRQHandler
       4  recieveIndex
       4  transmitIndex

 
   8 bytes in section .bss
 102 bytes in section .text
 
 102 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
