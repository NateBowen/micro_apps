###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       23/Jan/2017  20:15:50
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_lcd.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_lcd.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\STM324xG_EVAL\List\stm324xg_eval_lcd.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab1\EWARM\STM324xG_EVAL\Obj\stm324xg_eval_lcd.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_lcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm324xg_eval_lcd.c
      4            * @author  MCD Application Team
      5            * @version V1.1.1
      6            * @date    11-January-2013
      7            * @brief   This file includes the LCD driver for AM-240320L8TNQW00H (LCD_ILI9320)
      8            *          and AM240320D5TOQW01H (LCD_ILI9325) Liquid Crystal Display Modules
      9            *          of STM324xG-EVAL evaluation board(MB786) RevB.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */ 
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm324xg_eval_lcd.h"
     32          #include "../Common/fonts.c"

   \                                 In section .rodata, align 4
   \   __absolute uint16_t const ASCII16x24_Table[2280]
   \                     ASCII16x24_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000002C   0x0000 0x0000      DC16 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00000048   0x0180 0x0180      DC16 384, 384, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00CC 0x00CC
   \              0x00CC       
   \   0000006A   0x00CC 0x00CC      DC16 204, 204, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00CC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000092   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 3168, 3168, 3168, 1584, 1584, 8190, 8190, 1584
   \              0x0000 0x0000
   \              0x0000 0x0C60
   \              0x0C60 0x0C60
   \              0x0630 0x0630
   \              0x1FFE 0x1FFE
   \              0x0630       
   \   000000AC   0x0738 0x0318      DC16 1848, 792, 8190, 8190, 792, 792, 396, 396, 396, 0, 0, 128, 992
   \              0x1FFE 0x1FFE
   \              0x0318 0x0318
   \              0x018C 0x018C
   \              0x018C 0x0000
   \              0x0000 0x0080
   \              0x03E0       
   \   000000C6   0x0FF8 0x0E9C      DC16 4088, 3740, 7308, 6284, 140, 152, 504, 2016, 3712, 7296, 6284
   \              0x1C8C 0x188C
   \              0x008C 0x0098
   \              0x01F8 0x07E0
   \              0x0E80 0x1C80
   \              0x188C       
   \   000000DC   0x188C 0x189C      DC16 6284, 6300, 3256, 4080, 992, 128, 128, 0, 0, 0, 0, 0, 0, 6158
   \              0x0CB8 0x0FF0
   \              0x03E0 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180E
   \   000000F8   0x0C1B 0x0C11      DC16 3099, 3089, 1553, 1553, 785, 785, 411, 398, 14528, 27840, 17504
   \              0x0611 0x0611
   \              0x0311 0x0311
   \              0x019B 0x018E
   \              0x38C0 0x6CC0
   \              0x4460       
   \   0000010E   0x4460 0x4430      DC16 17504, 17456, 17456, 17432, 27672, 14348, 0, 0, 0, 0, 480, 1008
   \              0x4430 0x4418
   \              0x6C18 0x380C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x01E0 0x03F0
   \   00000126   0x0738 0x0618      DC16 1848, 1560, 1560, 816, 496, 240, 248, 12700, 13070, 7686, 7174
   \              0x0618 0x0330
   \              0x01F0 0x00F0
   \              0x00F8 0x319C
   \              0x330E 0x1E06
   \              0x1C06       
   \   0000013C   0x1C06 0x3F06      DC16 7174, 16134, 29692, 8688, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12
   \              0x73FC 0x21F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \   0000015C   0x000C 0x000C      DC16 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0200
   \   00000184   0x0300 0x0180      DC16 768, 384, 192, 192, 96, 96, 48, 48, 48, 48, 48, 48, 48, 48, 96, 96
   \              0x00C0 0x00C0
   \              0x0060 0x0060
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0060 0x0060
   \   000001A4   0x00C0 0x00C0      DC16 192, 192, 384, 768, 512, 0, 0, 32, 96, 192, 384, 384, 768, 768
   \              0x0180 0x0300
   \              0x0200 0x0000
   \              0x0000 0x0020
   \              0x0060 0x00C0
   \              0x0180 0x0180
   \              0x0300 0x0300
   \   000001C0   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 768, 768, 384, 384
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0300 0x0300
   \              0x0180 0x0180
   \   000001D8   0x00C0 0x0060      DC16 192, 96, 32, 0, 0, 0, 0, 0, 0, 0, 192, 192, 1752, 2040, 480, 816
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x06D8 0x07F8
   \              0x01E0 0x0330
   \   000001F8   0x0738 0x0000      DC16 1848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0180 0x0180
   \   00000220   0x0180 0x0180      DC16 384, 384, 384, 16380, 16380, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              0x0180 0x3FFC
   \              0x3FFC 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000023C   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180       
   \   00000266   0x0100 0x0100      DC16 256, 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2016
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07E0
   \   0000028A   0x07E0 0x0000      DC16 2016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000002B4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 3072, 3072, 1536
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0C00
   \              0x0C00 0x0600
   \   000002D8   0x0600 0x0600      DC16 1536, 1536, 768, 768, 768, 896, 384, 384, 384, 192, 192, 192, 96
   \              0x0300 0x0300
   \              0x0300 0x0380
   \              0x0180 0x0180
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0060       
   \   000002F2   0x0060 0x0000      DC16 96, 0, 0, 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 6156, 6156, 6156
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x07F0
   \              0x0E38 0x0C18
   \              0x180C 0x180C
   \              0x180C       
   \   00000310   0x180C 0x180C      DC16 6156, 6156, 6156, 6156, 6156, 6156, 3096, 3640, 2032, 992, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x180C
   \              0x0C18 0x0E38
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000       
   \   0000032A   0x0000 0x0000      DC16 0, 0, 0, 0, 256, 384, 448, 496, 408, 392, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0100 0x0180
   \              0x01C0 0x01F0
   \              0x0198 0x0188
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   00000348   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 992, 4088, 3096
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x0FF8 0x0C18
   \   00000368   0x180C 0x180C      DC16 6156, 6156, 6144, 6144, 3072, 1536, 768, 384, 192, 96, 48, 24
   \              0x1800 0x1800
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030 0x0018
   \   00000380   0x1FFC 0x1FFC      DC16 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 480, 2040, 3608, 3084, 3084, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x01E0
   \              0x07F8 0x0E18
   \              0x0C0C 0x0C0C
   \              0x0C00       
   \   0000039E   0x0600 0x03C0      DC16 1536, 960, 1984, 3072, 6144, 6144, 6156, 6156, 3096, 2040, 992, 0
   \              0x07C0 0x0C00
   \              0x1800 0x1800
   \              0x180C 0x180C
   \              0x0C18 0x07F8
   \              0x03E0 0x0000
   \   000003B6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 3072, 3584, 3840, 3840, 3456, 3264, 3168, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0C00 0x0E00
   \              0x0F00 0x0F00
   \              0x0D80 0x0CC0
   \              0x0C60 0x0C60
   \   000003D2   0x0C30 0x0C18      DC16 3120, 3096, 3084, 16380, 16380, 3072, 3072, 3072, 3072, 0, 0, 0, 0
   \              0x0C0C 0x3FFC
   \              0x3FFC 0x0C00
   \              0x0C00 0x0C00
   \              0x0C00 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000003EC   0x0000 0x0000      DC16 0, 0, 0, 4088, 4088, 24, 24, 12, 1004, 2044, 3612, 7168, 6144
   \              0x0000 0x0FF8
   \              0x0FF8 0x0018
   \              0x0018 0x000C
   \              0x03EC 0x07FC
   \              0x0E1C 0x1C00
   \              0x1800       
   \   00000406   0x1800 0x1800      DC16 6144, 6144, 6156, 3100, 3608, 2040, 992, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x180C 0x0C1C
   \              0x0E18 0x07F8
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07C0       
   \   00000424   0x0FF0 0x1C38      DC16 4080, 7224, 6168, 24, 12, 972, 4076, 3644, 7196, 6156, 6156, 6156
   \              0x1818 0x0018
   \              0x000C 0x03CC
   \              0x0FEC 0x0E3C
   \              0x1C1C 0x180C
   \              0x180C 0x180C
   \   0000043C   0x1C18 0x0E38      DC16 7192, 3640, 2032, 992, 0, 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1FFC
   \              0x1FFC 0x0C00
   \              0x0600       
   \   0000045A   0x0600 0x0300      DC16 1536, 768, 896, 384, 448, 192, 224, 96, 96, 112, 48, 48, 48, 0, 0
   \              0x0380 0x0180
   \              0x01C0 0x00C0
   \              0x00E0 0x0060
   \              0x0060 0x0070
   \              0x0030 0x0030
   \              0x0030 0x0000
   \              0x0000       
   \   00000478   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 3096, 3096, 1592, 2032, 2032
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x07F0 0x0E38
   \              0x0C18 0x0C18
   \              0x0C18 0x0638
   \              0x07F0 0x07F0
   \   00000494   0x0C18 0x180C      DC16 3096, 6156, 6156, 6156, 6156, 3128, 4088, 992, 0, 0, 0, 0, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x0C38
   \              0x0FF8 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004B2   0x03E0 0x07F0      DC16 992, 2032, 3640, 3100, 6156, 6156, 6156, 7196, 7736, 7160, 6624
   \              0x0E38 0x0C1C
   \              0x180C 0x180C
   \              0x180C 0x1C1C
   \              0x1E38 0x1BF8
   \              0x19E0       
   \   000004C8   0x1800 0x0C00      DC16 6144, 3072, 3072, 3612, 2040, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0C00 0x0E1C
   \              0x07F8 0x01F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004EA   0x0000 0x0180      DC16 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000512   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 256
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0100
   \   00000536   0x0100 0x0080      DC16 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 7168, 3968, 992
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x1C00 0x0F80
   \              0x03E0       
   \   00000558   0x00F8 0x0018      DC16 248, 24, 248, 992, 3968, 7168, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00F8 0x03E0
   \              0x0F80 0x1C00
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   0000057A   0x0000 0x0000      DC16 0, 0, 0, 8184, 0, 0, 0, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000005A2   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 8, 56, 496, 1984, 7936, 6144, 7936, 1984, 496
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0038 0x01F0
   \              0x07C0 0x1F00
   \              0x1800 0x1F00
   \              0x07C0 0x01F0
   \   000005C2   0x0038 0x0008      DC16 56, 8, 0, 0, 0, 0, 0, 0, 992, 4088, 3096, 6156, 6156, 6144, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x0FF8
   \              0x0C18 0x180C
   \              0x180C 0x1800
   \              0x0C00       
   \   000005E0   0x0600 0x0300      DC16 1536, 768, 384, 192, 192, 192, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000602   0x0000 0x07E0      DC16 0, 2016, 6168, 8196, 10690, 18978, 17425, 17417, 17417, 17417
   \              0x1818 0x2004
   \              0x29C2 0x4A22
   \              0x4411 0x4409
   \              0x4409 0x4409
   \   00000616   0x2209 0x1311      DC16 8713, 4881, 3298, 16386, 8196, 6168, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x0CE2 0x4002
   \              0x2004 0x1818
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000632   0x0380 0x0380      DC16 896, 896, 1728, 1728, 1728, 3168, 3168, 6192, 6192, 6192, 16376
   \              0x06C0 0x06C0
   \              0x06C0 0x0C60
   \              0x0C60 0x1830
   \              0x1830 0x1830
   \              0x3FF8       
   \   00000648   0x3FF8 0x701C      DC16 16376, 28700, 24588, 24588, 49158, 49158, 0, 0, 0, 0, 0, 0, 0
   \              0x600C 0x600C
   \              0xC006 0xC006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000662   0x03FC 0x0FFC      DC16 1020, 4092, 3084, 6156, 6156, 6156, 3084, 2044, 4092, 6156, 12300
   \              0x0C0C 0x180C
   \              0x180C 0x180C
   \              0x0C0C 0x07FC
   \              0x0FFC 0x180C
   \              0x300C       
   \   00000678   0x300C 0x300C      DC16 12300, 12300, 12300, 6156, 8188, 2044, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07C0
   \   00000694   0x1FF0 0x3838      DC16 8176, 14392, 12316, 28684, 24582, 6, 6, 6, 6, 6, 6, 24582, 28684
   \              0x301C 0x700C
   \              0x6006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x6006
   \              0x700C       
   \   000006AE   0x301C 0x1FF0      DC16 12316, 8176, 2016, 0, 0, 0, 0, 0, 0, 0, 1022, 4094, 3590, 6150
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03FE 0x0FFE
   \              0x0E06 0x1806
   \   000006CA   0x1806 0x3006      DC16 6150, 12294, 12294, 12294, 12294, 12294, 12294, 12294, 6150, 6150
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x1806 0x1806
   \   000006DE   0x0E06 0x0FFE      DC16 3590, 4094, 1022, 0, 0, 0, 0, 0, 0, 0, 16380, 16380, 12, 12, 12
   \              0x03FE 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3FFC 0x3FFC
   \              0x000C 0x000C
   \              0x000C       
   \   000006FC   0x000C 0x000C      DC16 12, 12, 8188, 8188, 12, 12, 12, 12, 12, 12, 16380, 16380, 0, 0, 0
   \              0x1FFC 0x1FFC
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x3FFC 0x3FFC
   \              0x0000 0x0000
   \              0x0000       
   \   0000071A   0x0000 0x0000      DC16 0, 0, 0, 0, 16376, 16376, 24, 24, 24, 24, 24, 8184, 8184, 24, 24
   \              0x0000 0x0000
   \              0x3FF8 0x3FF8
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x1FF8
   \              0x1FF8 0x0018
   \              0x0018       
   \   00000738   0x0018 0x0018      DC16 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 4064, 16376, 30780
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0FE0
   \              0x3FF8 0x783C
   \   00000758   0x600E 0xE006      DC16 24590, 57350, 49159, 3, 3, 65027, 65027, 49155, 49159, 49158
   \              0xC007 0x0003
   \              0x0003 0xFE03
   \              0xFE03 0xC003
   \              0xC007 0xC006
   \   0000076C   0xC00E 0xF03C      DC16 49166, 61500, 16376, 4064, 0, 0, 0, 0, 0, 0, 0, 12300, 12300
   \              0x3FF8 0x0FE0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C       
   \   00000786   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 16380, 16380, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x3FFC
   \              0x3FFC 0x300C
   \              0x300C       
   \   00000798   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 0, 0, 0, 0, 0, 0, 0, 384
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \   000007B4   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000007CE   0x0180 0x0180      DC16 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 1536, 1536, 1536, 1536, 1536
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600       
   \   000007EC   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1560, 1560, 1848, 1008
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0618
   \              0x0618 0x0738
   \              0x03F0       
   \   00000802   0x01E0 0x0000      DC16 480, 0, 0, 0, 0, 0, 0, 0, 12294, 6150, 3078, 1542, 774, 390, 198
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3006 0x1806
   \              0x0C06 0x0606
   \              0x0306 0x0186
   \              0x00C6       
   \   00000820   0x0066 0x0076      DC16 102, 118, 222, 398, 774, 1542, 3078, 6150, 12294, 24582, 0, 0, 0
   \              0x00DE 0x018E
   \              0x0306 0x0606
   \              0x0C06 0x1806
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000       
   \   0000083A   0x0000 0x0000      DC16 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \   0000085E   0x0018 0x1FF8      DC16 24, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 57358, 61470, 61470, 61470
   \              0x1FF8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xE00E 0xF01E
   \              0xF01E 0xF01E
   \   0000087A   0xD836 0xD836      DC16 55350, 55350, 55350, 55350, 52326, 52326, 52326, 50886, 50886
   \              0xD836 0xD836
   \              0xCC66 0xCC66
   \              0xCC66 0xC6C6
   \              0xC6C6       
   \   0000088C   0xC6C6 0xC6C6      DC16 50886, 50886, 50054, 50054, 0, 0, 0, 0, 0, 0, 0, 12300, 12316
   \              0xC386 0xC386
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x301C       
   \   000008A6   0x303C 0x303C      DC16 12348, 12348, 12396, 12396, 12492, 12492, 12684, 13068, 13068
   \              0x306C 0x306C
   \              0x30CC 0x30CC
   \              0x318C 0x330C
   \              0x330C       
   \   000008B8   0x360C 0x360C      DC16 13836, 13836, 15372, 15372, 14348, 12300, 0, 0, 0, 0, 0, 0, 0
   \              0x3C0C 0x3C0C
   \              0x380C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000008D2   0x07E0 0x1FF8      DC16 2016, 8184, 14364, 28686, 24582, 49155, 49155, 49155, 49155, 49155
   \              0x381C 0x700E
   \              0x6006 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \   000008E6   0xC003 0xC003      DC16 49155, 49155, 24582, 28686, 14364, 8184, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x6006 0x700E
   \              0x381C 0x1FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000902   0x0FFC 0x1FFC      DC16 4092, 8188, 14348, 12300, 12300, 12300, 12300, 6156, 8188, 2044
   \              0x380C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \   00000916   0x000C 0x000C      DC16 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 2016, 8184, 14364
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07E0 0x1FF8
   \              0x381C       
   \   00000938   0x700E 0x6006      DC16 28686, 24582, 57347, 49155, 49155, 49155, 49155, 49155, 57351
   \              0xE003 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \              0xE007       
   \   0000094A   0x6306 0x3F0E      DC16 25350, 16142, 15388, 16376, 63456, 49152, 0, 0, 0, 0, 0, 0, 4094
   \              0x3C1C 0x3FF8
   \              0xF7E0 0xC000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0FFE       
   \   00000964   0x1FFE 0x3806      DC16 8190, 14342, 12294, 12294, 12294, 14342, 8190, 2046, 774, 1542
   \              0x3006 0x3006
   \              0x3006 0x3806
   \              0x1FFE 0x07FE
   \              0x0306 0x0606
   \   00000978   0x0C06 0x1806      DC16 3078, 6150, 6150, 12294, 12294, 24582, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x1806 0x3006
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000994   0x0FF8 0x0C1C      DC16 4088, 3100, 6156, 6156, 12, 28, 1016, 4064, 7680, 14336, 12294
   \              0x180C 0x180C
   \              0x000C 0x001C
   \              0x03F8 0x0FE0
   \              0x1E00 0x3800
   \              0x3006       
   \   000009AA   0x3006 0x300E      DC16 12294, 12302, 7196, 4088, 2016, 0, 0, 0, 0, 0, 0, 0, 32766, 32766
   \              0x1C1C 0x0FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7FFE 0x7FFE
   \   000009C6   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000009E0   0x0180 0x0180      DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 12300, 12300, 12300, 12300, 12300
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \   000009FC   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C       
   \   00000A0E   0x1818 0x1FF8      DC16 6168, 8184, 2016, 0, 0, 0, 0, 0, 0, 0, 24579, 12294, 12294, 12294
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x6003 0x3006
   \              0x3006 0x3006
   \   00000A2A   0x180C 0x180C      DC16 6156, 6156, 6156, 3096, 3096, 3640, 1584, 1584, 1904, 864, 864
   \              0x180C 0x0C18
   \              0x0C18 0x0E38
   \              0x0630 0x0630
   \              0x0770 0x0360
   \              0x0360       
   \   00000A40   0x01C0 0x01C0      DC16 448, 448, 0, 0, 0, 0, 0, 0, 0, 24579, 25027, 25027, 25027, 13158
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x6003
   \              0x61C3 0x61C3
   \              0x61C3 0x3366
   \   00000A5C   0x3366 0x3366      DC16 13158, 13158, 13158, 13158, 13158, 7020, 7020, 7020, 6700, 7740
   \              0x3366 0x3366
   \              0x3366 0x1B6C
   \              0x1B6C 0x1B6C
   \              0x1A2C 0x1E3C
   \   00000A70   0x0E38 0x0E38      DC16 3640, 3640, 0, 0, 0, 0, 0, 0, 0, 57359, 28684, 12312, 6192, 3184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xE00F
   \              0x700C 0x3018
   \              0x1830 0x0C70
   \   00000A8C   0x0E60 0x07C0      DC16 3680, 1984, 896, 896, 960, 1760, 3184, 7216, 6168, 12300, 24590
   \              0x0380 0x0380
   \              0x03C0 0x06E0
   \              0x0C70 0x1C30
   \              0x1818 0x300C
   \              0x600E       
   \   00000AA2   0xE007 0x0000      DC16 57351, 0, 0, 0, 0, 0, 0, 0, 49155, 24582, 12300, 14364, 6200, 3120
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xC003 0x6006
   \              0x300C 0x381C
   \              0x1838 0x0C30
   \   00000ABE   0x0660 0x07E0      DC16 1632, 2016, 960, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0, 0
   \              0x03C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \   00000ADA   0x0000 0x0000      DC16 0, 0, 0, 0, 32764, 32764, 24576, 12288, 6144, 3072, 1536, 768, 384
   \              0x0000 0x0000
   \              0x7FFC 0x7FFC
   \              0x6000 0x3000
   \              0x1800 0x0C00
   \              0x0600 0x0300
   \              0x0180       
   \   00000AF4   0x00C0 0x0060      DC16 192, 96, 48, 24, 12, 6, 32766, 32766, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0030 0x0018
   \              0x000C 0x0006
   \              0x7FFE 0x7FFE
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B14   0x03E0 0x0060      DC16 992, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \   00000B34   0x0060 0x0060      DC16 96, 96, 96, 992, 992, 0, 0, 48, 48, 96, 96, 96, 192, 192, 192, 448
   \              0x0060 0x03E0
   \              0x03E0 0x0000
   \              0x0000 0x0030
   \              0x0030 0x0060
   \              0x0060 0x0060
   \              0x00C0 0x00C0
   \              0x00C0 0x01C0
   \   00000B54   0x0180 0x0180      DC16 384, 384, 384, 768, 768, 768, 1536, 1536, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0180 0x0300
   \              0x0300 0x0300
   \              0x0600 0x0600
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B74   0x03E0 0x0300      DC16 992, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300       
   \   00000B8E   0x0300 0x0300      DC16 768, 768, 768, 768, 768, 768, 992, 992, 0, 0, 0, 448, 448, 864
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x03E0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x01C0
   \              0x01C0 0x0360
   \   00000BAA   0x0360 0x0360      DC16 864, 864, 1584, 1584, 3096, 3096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0630
   \              0x0C18 0x0C18
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000BCC   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xFFFF
   \   00000BF4   0xFFFF 0x0000      DC16 65535, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000C1A   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1008, 2040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03F0
   \              0x07F8       
   \   00000C40   0x0C1C 0x0C0C      DC16 3100, 3084, 3840, 4080, 3320, 3084, 3084, 3868, 4088, 6384, 0, 0
   \              0x0F00 0x0FF0
   \              0x0CF8 0x0C0C
   \              0x0C0C 0x0F1C
   \              0x0FF8 0x18F0
   \              0x0000 0x0000
   \   00000C58   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 984, 4088, 3128, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x03D8 0x0FF8
   \              0x0C38 0x1818
   \              0x1818       
   \   00000C76   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 3128, 4088, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x0C38 0x0FF8
   \              0x03D8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000C96   0x0000 0x0000      DC16 0, 0, 0, 960, 2032, 3632, 3096, 24, 24, 24, 24, 3096, 3632, 2032
   \              0x0000 0x03C0
   \              0x07F0 0x0E30
   \              0x0C18 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0C18
   \              0x0E30 0x07F0
   \   00000CB2   0x03C0 0x0000      DC16 960, 0, 0, 0, 0, 0, 0, 0, 6144, 6144, 6144, 6144, 6144, 7104, 8176
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1800 0x1800
   \              0x1800 0x1800
   \              0x1800 0x1BC0
   \              0x1FF0       
   \   00000CD0   0x1C30 0x1818      DC16 7216, 6168, 6168, 6168, 6168, 6168, 6168, 7216, 8176, 7104, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C30
   \              0x1FF0 0x1BC0
   \              0x0000 0x0000
   \   00000CE8   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 4080, 3120, 6168, 8184, 8184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1FF8 0x1FF8
   \   00000D08   0x0018 0x0018      DC16 24, 24, 6200, 7216, 4080, 1984, 0, 0, 0, 0, 0, 0, 0, 3968, 4032
   \              0x1838 0x1C30
   \              0x0FF0 0x07C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0F80
   \              0x0FC0       
   \   00000D26   0x00C0 0x00C0      DC16 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000D40   0x00C0 0x00C0      DC16 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3552, 4088, 3608
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0DE0 0x0FF8
   \              0x0E18       
   \   00000D62   0x0C0C 0x0C0C      DC16 3084, 3084, 3084, 3084, 3084, 3084, 3608, 4088, 3552, 3072, 3084
   \              0x0C0C 0x0C0C
   \              0x0C0C 0x0C0C
   \              0x0E18 0x0FF8
   \              0x0DE0 0x0C00
   \              0x0C0C       
   \   00000D78   0x061C 0x07F8      DC16 1564, 2040, 496, 0, 0, 24, 24, 24, 24, 24, 2008, 4088, 7224, 6168
   \              0x01F0 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x07D8 0x0FF8
   \              0x1C38 0x1818
   \   00000D94   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000DB0   0x0000 0x00C0      DC16 0, 192, 192, 0, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000DCE   0x00C0 0x00C0      DC16 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0       
   \   00000DF0   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E0A   0x00F8 0x0078      DC16 248, 120, 0, 0, 12, 12, 12, 12, 12, 3084, 1548, 780, 396, 204, 108
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0C0C
   \              0x060C 0x030C
   \              0x018C 0x00CC
   \              0x006C       
   \   00000E28   0x00FC 0x019C      DC16 252, 412, 908, 780, 1548, 3084, 0, 0, 0, 0, 0, 0, 0, 192, 192, 192
   \              0x038C 0x030C
   \              0x060C 0x0C0C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x00C0
   \   00000E48   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E62   0x00C0 0x0000      DC16 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15484, 32511, 58311
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3C7C
   \              0x7EFF 0xE3C7
   \   00000E82   0xC183 0xC183      DC16 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 0
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0x0000
   \   00000E96   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1944, 4088, 7224, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0798
   \              0x0FF8 0x1C38
   \              0x1818 0x1818
   \   00000EB6   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000ED4   0x0000 0x0000      DC16 0, 0, 0, 0, 960, 4080, 3120, 6168, 6168, 6168, 6168, 6168, 6168
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000EEE   0x0C30 0x0FF0      DC16 3120, 4080, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 984, 4088
   \              0x03C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03D8
   \              0x0FF8       
   \   00000F10   0x0C38 0x1818      DC16 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128, 4088, 984, 24, 24
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0C38
   \              0x0FF8 0x03D8
   \              0x0018 0x0018
   \   00000F28   0x0018 0x0018      DC16 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 7104, 8176, 7216, 6168, 6168
   \              0x0018 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1BC0 0x1FF0
   \              0x1C30 0x1818
   \              0x1818       
   \   00000F46   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 7216, 8176, 7104, 6144, 6144, 6144, 6144
   \              0x1818 0x1818
   \              0x1C30 0x1FF0
   \              0x1BC0 0x1800
   \              0x1800 0x1800
   \              0x1800       
   \   00000F5C   0x1800 0x0000      DC16 6144, 0, 0, 0, 0, 0, 0, 0, 1968, 1008, 112, 48, 48, 48, 48, 48, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07B0 0x03F0
   \              0x0070 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030       
   \   00000F7E   0x0030 0x0030      DC16 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 1008, 3640
   \              0x0030 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x03F0 0x0E38
   \   00000FA2   0x0C18 0x0038      DC16 3096, 56, 1008, 1984, 3072, 3096, 3640, 2032, 992, 0, 0, 0, 0, 0
   \              0x03F0 0x07C0
   \              0x0C00 0x0C18
   \              0x0E38 0x07F0
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000FBE   0x0000 0x0000      DC16 0, 0, 0, 128, 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192
   \              0x0000 0x0080
   \              0x00C0 0x00C0
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000FDA   0x00C0 0x00C0      DC16 192, 192, 192, 1984, 1920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00C0 0x07C0
   \              0x0780 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000FFC   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 7224, 8176
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C38
   \              0x1FF0       
   \   00001012   0x19E0 0x0000      DC16 6624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6156, 3096, 3096, 3096
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180C
   \              0x0C18 0x0C18
   \              0x0C18       
   \   00001034   0x0630 0x0630      DC16 1584, 1584, 1584, 864, 864, 864, 448, 448, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0360
   \              0x0360 0x0360
   \              0x01C0 0x01C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00001054   0x0000 0x0000      DC16 0, 0, 0, 0, 16833, 16833, 25027, 25443, 25443, 25443, 13878, 13878
   \              0x0000 0x0000
   \              0x41C1 0x41C1
   \              0x61C3 0x6363
   \              0x6363 0x6363
   \              0x3636 0x3636
   \   0000106C   0x3636 0x1C1C      DC16 13878, 7196, 7196, 7196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14364
   \              0x1C1C 0x1C1C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x381C       
   \   0000108E   0x1C38 0x0C30      DC16 7224, 3120, 1632, 864, 864, 864, 864, 1632, 3120, 7224, 14364, 0
   \              0x0660 0x0360
   \              0x0360 0x0360
   \              0x0360 0x0660
   \              0x0C30 0x1C38
   \              0x381C 0x0000
   \   000010A6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12312, 6192, 6192, 6256, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3018
   \              0x1830 0x1830
   \              0x1870 0x0C60
   \   000010C6   0x0C60 0x0CE0      DC16 3168, 3296, 1728, 1728, 896, 896, 896, 384, 384, 448, 240, 112, 0
   \              0x06C0 0x06C0
   \              0x0380 0x0380
   \              0x0380 0x0180
   \              0x0180 0x01C0
   \              0x00F0 0x0070
   \              0x0000       
   \   000010E0   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536, 768, 384, 192, 96, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1FFC 0x1FFC
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030       
   \   000010FE   0x0018 0x1FFC      DC16 24, 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 768, 384, 192, 192, 192, 192
   \              0x1FFC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0300 0x0180
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   0000111E   0x00C0 0x00C0      DC16 192, 192, 96, 96, 48, 96, 64, 192, 192, 192, 192, 192, 192, 384
   \              0x0060 0x0060
   \              0x0030 0x0060
   \              0x0040 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x0180
   \   0000113A   0x0300 0x0000      DC16 768, 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00001156   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \   00001172   0x0060 0x00C0      DC16 96, 192, 448, 384, 384, 384, 384, 384, 768, 768, 1536, 768, 256
   \              0x01C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0300 0x0300
   \              0x0600 0x0300
   \              0x0100       
   \   0000118C   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 192, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x00C0 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000011AE   0x0000 0x10F0      DC16 0, 4336, 8184, 3848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1FF8 0x0F08
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       

   \                                 In section .rodata, align 4
   \   __absolute uint16_t const ASCII12x12_Table[1152]
   \                     ASCII12x12_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 8192, 8192, 8192
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x2000
   \              0x2000 0x2000
   \              0x2000       
   \   00000022   0x2000 0x2000      DC16 8192, 8192, 8192, 0, 8192, 0, 0, 0, 20480, 20480, 20480, 0, 0, 0
   \              0x2000 0x0000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \              0x5000 0x5000
   \              0x5000 0x0000
   \              0x0000 0x0000
   \   0000003E   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 2304, 2304, 4608, 32512, 4608, 32512, 4608, 9216
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0900 0x0900
   \              0x1200 0x7F00
   \              0x1200 0x7F00
   \              0x1200 0x2400
   \   0000005A   0x2400 0x0000      DC16 9216, 0, 0, 4096, 14336, 21504, 20480, 20480, 14336, 5120, 21504
   \              0x0000 0x1000
   \              0x3800 0x5400
   \              0x5000 0x5000
   \              0x3800 0x1400
   \              0x5400       
   \   00000070   0x5400 0x3800      DC16 21504, 14336, 4096, 0, 0, 12416, 18688, 18688, 18944, 12992, 1312
   \              0x1000 0x0000
   \              0x0000 0x3080
   \              0x4900 0x4900
   \              0x4A00 0x32C0
   \              0x0520       
   \   00000086   0x0920 0x0920      DC16 2336, 2336, 4288, 0, 0, 0, 3072, 4608, 4608, 5120, 6144, 9472
   \              0x10C0 0x0000
   \              0x0000 0x0000
   \              0x0C00 0x1200
   \              0x1200 0x1400
   \              0x1800 0x2500
   \   0000009E   0x2300 0x2300      DC16 8960, 8960, 7552, 0, 0, 0, 16384, 16384, 16384, 0, 0, 0, 0, 0, 0
   \              0x1D80 0x0000
   \              0x0000 0x0000
   \              0x4000 0x4000
   \              0x4000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000000BC   0x0000 0x0000      DC16 0, 0, 0, 2048, 4096, 4096, 8192, 8192, 8192, 8192, 8192, 8192
   \              0x0000 0x0800
   \              0x1000 0x1000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \   000000D4   0x1000 0x1000      DC16 4096, 4096, 0, 16384, 8192, 8192, 4096, 4096, 4096, 4096, 4096
   \              0x0000 0x4000
   \              0x2000 0x2000
   \              0x1000 0x1000
   \              0x1000 0x1000
   \              0x1000       
   \   000000EA   0x1000 0x2000      DC16 4096, 8192, 8192, 0, 8192, 28672, 8192, 20480, 0, 0, 0, 0, 0, 0, 0
   \              0x2000 0x0000
   \              0x2000 0x7000
   \              0x2000 0x5000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000108   0x0000 0x0000      DC16 0, 0, 0, 2048, 2048, 32512, 2048, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0800
   \              0x0800 0x7F00
   \              0x0800 0x0800
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   0000012A   0x0000 0x0000      DC16 0, 0, 0, 0, 8192, 8192, 16384, 0, 0, 0, 0, 0, 0, 28672, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x2000 0x2000
   \              0x4000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x7000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000014E   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 4096, 4096, 4096
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \              0x1000 0x1000
   \              0x1000       
   \   00000170   0x2000 0x2000      DC16 8192, 8192, 8192, 8192, 16384, 16384, 0, 0, 0, 4096, 10240, 17408
   \              0x2000 0x2000
   \              0x4000 0x4000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x2800 0x4400
   \   00000188   0x4400 0x4400      DC16 17408, 17408, 17408, 17408, 10240, 4096, 0, 0, 0, 4096, 12288
   \              0x4400 0x4400
   \              0x2800 0x1000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x3000       
   \   0000019E   0x5000 0x1000      DC16 20480, 4096, 4096, 4096, 4096, 4096, 4096, 0, 0, 0, 12288, 18432
   \              0x1000 0x1000
   \              0x1000 0x1000
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x3000 0x4800
   \   000001B6   0x4400 0x0400      DC16 17408, 1024, 2048, 4096, 8192, 16384, 31744, 0, 0, 0, 12288, 18432
   \              0x0800 0x1000
   \              0x2000 0x4000
   \              0x7C00 0x0000
   \              0x0000 0x0000
   \              0x3000 0x4800
   \   000001CE   0x0400 0x0800      DC16 1024, 2048, 4096, 2048, 17408, 18432, 12288, 0, 0, 0, 2048, 6144
   \              0x1000 0x0800
   \              0x4400 0x4800
   \              0x3000 0x0000
   \              0x0000 0x0000
   \              0x0800 0x1800
   \   000001E6   0x1800 0x2800      DC16 6144, 10240, 10240, 18432, 31744, 2048, 2048, 0, 0, 0, 15360, 8192
   \              0x2800 0x4800
   \              0x7C00 0x0800
   \              0x0800 0x0000
   \              0x0000 0x0000
   \              0x3C00 0x2000
   \   000001FE   0x4000 0x7000      DC16 16384, 28672, 18432, 1024, 17408, 18432, 12288, 0, 0, 0, 6144
   \              0x4800 0x0400
   \              0x4400 0x4800
   \              0x3000 0x0000
   \              0x0000 0x0000
   \              0x1800       
   \   00000214   0x2400 0x4000      DC16 9216, 16384, 20480, 26624, 17408, 17408, 10240, 4096, 0, 0, 0
   \              0x5000 0x6800
   \              0x4400 0x4400
   \              0x2800 0x1000
   \              0x0000 0x0000
   \              0x0000       
   \   0000022A   0x7C00 0x0400      DC16 31744, 1024, 2048, 4096, 4096, 4096, 8192, 8192, 8192, 0, 0, 0
   \              0x0800 0x1000
   \              0x1000 0x1000
   \              0x2000 0x2000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \   00000242   0x1000 0x2800      DC16 4096, 10240, 17408, 10240, 4096, 10240, 17408, 10240, 4096, 0, 0
   \              0x4400 0x2800
   \              0x1000 0x2800
   \              0x4400 0x2800
   \              0x1000 0x0000
   \              0x0000       
   \   00000258   0x0000 0x1000      DC16 0, 4096, 10240, 17408, 17408, 11264, 5120, 1024, 18432, 12288, 0
   \              0x2800 0x4400
   \              0x4400 0x2C00
   \              0x1400 0x0400
   \              0x4800 0x3000
   \              0x0000       
   \   0000026E   0x0000 0x0000      DC16 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 8192, 0, 0
   \              0x0000 0x0000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x2000 0x0000
   \              0x0000       
   \   00000294   0x0000 0x0000      DC16 0, 0, 0, 8192, 8192, 16384, 0, 0, 1024, 2048, 12288, 16384, 12288
   \              0x0000 0x2000
   \              0x2000 0x4000
   \              0x0000 0x0000
   \              0x0400 0x0800
   \              0x3000 0x4000
   \              0x3000       
   \   000002AE   0x0800 0x0400      DC16 2048, 1024, 0, 0, 0, 0, 0, 0, 31744, 0, 0, 31744, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7C00 0x0000
   \              0x0000 0x7C00
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000002D2   0x0000 0x4000      DC16 0, 16384, 8192, 6144, 1024, 6144, 8192, 16384, 0, 0, 0, 0, 14336
   \              0x2000 0x1800
   \              0x0400 0x1800
   \              0x2000 0x4000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3800       
   \   000002EC   0x6400 0x4400      DC16 25600, 17408, 1024, 2048, 4096, 4096, 0, 4096, 0, 0, 0, 3968, 4160
   \              0x0400 0x0800
   \              0x1000 0x1000
   \              0x0000 0x1000
   \              0x0000 0x0000
   \              0x0000 0x0F80
   \              0x1040       
   \   00000306   0x2EA0 0x51A0      DC16 11936, 20896, 20768, 20768, 20768, 21280, 19904, 8224, 4160, 0
   \              0x5120 0x5120
   \              0x5120 0x5320
   \              0x4DC0 0x2020
   \              0x1040 0x0000
   \   0000031A   0x0800 0x1400      DC16 2048, 5120, 5120, 5120, 8704, 15872, 8704, 16640, 16640, 0, 0, 0
   \              0x1400 0x1400
   \              0x2200 0x3E00
   \              0x2200 0x4100
   \              0x4100 0x0000
   \              0x0000 0x0000
   \   00000332   0x3C00 0x2200      DC16 15360, 8704, 8704, 8704, 15360, 8704, 8704, 8704, 15360, 0, 0, 0
   \              0x2200 0x2200
   \              0x3C00 0x2200
   \              0x2200 0x2200
   \              0x3C00 0x0000
   \              0x0000 0x0000
   \   0000034A   0x0E00 0x1100      DC16 3584, 4352, 8448, 8192, 8192, 8192, 8448, 4352, 3584, 0, 0, 0
   \              0x2100 0x2000
   \              0x2000 0x2000
   \              0x2100 0x1100
   \              0x0E00 0x0000
   \              0x0000 0x0000
   \   00000362   0x3C00 0x2200      DC16 15360, 8704, 8448, 8448, 8448, 8448, 8448, 8704, 15360, 0, 0, 0
   \              0x2100 0x2100
   \              0x2100 0x2100
   \              0x2100 0x2200
   \              0x3C00 0x0000
   \              0x0000 0x0000
   \   0000037A   0x3E00 0x2000      DC16 15872, 8192, 8192, 8192, 15872, 8192, 8192, 8192, 15872, 0, 0, 0
   \              0x2000 0x2000
   \              0x3E00 0x2000
   \              0x2000 0x2000
   \              0x3E00 0x0000
   \              0x0000 0x0000
   \   00000392   0x3E00 0x2000      DC16 15872, 8192, 8192, 8192, 15360, 8192, 8192, 8192, 8192, 0, 0, 0
   \              0x2000 0x2000
   \              0x3C00 0x2000
   \              0x2000 0x2000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \   000003AA   0x0E00 0x1100      DC16 3584, 4352, 8448, 8192, 9984, 8448, 8448, 4352, 3584, 0, 0, 0
   \              0x2100 0x2000
   \              0x2700 0x2100
   \              0x2100 0x1100
   \              0x0E00 0x0000
   \              0x0000 0x0000
   \   000003C2   0x2100 0x2100      DC16 8448, 8448, 8448, 8448, 16128, 8448, 8448, 8448, 8448, 0, 0, 0
   \              0x2100 0x2100
   \              0x3F00 0x2100
   \              0x2100 0x2100
   \              0x2100 0x0000
   \              0x0000 0x0000
   \   000003DA   0x2000 0x2000      DC16 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 0, 0, 0
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \   000003F2   0x0800 0x0800      DC16 2048, 2048, 2048, 2048, 2048, 2048, 18432, 18432, 12288, 0, 0, 0
   \              0x0800 0x0800
   \              0x0800 0x0800
   \              0x4800 0x4800
   \              0x3000 0x0000
   \              0x0000 0x0000
   \   0000040A   0x2200 0x2400      DC16 8704, 9216, 10240, 10240, 14336, 10240, 9216, 9216, 8704, 0, 0, 0
   \              0x2800 0x2800
   \              0x3800 0x2800
   \              0x2400 0x2400
   \              0x2200 0x0000
   \              0x0000 0x0000
   \   00000422   0x2000 0x2000      DC16 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 15872, 0, 0, 0
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x3E00 0x0000
   \              0x0000 0x0000
   \   0000043A   0x2080 0x3180      DC16 8320, 12672, 12672, 12672, 10880, 10880, 10880, 10880, 9344, 0, 0
   \              0x3180 0x3180
   \              0x2A80 0x2A80
   \              0x2A80 0x2A80
   \              0x2480 0x0000
   \              0x0000       
   \   00000450   0x0000 0x2100      DC16 0, 8448, 12544, 12544, 10496, 10496, 9472, 8960, 8960, 8448, 0, 0
   \              0x3100 0x3100
   \              0x2900 0x2900
   \              0x2500 0x2300
   \              0x2300 0x2100
   \              0x0000 0x0000
   \   00000468   0x0000 0x0C00      DC16 0, 3072, 4608, 8448, 8448, 8448, 8448, 8448, 4608, 3072, 0, 0, 0
   \              0x1200 0x2100
   \              0x2100 0x2100
   \              0x2100 0x2100
   \              0x1200 0x0C00
   \              0x0000 0x0000
   \              0x0000       
   \   00000482   0x3C00 0x2200      DC16 15360, 8704, 8704, 8704, 15360, 8192, 8192, 8192, 8192, 0, 0, 0
   \              0x2200 0x2200
   \              0x3C00 0x2000
   \              0x2000 0x2000
   \              0x2000 0x0000
   \              0x0000 0x0000
   \   0000049A   0x0C00 0x1200      DC16 3072, 4608, 8448, 8448, 8448, 8448, 8448, 5632, 3328, 256, 0, 0
   \              0x2100 0x2100
   \              0x2100 0x2100
   \              0x2100 0x1600
   \              0x0D00 0x0100
   \              0x0000 0x0000
   \   000004B2   0x3E00 0x2100      DC16 15872, 8448, 8448, 8448, 15872, 9216, 8704, 8448, 8320, 0, 0, 0
   \              0x2100 0x2100
   \              0x3E00 0x2400
   \              0x2200 0x2100
   \              0x2080 0x0000
   \              0x0000 0x0000
   \   000004CA   0x1C00 0x2200      DC16 7168, 8704, 8704, 8192, 7168, 512, 8704, 8704, 7168, 0, 0, 0
   \              0x2200 0x2000
   \              0x1C00 0x0200
   \              0x2200 0x2200
   \              0x1C00 0x0000
   \              0x0000 0x0000
   \   000004E2   0x3E00 0x0800      DC16 15872, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 0, 0, 0
   \              0x0800 0x0800
   \              0x0800 0x0800
   \              0x0800 0x0800
   \              0x0800 0x0000
   \              0x0000 0x0000
   \   000004FA   0x2100 0x2100      DC16 8448, 8448, 8448, 8448, 8448, 8448, 8448, 4608, 3072, 0, 0, 0
   \              0x2100 0x2100
   \              0x2100 0x2100
   \              0x2100 0x1200
   \              0x0C00 0x0000
   \              0x0000 0x0000
   \   00000512   0x4100 0x4100      DC16 16640, 16640, 8704, 8704, 8704, 5120, 5120, 5120, 2048, 0, 0, 0
   \              0x2200 0x2200
   \              0x2200 0x1400
   \              0x1400 0x1400
   \              0x0800 0x0000
   \              0x0000 0x0000
   \   0000052A   0x4440 0x4A40      DC16 17472, 19008, 10816, 10880, 10880, 10880, 10880, 10880, 4352, 0, 0
   \              0x2A40 0x2A80
   \              0x2A80 0x2A80
   \              0x2A80 0x2A80
   \              0x1100 0x0000
   \              0x0000       
   \   00000540   0x0000 0x4100      DC16 0, 16640, 8704, 5120, 5120, 2048, 5120, 5120, 8704, 16640, 0, 0, 0
   \              0x2200 0x1400
   \              0x1400 0x0800
   \              0x1400 0x1400
   \              0x2200 0x4100
   \              0x0000 0x0000
   \              0x0000       
   \   0000055A   0x4100 0x2200      DC16 16640, 8704, 8704, 5120, 2048, 2048, 2048, 2048, 2048, 0, 0, 0
   \              0x2200 0x1400
   \              0x0800 0x0800
   \              0x0800 0x0800
   \              0x0800 0x0000
   \              0x0000 0x0000
   \   00000572   0x7E00 0x0200      DC16 32256, 512, 1024, 2048, 4096, 4096, 8192, 16384, 32256, 0, 0, 0
   \              0x0400 0x0800
   \              0x1000 0x1000
   \              0x2000 0x4000
   \              0x7E00 0x0000
   \              0x0000 0x0000
   \   0000058A   0x3000 0x2000      DC16 12288, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000       
   \   000005A0   0x0000 0x4000      DC16 0, 16384, 16384, 8192, 8192, 8192, 8192, 8192, 4096, 4096, 0, 0, 0
   \              0x4000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x1000 0x1000
   \              0x0000 0x0000
   \              0x0000       
   \   000005BA   0x6000 0x2000      DC16 24576, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000       
   \   000005D0   0x0000 0x1000      DC16 0, 4096, 10240, 10240, 10240, 17408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x2800 0x2800
   \              0x2800 0x4400
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000005F0   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 32256, 16384, 8192, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x7E00
   \              0x4000 0x2000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000616   0x0000 0x0000      DC16 0, 0, 0, 0, 14336, 17408, 1024, 15360, 17408, 17408, 15360, 0, 0
   \              0x0000 0x0000
   \              0x3800 0x4400
   \              0x0400 0x3C00
   \              0x4400 0x4400
   \              0x3C00 0x0000
   \              0x0000       
   \   00000630   0x0000 0x4000      DC16 0, 16384, 16384, 22528, 25600, 17408, 17408, 17408, 25600, 22528
   \              0x4000 0x5800
   \              0x6400 0x4400
   \              0x4400 0x4400
   \              0x6400 0x5800
   \   00000644   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 12288, 18432, 16384, 16384, 16384, 18432, 12288, 0
   \              0x0000 0x0000
   \              0x0000 0x3000
   \              0x4800 0x4000
   \              0x4000 0x4000
   \              0x4800 0x3000
   \              0x0000       
   \   0000065E   0x0000 0x0000      DC16 0, 0, 1024, 1024, 13312, 19456, 17408, 17408, 17408, 19456, 13312
   \              0x0400 0x0400
   \              0x3400 0x4C00
   \              0x4400 0x4400
   \              0x4400 0x4C00
   \              0x3400       
   \   00000674   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 14336, 17408, 17408, 31744, 16384, 17408, 14336, 0
   \              0x0000 0x0000
   \              0x0000 0x3800
   \              0x4400 0x4400
   \              0x7C00 0x4000
   \              0x4400 0x3800
   \              0x0000       
   \   0000068E   0x0000 0x0000      DC16 0, 0, 24576, 16384, 57344, 16384, 16384, 16384, 16384, 16384
   \              0x6000 0x4000
   \              0xE000 0x4000
   \              0x4000 0x4000
   \              0x4000 0x4000
   \   000006A2   0x4000 0x0000      DC16 16384, 0, 0, 0, 0, 0, 13312, 19456, 17408, 17408, 17408, 19456
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3400 0x4C00
   \              0x4400 0x4400
   \              0x4400 0x4C00
   \   000006BA   0x3400 0x0400      DC16 13312, 1024, 17408, 0, 16384, 16384, 22528, 25600, 17408, 17408
   \              0x4400 0x0000
   \              0x4000 0x4000
   \              0x5800 0x6400
   \              0x4400 0x4400
   \   000006CE   0x4400 0x4400      DC16 17408, 17408, 17408, 0, 0, 0, 16384, 0, 16384, 16384, 16384, 16384
   \              0x4400 0x0000
   \              0x0000 0x0000
   \              0x4000 0x0000
   \              0x4000 0x4000
   \              0x4000 0x4000
   \   000006E6   0x4000 0x4000      DC16 16384, 16384, 16384, 0, 0, 0, 16384, 0, 16384, 16384, 16384, 16384
   \              0x4000 0x0000
   \              0x0000 0x0000
   \              0x4000 0x0000
   \              0x4000 0x4000
   \              0x4000 0x4000
   \   000006FE   0x4000 0x4000      DC16 16384, 16384, 16384, 16384, 16384, 0, 16384, 16384, 18432, 20480
   \              0x4000 0x4000
   \              0x4000 0x0000
   \              0x4000 0x4000
   \              0x4800 0x5000
   \   00000712   0x6000 0x5000      DC16 24576, 20480, 20480, 18432, 18432, 0, 0, 0, 16384, 16384, 16384
   \              0x5000 0x4800
   \              0x4800 0x0000
   \              0x0000 0x0000
   \              0x4000 0x4000
   \              0x4000       
   \   00000728   0x4000 0x4000      DC16 16384, 16384, 16384, 16384, 16384, 16384, 0, 0, 0, 0, 0, 20992
   \              0x4000 0x4000
   \              0x4000 0x4000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x5200
   \   00000740   0x6D00 0x4900      DC16 27904, 18688, 18688, 18688, 18688, 18688, 0, 0, 0, 0, 0, 22528
   \              0x4900 0x4900
   \              0x4900 0x4900
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x5800
   \   00000758   0x6400 0x4400      DC16 25600, 17408, 17408, 17408, 17408, 17408, 0, 0, 0, 0, 0, 14336
   \              0x4400 0x4400
   \              0x4400 0x4400
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3800
   \   00000770   0x4400 0x4400      DC16 17408, 17408, 17408, 17408, 17408, 14336, 0, 0, 0, 0, 0, 22528
   \              0x4400 0x4400
   \              0x4400 0x3800
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x5800
   \   00000788   0x6400 0x4400      DC16 25600, 17408, 17408, 17408, 25600, 22528, 16384, 16384, 0, 0, 0
   \              0x4400 0x4400
   \              0x6400 0x5800
   \              0x4000 0x4000
   \              0x0000 0x0000
   \              0x0000       
   \   0000079E   0x3400 0x4C00      DC16 13312, 19456, 17408, 17408, 17408, 19456, 13312, 1024, 1024, 0, 0
   \              0x4400 0x4400
   \              0x4400 0x4C00
   \              0x3400 0x0400
   \              0x0400 0x0000
   \              0x0000       
   \   000007B4   0x0000 0x5000      DC16 0, 20480, 24576, 16384, 16384, 16384, 16384, 16384, 0, 0, 0, 0, 0
   \              0x6000 0x4000
   \              0x4000 0x4000
   \              0x4000 0x4000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000007CE   0x3000 0x4800      DC16 12288, 18432, 16384, 12288, 2048, 18432, 12288, 0, 0, 0, 16384
   \              0x4000 0x3000
   \              0x0800 0x4800
   \              0x3000 0x0000
   \              0x0000 0x0000
   \              0x4000       
   \   000007E4   0x4000 0xE000      DC16 16384, 57344, 16384, 16384, 16384, 16384, 16384, 24576, 0, 0, 0, 0
   \              0x4000 0x4000
   \              0x4000 0x4000
   \              0x4000 0x6000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000007FC   0x0000 0x4400      DC16 0, 17408, 17408, 17408, 17408, 17408, 19456, 13312, 0, 0, 0, 0, 0
   \              0x4400 0x4400
   \              0x4400 0x4400
   \              0x4C00 0x3400
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000816   0x4400 0x4400      DC16 17408, 17408, 10240, 10240, 10240, 10240, 4096, 0, 0, 0, 0, 0
   \              0x2800 0x2800
   \              0x2800 0x2800
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000082E   0x4900 0x4900      DC16 18688, 18688, 21760, 21760, 21760, 21760, 8704, 0, 0, 0, 0, 0
   \              0x5500 0x5500
   \              0x5500 0x5500
   \              0x2200 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000846   0x4400 0x2800      DC16 17408, 10240, 10240, 4096, 10240, 10240, 17408, 0, 0, 0, 0, 0
   \              0x2800 0x1000
   \              0x2800 0x2800
   \              0x4400 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000085E   0x4400 0x4400      DC16 17408, 17408, 10240, 10240, 10240, 4096, 4096, 4096, 4096, 0, 0, 0
   \              0x2800 0x2800
   \              0x2800 0x1000
   \              0x1000 0x1000
   \              0x1000 0x0000
   \              0x0000 0x0000
   \   00000876   0x7800 0x0800      DC16 30720, 2048, 4096, 8192, 8192, 16384, 30720, 0, 0, 0, 4096, 8192
   \              0x1000 0x2000
   \              0x2000 0x4000
   \              0x7800 0x0000
   \              0x0000 0x0000
   \              0x1000 0x2000
   \   0000088E   0x2000 0x2000      DC16 8192, 8192, 8192, 16384, 8192, 8192, 8192, 8192, 8192, 0, 8192
   \              0x2000 0x4000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x0000
   \              0x2000       
   \   000008A4   0x2000 0x2000      DC16 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 0
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x0000       
   \   000008BA   0x4000 0x2000      DC16 16384, 8192, 8192, 8192, 8192, 4096, 8192, 8192, 8192, 8192, 8192
   \              0x2000 0x2000
   \              0x2000 0x1000
   \              0x2000 0x2000
   \              0x2000 0x2000
   \              0x2000       
   \   000008D0   0x0000 0x0000      DC16 0, 0, 0, 0, 29696, 22528, 0, 0, 0, 0, 0, 0, 0, 0, 28672, 20480
   \              0x0000 0x0000
   \              0x7400 0x5800
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7000 0x5000
   \   000008F0   0x5000 0x5000      DC16 20480, 20480, 20480, 20480, 20480, 28672, 0, 0
   \              0x5000 0x5000
   \              0x5000 0x7000
   \              0x0000 0x0000

   \                                 In section .rodata, align 4
   \   __absolute uint16_t const ASCII8x12_Table[1152]
   \                     ASCII8x12_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \   00000028   0x0010 0x0000      DC16 16, 0, 16, 0, 0, 0, 0, 40, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0028
   \              0x0028 0x0028
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0014
   \   00000050   0x0014 0x003E      DC16 20, 62, 20, 40, 124, 40, 40, 0, 0, 0, 16, 56, 84, 80, 56, 20, 20
   \              0x0014 0x0028
   \              0x007C 0x0028
   \              0x0028 0x0000
   \              0x0000 0x0000
   \              0x0010 0x0038
   \              0x0054 0x0050
   \              0x0038 0x0014
   \              0x0014       
   \   00000072   0x0054 0x0038      DC16 84, 56, 16, 0, 0, 0, 68, 168, 168, 80, 20, 26, 42, 36, 0, 0, 0, 0
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0044 0x00A8
   \              0x00A8 0x0050
   \              0x0014 0x001A
   \              0x002A 0x0024
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000096   0x0020 0x0050      DC16 32, 80, 80, 32, 232, 152, 152, 96, 0, 0, 0, 0, 128, 128, 128, 0, 0
   \              0x0050 0x0020
   \              0x00E8 0x0098
   \              0x0098 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0080 0x0080
   \              0x0080 0x0000
   \              0x0000       
   \   000000B8   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 64, 128, 128, 128, 128, 128, 128, 128, 128, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0040
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0000       
   \   000000DA   0x0000 0x0000      DC16 0, 0, 128, 64, 64, 64, 64, 64, 64, 64, 64, 0, 0, 0, 64, 224, 64
   \              0x0080 0x0040
   \              0x0040 0x0040
   \              0x0040 0x0040
   \              0x0040 0x0040
   \              0x0040 0x0000
   \              0x0000 0x0000
   \              0x0040 0x00E0
   \              0x0040       
   \   000000FC   0x00A0 0x0000      DC16 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 248, 32, 32, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0020
   \              0x0020 0x00F8
   \              0x0020 0x0020
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000124   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0040 0x0040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x0000
   \              0x0000       
   \   0000014E   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 32, 32, 32, 64
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0020 0x0020
   \              0x0020 0x0040
   \   00000176   0x0040 0x0080      DC16 64, 128, 128, 128, 0, 0, 0, 0, 96, 144, 144, 144, 144, 144, 144
   \              0x0080 0x0080
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0060 0x0090
   \              0x0090 0x0090
   \              0x0090 0x0090
   \              0x0090       
   \   00000194   0x0060 0x0000      DC16 96, 0, 0, 0, 0, 32, 96, 160, 32, 32, 32, 32, 32, 0, 0, 0, 0, 96
   \              0x0000 0x0000
   \              0x0000 0x0020
   \              0x0060 0x00A0
   \              0x0020 0x0020
   \              0x0020 0x0020
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0060
   \   000001B8   0x0090 0x0010      DC16 144, 16, 16, 32, 64, 128, 240, 0, 0, 0, 0, 96, 144, 16, 96, 16, 16
   \              0x0010 0x0020
   \              0x0040 0x0080
   \              0x00F0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0060
   \              0x0090 0x0010
   \              0x0060 0x0010
   \              0x0010       
   \   000001DA   0x0090 0x0060      DC16 144, 96, 0, 0, 0, 0, 16, 48, 80, 80, 144, 248, 16, 16, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0010 0x0030
   \              0x0050 0x0050
   \              0x0090 0x00F8
   \              0x0010 0x0010
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000001FE   0x0070 0x0040      DC16 112, 64, 128, 224, 16, 16, 144, 96, 0, 0, 0, 0, 96, 144, 128, 160
   \              0x0080 0x00E0
   \              0x0010 0x0010
   \              0x0090 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0060 0x0090
   \              0x0080 0x00A0
   \   0000021E   0x00D0 0x0090      DC16 208, 144, 144, 96, 0, 0, 0, 0, 240, 16, 32, 32, 32, 64, 64, 64, 0
   \              0x0090 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F0 0x0010
   \              0x0020 0x0020
   \              0x0020 0x0040
   \              0x0040 0x0040
   \              0x0000       
   \   00000240   0x0000 0x0000      DC16 0, 0, 0, 96, 144, 144, 96, 144, 144, 144, 96, 0, 0, 0, 0, 96, 144
   \              0x0000 0x0060
   \              0x0090 0x0090
   \              0x0060 0x0090
   \              0x0090 0x0090
   \              0x0060 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0060
   \              0x0090       
   \   00000262   0x0090 0x00B0      DC16 144, 176, 80, 16, 144, 96, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 64, 0
   \              0x0050 0x0010
   \              0x0090 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0040 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0040
   \              0x0000       
   \   00000288   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 64, 64, 0, 0, 0, 0, 0, 16, 96, 128
   \              0x0000 0x0000
   \              0x0000 0x0040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0040 0x0040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0010
   \              0x0060 0x0080
   \   000002B0   0x0060 0x0010      DC16 96, 16, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 240, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F0 0x0000
   \              0x00F0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000002D8   0x0000 0x0080      DC16 0, 128, 96, 16, 96, 128, 0, 0, 0, 0, 0, 96, 144, 16, 32, 64, 64, 0
   \              0x0060 0x0010
   \              0x0060 0x0080
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0060
   \              0x0090 0x0010
   \              0x0020 0x0040
   \              0x0040 0x0000
   \   000002FC   0x0040 0x0000      DC16 64, 0, 0, 0, 0, 28, 34, 91, 165, 165, 165, 165, 158, 65, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x001C
   \              0x0022 0x005B
   \              0x00A5 0x00A5
   \              0x00A5 0x00A5
   \              0x009E 0x0041
   \              0x0000 0x0000
   \              0x0000       
   \   0000031E   0x0020 0x0050      DC16 32, 80, 80, 80, 80, 112, 136, 136, 0, 0, 0, 0, 240, 136, 136, 240
   \              0x0050 0x0050
   \              0x0050 0x0070
   \              0x0088 0x0088
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F0 0x0088
   \              0x0088 0x00F0
   \   0000033E   0x0088 0x0088      DC16 136, 136, 136, 240, 0, 0, 0, 0, 56, 68, 132, 128, 128, 132, 68, 56
   \              0x0088 0x00F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0038 0x0044
   \              0x0084 0x0080
   \              0x0080 0x0084
   \              0x0044 0x0038
   \   0000035E   0x0000 0x0000      DC16 0, 0, 0, 0, 224, 144, 136, 136, 136, 136, 144, 224, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x00E0 0x0090
   \              0x0088 0x0088
   \              0x0088 0x0088
   \              0x0090 0x00E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000037E   0x00F8 0x0080      DC16 248, 128, 128, 248, 128, 128, 128, 248, 0, 0, 0, 0, 120, 64, 64
   \              0x0080 0x00F8
   \              0x0080 0x0080
   \              0x0080 0x00F8
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0078 0x0040
   \              0x0040       
   \   0000039C   0x0070 0x0040      DC16 112, 64, 64, 64, 64, 0, 0, 0, 0, 56, 68, 132, 128, 156, 132, 68
   \              0x0040 0x0040
   \              0x0040 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0038
   \              0x0044 0x0084
   \              0x0080 0x009C
   \              0x0084 0x0044
   \   000003BC   0x0038 0x0000      DC16 56, 0, 0, 0, 0, 136, 136, 136, 248, 136, 136, 136, 136, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0088
   \              0x0088 0x0088
   \              0x00F8 0x0088
   \              0x0088 0x0088
   \              0x0088 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000003DE   0x0080 0x0080      DC16 128, 128, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0, 16, 16, 16, 16
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0010 0x0010
   \              0x0010 0x0010
   \   000003FE   0x0010 0x0090      DC16 16, 144, 144, 96, 0, 0, 0, 0, 136, 144, 160, 224, 160, 144, 144
   \              0x0090 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0088 0x0090
   \              0x00A0 0x00E0
   \              0x00A0 0x0090
   \              0x0090       
   \   0000041C   0x0088 0x0000      DC16 136, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128, 240, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x00F0 0x0000
   \              0x0000 0x0000
   \   0000043C   0x0000 0x0082      DC16 0, 130, 198, 198, 170, 170, 170, 170, 146, 0, 0, 0, 0, 132, 196
   \              0x00C6 0x00C6
   \              0x00AA 0x00AA
   \              0x00AA 0x00AA
   \              0x0092 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0084
   \              0x00C4       
   \   0000045A   0x00A4 0x00A4      DC16 164, 164, 148, 148, 140, 132, 0, 0, 0, 0, 48, 72, 132, 132, 132
   \              0x0094 0x0094
   \              0x008C 0x0084
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0030 0x0048
   \              0x0084 0x0084
   \              0x0084       
   \   00000478   0x0084 0x0048      DC16 132, 72, 48, 0, 0, 0, 0, 240, 136, 136, 136, 240, 128, 128, 128, 0
   \              0x0030 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00F0
   \              0x0088 0x0088
   \              0x0088 0x00F0
   \              0x0080 0x0080
   \              0x0080 0x0000
   \   00000498   0x0000 0x0000      DC16 0, 0, 0, 48, 72, 132, 132, 132, 132, 88, 52, 4, 0, 0, 0, 120, 68
   \              0x0000 0x0030
   \              0x0048 0x0084
   \              0x0084 0x0084
   \              0x0084 0x0058
   \              0x0034 0x0004
   \              0x0000 0x0000
   \              0x0000 0x0078
   \              0x0044       
   \   000004BA   0x0044 0x0078      DC16 68, 120, 80, 72, 68, 66, 0, 0, 0, 0, 112, 136, 128, 112, 8, 136
   \              0x0050 0x0048
   \              0x0044 0x0042
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0070 0x0088
   \              0x0080 0x0070
   \              0x0008 0x0088
   \   000004DA   0x0088 0x0070      DC16 136, 112, 0, 0, 0, 0, 248, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F8 0x0020
   \              0x0020 0x0020
   \              0x0020 0x0020
   \              0x0020 0x0020
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000004FE   0x0084 0x0084      DC16 132, 132, 132, 132, 132, 132, 72, 48, 0, 0, 0, 0, 136, 136, 80, 80
   \              0x0084 0x0084
   \              0x0084 0x0084
   \              0x0048 0x0030
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0088 0x0088
   \              0x0050 0x0050
   \   0000051E   0x0050 0x0050      DC16 80, 80, 80, 32, 0, 0, 0, 0, 146, 170, 170, 170, 170, 170, 170, 68
   \              0x0050 0x0020
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0092 0x00AA
   \              0x00AA 0x00AA
   \              0x00AA 0x00AA
   \              0x00AA 0x0044
   \   0000053E   0x0000 0x0000      DC16 0, 0, 0, 0, 132, 72, 72, 48, 48, 72, 72, 132, 0, 0, 0, 0, 136, 80
   \              0x0000 0x0000
   \              0x0084 0x0048
   \              0x0048 0x0030
   \              0x0030 0x0048
   \              0x0048 0x0084
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0088 0x0050
   \   00000562   0x0050 0x0020      DC16 80, 32, 32, 32, 32, 32, 0, 0, 0, 0, 248, 8, 16, 32, 32, 64, 128
   \              0x0020 0x0020
   \              0x0020 0x0020
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F8 0x0008
   \              0x0010 0x0020
   \              0x0020 0x0040
   \              0x0080       
   \   00000584   0x00F8 0x0000      DC16 248, 0, 0, 0, 0, 192, 128, 128, 128, 128, 128, 128, 128, 128, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0000 0x0000
   \   000005A4   0x0000 0x0080      DC16 0, 128, 128, 64, 64, 64, 64, 32, 32, 0, 0, 0, 0, 192, 64, 64, 64
   \              0x0080 0x0040
   \              0x0040 0x0040
   \              0x0040 0x0020
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x0040 0x0040
   \              0x0040       
   \   000005C6   0x0040 0x0040      DC16 64, 64, 64, 64, 64, 0, 0, 0, 64, 160, 160, 160, 0, 0, 0, 0, 0, 0
   \              0x0040 0x0040
   \              0x0040 0x0000
   \              0x0000 0x0000
   \              0x0040 0x00A0
   \              0x00A0 0x00A0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000005EA   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 128, 64, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F8 0x0000
   \              0x0000 0x0000
   \              0x0080 0x0040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000614   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 224, 16, 112, 144, 144, 112, 0, 0, 0, 0, 128
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00E0
   \              0x0010 0x0070
   \              0x0090 0x0090
   \              0x0070 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0080
   \   00000638   0x0080 0x00A0      DC16 128, 160, 208, 144, 144, 208, 160, 0, 0, 0, 0, 0, 0, 96, 144, 128
   \              0x00D0 0x0090
   \              0x0090 0x00D0
   \              0x00A0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0060
   \              0x0090 0x0080
   \   00000658   0x0080 0x0090      DC16 128, 144, 96, 0, 0, 0, 0, 16, 16, 80, 176, 144, 144, 176, 80, 0, 0
   \              0x0060 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0010
   \              0x0010 0x0050
   \              0x00B0 0x0090
   \              0x0090 0x00B0
   \              0x0050 0x0000
   \              0x0000       
   \   0000067A   0x0000 0x0000      DC16 0, 0, 0, 0, 96, 144, 240, 128, 144, 96, 0, 0, 0, 0, 192, 128, 192
   \              0x0000 0x0000
   \              0x0060 0x0090
   \              0x00F0 0x0080
   \              0x0090 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x0080
   \              0x00C0       
   \   0000069C   0x0080 0x0080      DC16 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 80, 176, 144, 144, 176
   \              0x0080 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0050
   \              0x00B0 0x0090
   \              0x0090 0x00B0
   \   000006BC   0x0050 0x0010      DC16 80, 16, 0, 0, 0, 128, 128, 160, 208, 144, 144, 144, 144, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x0080 0x00A0
   \              0x00D0 0x0090
   \              0x0090 0x0090
   \              0x0090 0x0000
   \              0x0000 0x0000
   \   000006DC   0x0000 0x0080      DC16 0, 128, 0, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0, 128, 0, 128
   \              0x0000 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x0000 0x0080
   \   000006FC   0x0080 0x0080      DC16 128, 128, 128, 128, 128, 128, 0, 0, 0, 128, 128, 144, 160, 192
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x0080 0x0090
   \              0x00A0 0x00C0
   \   00000718   0x00A0 0x0090      DC16 160, 144, 144, 0, 0, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128
   \              0x0090 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0080       
   \   00000736   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 166, 218, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00A6 0x00DA
   \              0x0092 0x0092
   \              0x0092 0x0092
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000075A   0x00A0 0x00D0      DC16 160, 208, 144, 144, 144, 144, 0, 0, 0, 0, 0, 0, 96, 144, 144, 144
   \              0x0090 0x0090
   \              0x0090 0x0090
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0060 0x0090
   \              0x0090 0x0090
   \   0000077A   0x0090 0x0060      DC16 144, 96, 0, 0, 0, 0, 0, 0, 160, 208, 144, 144, 208, 160, 128, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00A0 0x00D0
   \              0x0090 0x0090
   \              0x00D0 0x00A0
   \              0x0080 0x0000
   \              0x0000       
   \   0000079C   0x0000 0x0000      DC16 0, 0, 0, 80, 176, 144, 144, 176, 80, 16, 0, 0, 0, 0, 0, 160, 192
   \              0x0000 0x0050
   \              0x00B0 0x0090
   \              0x0090 0x00B0
   \              0x0050 0x0010
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00A0
   \              0x00C0       
   \   000007BE   0x0080 0x0080      DC16 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 224, 144, 64, 32, 144, 96, 0
   \              0x0080 0x0080
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00E0 0x0090
   \              0x0040 0x0020
   \              0x0090 0x0060
   \              0x0000       
   \   000007E0   0x0000 0x0000      DC16 0, 0, 0, 128, 128, 192, 128, 128, 128, 128, 192, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0080
   \              0x0080 0x00C0
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000802   0x0090 0x0090      DC16 144, 144, 144, 144, 176, 80, 0, 0, 0, 0, 0, 0, 136, 136, 80, 80
   \              0x0090 0x0090
   \              0x00B0 0x0050
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0088 0x0088
   \              0x0050 0x0050
   \   00000822   0x0050 0x0020      DC16 80, 32, 0, 0, 0, 0, 0, 0, 146, 170, 170, 170, 170, 68, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0092 0x00AA
   \              0x00AA 0x00AA
   \              0x00AA 0x0044
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000846   0x0000 0x0000      DC16 0, 0, 136, 80, 32, 32, 80, 136, 0, 0, 0, 0, 0, 0, 136, 80, 80, 80
   \              0x0088 0x0050
   \              0x0020 0x0020
   \              0x0050 0x0088
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0088 0x0050
   \              0x0050 0x0050
   \   0000086A   0x0020 0x0020      DC16 32, 32, 32, 0, 0, 0, 0, 0, 240, 16, 32, 64, 128, 240, 0, 0, 0, 0
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00F0 0x0010
   \              0x0020 0x0040
   \              0x0080 0x00F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000088E   0x00C0 0x0080      DC16 192, 128, 128, 128, 0, 128, 128, 128, 128, 0, 0, 0, 128, 128, 128
   \              0x0080 0x0080
   \              0x0000 0x0080
   \              0x0080 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0080 0x0080
   \              0x0080       
   \   000008AC   0x0080 0x0080      DC16 128, 128, 128, 128, 128, 128, 0, 0, 0, 192, 64, 64, 64, 32, 64, 64
   \              0x0080 0x0080
   \              0x0080 0x0080
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x0040 0x0040
   \              0x0040 0x0020
   \              0x0040 0x0040
   \   000008CC   0x0040 0x0040      DC16 64, 64, 0, 0, 0, 0, 0, 0, 232, 176, 0, 0, 0, 0, 0, 0, 0, 0, 224
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00E8 0x00B0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00E0       
   \   000008F2   0x00A0 0x00A0      DC16 160, 160, 160, 160, 160, 224, 0
   \              0x00A0 0x00A0
   \              0x00A0 0x00E0
   \              0x0000       

   \                                 In section .rodata, align 4
   \   __absolute uint16_t const ASCII8x8_Table[768]
   \                     ASCII8x8_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 64, 64, 64, 64, 64, 64, 0, 64, 160, 160
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0040 0x0040
   \              0x0040 0x0040
   \              0x0040 0x0040
   \              0x0000 0x0040
   \              0x00A0 0x00A0
   \   00000024   0x00A0 0x0000      DC16 160, 0, 0, 0, 0, 0, 0, 36, 36, 254, 72, 252, 72, 72, 56, 84, 80
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0024
   \              0x0024 0x00FE
   \              0x0048 0x00FC
   \              0x0048 0x0048
   \              0x0038 0x0054
   \              0x0050       
   \   00000046   0x0038 0x0014      DC16 56, 20, 20, 84, 56, 68, 168, 168, 80, 20, 26, 42, 36, 16, 40, 40
   \              0x0014 0x0054
   \              0x0038 0x0044
   \              0x00A8 0x00A8
   \              0x0050 0x0014
   \              0x001A 0x002A
   \              0x0024 0x0010
   \              0x0028 0x0028
   \   00000066   0x0010 0x0074      DC16 16, 116, 76, 76, 48, 16, 16, 16, 0, 0, 0, 0, 0, 8, 16, 16, 16, 16
   \              0x004C 0x004C
   \              0x0030 0x0010
   \              0x0010 0x0010
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0010 0x0010
   \              0x0010 0x0010
   \   0000008A   0x0010 0x0010      DC16 16, 16, 8, 16, 8, 8, 8, 8, 8, 8, 16, 0, 0, 36, 24, 60, 24, 36, 0
   \              0x0008 0x0010
   \              0x0008 0x0008
   \              0x0008 0x0008
   \              0x0008 0x0008
   \              0x0010 0x0000
   \              0x0000 0x0024
   \              0x0018 0x003C
   \              0x0018 0x0024
   \              0x0000       
   \   000000B0   0x0000 0x0000      DC16 0, 0, 16, 16, 124, 16, 16, 0, 0, 0, 0, 0, 0, 8, 8, 16, 0, 0, 0, 0
   \              0x0010 0x0010
   \              0x007C 0x0010
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0008 0x0010
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000000D8   0x003C 0x0000      DC16 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 8, 8, 8, 16, 16, 32, 32, 32
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0008 0x0008
   \              0x0008 0x0010
   \              0x0010 0x0020
   \              0x0020 0x0020
   \   00000100   0x0018 0x0024      DC16 24, 36, 36, 36, 36, 36, 36, 24, 8, 24, 40, 8, 8, 8, 8, 8, 56, 68
   \              0x0024 0x0024
   \              0x0024 0x0024
   \              0x0024 0x0018
   \              0x0008 0x0018
   \              0x0028 0x0008
   \              0x0008 0x0008
   \              0x0008 0x0008
   \              0x0038 0x0044
   \   00000124   0x0000 0x0004      DC16 0, 4, 8, 16, 32, 124, 24, 36, 4, 24, 4, 4, 36, 24, 4, 12, 20, 36
   \              0x0008 0x0010
   \              0x0020 0x007C
   \              0x0018 0x0024
   \              0x0004 0x0018
   \              0x0004 0x0004
   \              0x0024 0x0018
   \              0x0004 0x000C
   \              0x0014 0x0024
   \   00000148   0x0044 0x007E      DC16 68, 126, 4, 4, 60, 32, 32, 56, 4, 4, 36, 24, 24, 36, 32, 56, 36
   \              0x0004 0x0004
   \              0x003C 0x0020
   \              0x0020 0x0038
   \              0x0004 0x0004
   \              0x0024 0x0018
   \              0x0018 0x0024
   \              0x0020 0x0038
   \              0x0024       
   \   0000016A   0x0024 0x0024      DC16 36, 36, 24, 60, 4, 8, 8, 8, 16, 16, 16, 24, 36, 36, 24, 36, 36, 36
   \              0x0018 0x003C
   \              0x0004 0x0008
   \              0x0008 0x0008
   \              0x0010 0x0010
   \              0x0010 0x0018
   \              0x0024 0x0024
   \              0x0018 0x0024
   \              0x0024 0x0024
   \   0000018E   0x0018 0x0018      DC16 24, 24, 36, 36, 36, 28, 4, 36, 24, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0
   \              0x0024 0x0024
   \              0x0024 0x001C
   \              0x0004 0x0024
   \              0x0018 0x0000
   \              0x0000 0x0010
   \              0x0000 0x0000
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000001B4   0x0008 0x0000      DC16 8, 0, 0, 8, 16, 0, 0, 0, 4, 24, 32, 24, 4, 0, 0, 0, 0, 60, 0, 60
   \              0x0000 0x0008
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0004 0x0018
   \              0x0020 0x0018
   \              0x0004 0x0000
   \              0x0000 0x0000
   \              0x0000 0x003C
   \              0x0000 0x003C
   \   000001DC   0x0000 0x0000      DC16 0, 0, 0, 0, 32, 24, 4, 24, 32, 0, 24, 36, 4, 8, 16, 16, 0, 16, 60
   \              0x0000 0x0000
   \              0x0020 0x0018
   \              0x0004 0x0018
   \              0x0020 0x0000
   \              0x0018 0x0024
   \              0x0004 0x0008
   \              0x0010 0x0010
   \              0x0000 0x0010
   \              0x003C       
   \   00000202   0x0042 0x0099      DC16 66, 153, 165, 165, 157, 66, 56, 56, 68, 68, 68, 124, 68, 68, 68
   \              0x00A5 0x00A5
   \              0x009D 0x0042
   \              0x0038 0x0038
   \              0x0044 0x0044
   \              0x0044 0x007C
   \              0x0044 0x0044
   \              0x0044       
   \   00000220   0x0078 0x0044      DC16 120, 68, 68, 120, 68, 68, 68, 120, 28, 34, 66, 64, 64, 66, 34, 28
   \              0x0044 0x0078
   \              0x0044 0x0044
   \              0x0044 0x0078
   \              0x001C 0x0022
   \              0x0042 0x0040
   \              0x0040 0x0042
   \              0x0022 0x001C
   \   00000240   0x0070 0x0048      DC16 112, 72, 68, 68, 68, 68, 72, 112, 124, 64, 64, 124, 64, 64, 64
   \              0x0044 0x0044
   \              0x0044 0x0044
   \              0x0048 0x0070
   \              0x007C 0x0040
   \              0x0040 0x007C
   \              0x0040 0x0040
   \              0x0040       
   \   0000025E   0x007C 0x003C      DC16 124, 60, 32, 32, 56, 32, 32, 32, 32, 28, 34, 66, 64, 78, 66, 34
   \              0x0020 0x0020
   \              0x0038 0x0020
   \              0x0020 0x0020
   \              0x0020 0x001C
   \              0x0022 0x0042
   \              0x0040 0x004E
   \              0x0042 0x0022
   \   0000027E   0x001C 0x0044      DC16 28, 68, 68, 68, 124, 68, 68, 68, 68, 16, 16, 16, 16, 16, 16, 16
   \              0x0044 0x0044
   \              0x007C 0x0044
   \              0x0044 0x0044
   \              0x0044 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \   0000029E   0x0010 0x0004      DC16 16, 4, 4, 4, 4, 4, 36, 36, 24, 68, 72, 80, 112, 80, 72, 72, 68, 32
   \              0x0004 0x0004
   \              0x0004 0x0004
   \              0x0024 0x0024
   \              0x0018 0x0044
   \              0x0048 0x0050
   \              0x0070 0x0050
   \              0x0048 0x0048
   \              0x0044 0x0020
   \   000002C2   0x0020 0x0020      DC16 32, 32, 32, 32, 32, 32, 60, 130, 198, 198, 170, 170, 170, 170, 146
   \              0x0020 0x0020
   \              0x0020 0x0020
   \              0x003C 0x0082
   \              0x00C6 0x00C6
   \              0x00AA 0x00AA
   \              0x00AA 0x00AA
   \              0x0092       
   \   000002E0   0x0042 0x0062      DC16 66, 98, 82, 82, 74, 74, 70, 66, 24, 36, 66, 66, 66, 66, 36, 24
   \              0x0052 0x0052
   \              0x004A 0x004A
   \              0x0046 0x0042
   \              0x0018 0x0024
   \              0x0042 0x0042
   \              0x0042 0x0042
   \              0x0024 0x0018
   \   00000300   0x0078 0x0044      DC16 120, 68, 68, 68, 120, 64, 64, 64, 24, 36, 66, 66, 66, 66, 44, 26
   \              0x0044 0x0044
   \              0x0078 0x0040
   \              0x0040 0x0040
   \              0x0018 0x0024
   \              0x0042 0x0042
   \              0x0042 0x0042
   \              0x002C 0x001A
   \   00000320   0x0078 0x0044      DC16 120, 68, 68, 120, 80, 72, 68, 66, 56, 68, 64, 56, 4, 68, 68, 56
   \              0x0044 0x0078
   \              0x0050 0x0048
   \              0x0044 0x0042
   \              0x0038 0x0044
   \              0x0040 0x0038
   \              0x0004 0x0044
   \              0x0044 0x0038
   \   00000340   0x007C 0x0010      DC16 124, 16, 16, 16, 16, 16, 16, 16, 66, 66, 66, 66, 66, 66, 36, 24
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0042 0x0042
   \              0x0042 0x0042
   \              0x0042 0x0042
   \              0x0024 0x0018
   \   00000360   0x0044 0x0044      DC16 68, 68, 40, 40, 40, 40, 40, 16, 146, 170, 170, 170, 170, 170, 170
   \              0x0028 0x0028
   \              0x0028 0x0028
   \              0x0028 0x0010
   \              0x0092 0x00AA
   \              0x00AA 0x00AA
   \              0x00AA 0x00AA
   \              0x00AA       
   \   0000037E   0x0044 0x0042      DC16 68, 66, 36, 36, 24, 24, 36, 36, 66, 68, 40, 40, 16, 16, 16, 16, 16
   \              0x0024 0x0024
   \              0x0018 0x0018
   \              0x0024 0x0024
   \              0x0042 0x0044
   \              0x0028 0x0028
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010       
   \   000003A0   0x007C 0x0004      DC16 124, 4, 8, 16, 16, 32, 64, 124, 28, 16, 16, 16, 16, 16, 16, 28, 16
   \              0x0008 0x0010
   \              0x0010 0x0020
   \              0x0040 0x007C
   \              0x001C 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x001C
   \              0x0010       
   \   000003C2   0x0010 0x0008      DC16 16, 8, 8, 8, 8, 4, 4, 28, 4, 4, 4, 4, 4, 4, 28, 16, 40, 68, 0, 0
   \              0x0008 0x0008
   \              0x0008 0x0004
   \              0x0004 0x001C
   \              0x0004 0x0004
   \              0x0004 0x0004
   \              0x0004 0x0004
   \              0x001C 0x0010
   \              0x0028 0x0044
   \              0x0000 0x0000
   \   000003EA   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0020
   \              0x0010 0x0010
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000414   0x0018 0x0004      DC16 24, 4, 28, 36, 36, 28, 32, 32, 40, 52, 36, 36, 52, 40, 0, 0, 24
   \              0x001C 0x0024
   \              0x0024 0x001C
   \              0x0020 0x0020
   \              0x0028 0x0034
   \              0x0024 0x0024
   \              0x0034 0x0028
   \              0x0000 0x0000
   \              0x0018       
   \   00000436   0x0024 0x0020      DC16 36, 32, 32, 36, 24, 4, 4, 20, 44, 36, 36, 44, 20, 0, 0, 24, 36, 60
   \              0x0020 0x0024
   \              0x0018 0x0004
   \              0x0004 0x0014
   \              0x002C 0x0024
   \              0x0024 0x002C
   \              0x0014 0x0000
   \              0x0000 0x0018
   \              0x0024 0x003C
   \   0000045A   0x0020 0x0024      DC16 32, 36, 24, 0, 24, 16, 16, 24, 16, 16, 16, 0, 24, 36, 36, 24, 4
   \              0x0018 0x0000
   \              0x0018 0x0010
   \              0x0010 0x0018
   \              0x0010 0x0010
   \              0x0010 0x0000
   \              0x0018 0x0024
   \              0x0024 0x0018
   \              0x0004       
   \   0000047C   0x0024 0x0018      DC16 36, 24, 32, 32, 40, 52, 36, 36, 36, 36, 16, 0, 16, 16, 16, 16, 16
   \              0x0020 0x0020
   \              0x0028 0x0034
   \              0x0024 0x0024
   \              0x0024 0x0024
   \              0x0010 0x0000
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010       
   \   0000049E   0x0010 0x0008      DC16 16, 8, 0, 8, 8, 8, 8, 40, 16, 32, 32, 36, 40, 48, 40, 36, 36, 16
   \              0x0000 0x0008
   \              0x0008 0x0008
   \              0x0008 0x0028
   \              0x0010 0x0020
   \              0x0020 0x0024
   \              0x0028 0x0030
   \              0x0028 0x0024
   \              0x0024 0x0010
   \   000004C2   0x0010 0x0010      DC16 16, 16, 16, 16, 16, 16, 16, 0, 0, 166, 218, 146, 146, 146, 146, 0
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0000
   \              0x0000 0x00A6
   \              0x00DA 0x0092
   \              0x0092 0x0092
   \              0x0092 0x0000
   \   000004E2   0x0000 0x0028      DC16 0, 40, 52, 36, 36, 36, 36, 0, 0, 24, 36, 36, 36, 36, 24, 0, 40, 52
   \              0x0034 0x0024
   \              0x0024 0x0024
   \              0x0024 0x0000
   \              0x0000 0x0018
   \              0x0024 0x0024
   \              0x0024 0x0024
   \              0x0018 0x0000
   \              0x0028 0x0034
   \   00000506   0x0024 0x0038      DC16 36, 56, 32, 32, 32, 0, 20, 44, 36, 28, 4, 4, 4, 0, 0, 44, 48, 32
   \              0x0020 0x0020
   \              0x0020 0x0000
   \              0x0014 0x002C
   \              0x0024 0x001C
   \              0x0004 0x0004
   \              0x0004 0x0000
   \              0x0000 0x002C
   \              0x0030 0x0020
   \   0000052A   0x0020 0x0020      DC16 32, 32, 32, 0, 0, 24, 36, 16, 8, 36, 24, 0, 16, 56, 16, 16, 16, 16
   \              0x0020 0x0000
   \              0x0000 0x0018
   \              0x0024 0x0010
   \              0x0008 0x0024
   \              0x0018 0x0000
   \              0x0010 0x0038
   \              0x0010 0x0010
   \              0x0010 0x0010
   \   0000054E   0x0018 0x0000      DC16 24, 0, 0, 36, 36, 36, 36, 44, 20, 0, 0, 68, 68, 40, 40, 40, 16, 0
   \              0x0000 0x0024
   \              0x0024 0x0024
   \              0x0024 0x002C
   \              0x0014 0x0000
   \              0x0000 0x0044
   \              0x0044 0x0028
   \              0x0028 0x0028
   \              0x0010 0x0000
   \   00000572   0x0000 0x0092      DC16 0, 146, 170, 170, 170, 170, 68, 0, 0, 68, 40, 16, 16, 40, 68, 0
   \              0x00AA 0x00AA
   \              0x00AA 0x00AA
   \              0x0044 0x0000
   \              0x0000 0x0044
   \              0x0028 0x0010
   \              0x0010 0x0028
   \              0x0044 0x0000
   \   00000592   0x0028 0x0028      DC16 40, 40, 40, 16, 16, 16, 16, 0, 0, 60, 4, 8, 16, 32, 60, 0, 8, 16
   \              0x0028 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0000
   \              0x0000 0x003C
   \              0x0004 0x0008
   \              0x0010 0x0020
   \              0x003C 0x0000
   \              0x0008 0x0010
   \   000005B6   0x0010 0x0020      DC16 16, 32, 16, 16, 8, 16, 16, 16, 16, 16, 16, 16, 16, 0, 16, 8, 8, 4
   \              0x0010 0x0010
   \              0x0008 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0010
   \              0x0010 0x0000
   \              0x0010 0x0008
   \              0x0008 0x0004
   \   000005DA   0x0008 0x0008      DC16 8, 8, 16, 0, 0, 0, 96, 146, 12, 0, 0, 255, 255, 255, 255, 255, 255
   \              0x0010 0x0000
   \              0x0000 0x0000
   \              0x0060 0x0092
   \              0x000C 0x0000
   \              0x0000 0x00FF
   \              0x00FF 0x00FF
   \              0x00FF 0x00FF
   \              0x00FF       
   \   000005FC   0x00FF 0x00FF      DC16 255, 255

   \                                 In section .data, align 4
   \   __absolute sFONT Font16x24
   \                     Font16x24:
   \   00000000   0x........         DC32 ASCII16x24_Table
   \   00000004   0x0010 0x0018      DC16 16, 24

   \                                 In section .data, align 4
   \   __absolute sFONT Font12x12
   \                     Font12x12:
   \   00000000   0x........         DC32 ASCII12x12_Table
   \   00000004   0x000C 0x000C      DC16 12, 12

   \                                 In section .data, align 4
   \   __absolute sFONT Font8x12
   \                     Font8x12:
   \   00000000   0x........         DC32 ASCII8x12_Table
   \   00000004   0x0008 0x000C      DC16 8, 12

   \                                 In section .data, align 4
   \   __absolute sFONT Font8x8
   \                     Font8x8:
   \   00000000   0x........         DC32 ASCII8x8_Table
   \   00000004   0x0008 0x0008      DC16 8, 8
     33          
     34          /** @addtogroup Utilities
     35            * @{
     36            */ 
     37          
     38          /** @addtogroup STM32_EVAL
     39            * @{
     40            */ 
     41          
     42          /** @addtogroup STM324xG_EVAL
     43            * @{
     44            */
     45              
     46          /** @defgroup STM324xG_EVAL_LCD 
     47            * @brief This file includes the LCD driver for AM-240320L8TNQW00H (LCD_ILI9320)
     48            *        and AM240320D5TOQW01H (LCD_ILI9325) Liquid Crystal Display Modules
     49            *        of STM324xG_EVAL board.
     50            * @{
     51            */ 
     52          
     53          /** @defgroup STM324xG_EVAL_LCD_Private_TypesDefinitions
     54            * @{
     55            */ 
     56          typedef struct
     57          {
     58            __IO uint16_t LCD_REG;
     59            __IO uint16_t LCD_RAM;
     60          } LCD_TypeDef;
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup STM324xG_EVAL_LCD_Private_Defines
     67            * @{
     68            */
     69          /* Note: LCD /CS is NE3 - Bank 3 of NOR/SRAM Bank 1~4 */
     70          #define LCD_BASE           ((uint32_t)(0x60000000 | 0x08000000))
     71          #define LCD                ((LCD_TypeDef *) LCD_BASE)
     72          #define MAX_POLY_CORNERS   200
     73          #define POLY_Y(Z)          ((int32_t)((Points + Z)->X))
     74          #define POLY_X(Z)          ((int32_t)((Points + Z)->Y))
     75          /**
     76            * @}
     77            */ 
     78          
     79          /** @defgroup STM324xG_EVAL_LCD_Private_Macros
     80            * @{
     81            */
     82          #define ABS(X)  ((X) > 0 ? (X) : -(X))     
     83          /**
     84            * @}
     85            */ 
     86              
     87          /** @defgroup STM324xG_EVAL_LCD_Private_Variables
     88            * @{
     89            */ 

   \                                 In section .bss, align 4
     90          static sFONT *LCD_Currentfonts;
   \                     LCD_Currentfonts:
   \   00000000                      DS8 4
     91          
     92            /* Global variables to set the written text color */

   \                                 In section .bss, align 2
     93          __IO uint16_t TextColor = 0x0000, BackColor = 0xFFFF;
   \                     TextColor:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     BackColor:
   \   00000000   0xFFFF             DC16 65535
     94            
     95          /**
     96            * @}
     97            */ 
     98          
     99          
    100          /** @defgroup STM324xG_EVAL_LCD_Private_FunctionPrototypes
    101            * @{
    102            */ 
    103          #ifndef USE_Delay
    104          static void delay(__IO uint32_t nCount);
    105          #endif /* USE_Delay*/
    106          static void PutPixel(int16_t x, int16_t y);
    107          static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed);
    108          
    109          
    110          /**
    111            * @}
    112            */ 
    113          
    114          
    115          /** @defgroup STM324xG_EVAL_LCD_Private_Functions
    116            * @{
    117            */ 
    118          
    119          /**
    120            * @brief  DeInitializes the LCD.
    121            * @param  None
    122            * @retval None
    123            */

   \                                 In section .text, align 2, keep-with-next
    124          void LCD_DeInit(void)
    125          { 
   \                     LCD_DeInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    126            GPIO_InitTypeDef GPIO_InitStructure;
    127          
    128            /*!< LCD Display Off */
    129            LCD_DisplayOff();
   \   00000004   0x.... 0x....      BL       LCD_DisplayOff
    130          
    131            /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
    132            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x.... 0x....      BL       FSMC_NORSRAMCmd
    133            
    134            /*!< LCD_SPI DeInit */
    135            FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x.... 0x....      BL       FSMC_NORSRAMDeInit
    136             
    137          /*-- GPIO Configuration ------------------------------------------------------*/
    138            /* SRAM Data lines configuration */
    139            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
    140                                          GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000016   0xF24C 0x7003      MOVW     R0,#+50947
   \   0000001A   0x9000             STR      R0,[SP, #+0]
    141            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    142            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x0007      STRB     R0,[SP, #+7]
    143            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
    144           
    145            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000003A   0x.... 0x....      BL       GPIO_PinAFConfig
    146            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000046   0x.... 0x....      BL       GPIO_PinAFConfig
    147            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2108             MOVS     R1,#+8
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000052   0x.... 0x....      BL       GPIO_PinAFConfig
    148            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2109             MOVS     R1,#+9
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000005E   0x.... 0x....      BL       GPIO_PinAFConfig
    149            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x210A             MOVS     R1,#+10
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000006A   0x.... 0x....      BL       GPIO_PinAFConfig
    150            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x210E             MOVS     R1,#+14
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000076   0x.... 0x....      BL       GPIO_PinAFConfig
    151            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0x210F             MOVS     R1,#+15
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000082   0x.... 0x....      BL       GPIO_PinAFConfig
    152          
    153          
    154            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
    155                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
    156                                          GPIO_Pin_15;
   \   00000086   0xF64F 0x7080      MOVW     R0,#+65408
   \   0000008A   0x9000             STR      R0,[SP, #+0]
    157          
    158            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   0000008C   0x4669             MOV      R1,SP
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   00000092   0x.... 0x....      BL       GPIO_Init
    159          
    160            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0x2107             MOVS     R1,#+7
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   0000009E   0x.... 0x....      BL       GPIO_PinAFConfig
    161            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000AA   0x.... 0x....      BL       GPIO_PinAFConfig
    162            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0x2109             MOVS     R1,#+9
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000B6   0x.... 0x....      BL       GPIO_PinAFConfig
    163            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
   \   000000BA   0x2200             MOVS     R2,#+0
   \   000000BC   0x210A             MOVS     R1,#+10
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000C2   0x.... 0x....      BL       GPIO_PinAFConfig
    164            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
   \   000000C6   0x2200             MOVS     R2,#+0
   \   000000C8   0x210B             MOVS     R1,#+11
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000CE   0x.... 0x....      BL       GPIO_PinAFConfig
    165            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x210C             MOVS     R1,#+12
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000DA   0x.... 0x....      BL       GPIO_PinAFConfig
    166            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
   \   000000DE   0x2200             MOVS     R2,#+0
   \   000000E0   0x210D             MOVS     R1,#+13
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000E6   0x.... 0x....      BL       GPIO_PinAFConfig
    167            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0x210E             MOVS     R1,#+14
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000F2   0x.... 0x....      BL       GPIO_PinAFConfig
    168            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0x210F             MOVS     R1,#+15
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   000000FE   0x.... 0x....      BL       GPIO_PinAFConfig
    169          
    170            /* SRAM Address lines configuration */
    171            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    172                                          GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
    173                                          GPIO_Pin_14 | GPIO_Pin_15;
   \   00000102   0xF24F 0x003F      MOVW     R0,#+61503
   \   00000106   0x9000             STR      R0,[SP, #+0]
    174            GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   00000108   0x4669             MOV      R1,SP
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000010E   0x.... 0x....      BL       GPIO_Init
    175            GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000112   0x2200             MOVS     R2,#+0
   \   00000114   0x2100             MOVS     R1,#+0
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000011A   0x.... 0x....      BL       GPIO_PinAFConfig
    176            GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
   \   0000011E   0x2200             MOVS     R2,#+0
   \   00000120   0x2101             MOVS     R1,#+1
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   00000126   0x.... 0x....      BL       GPIO_PinAFConfig
    177            GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
   \   0000012A   0x2200             MOVS     R2,#+0
   \   0000012C   0x2102             MOVS     R1,#+2
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   00000132   0x.... 0x....      BL       GPIO_PinAFConfig
    178            GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
   \   00000136   0x2200             MOVS     R2,#+0
   \   00000138   0x2103             MOVS     R1,#+3
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000013E   0x.... 0x....      BL       GPIO_PinAFConfig
    179            GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
   \   00000142   0x2200             MOVS     R2,#+0
   \   00000144   0x2104             MOVS     R1,#+4
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000014A   0x.... 0x....      BL       GPIO_PinAFConfig
    180            GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
   \   0000014E   0x2200             MOVS     R2,#+0
   \   00000150   0x2105             MOVS     R1,#+5
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   00000156   0x.... 0x....      BL       GPIO_PinAFConfig
    181            GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
   \   0000015A   0x2200             MOVS     R2,#+0
   \   0000015C   0x210C             MOVS     R1,#+12
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   00000162   0x.... 0x....      BL       GPIO_PinAFConfig
    182            GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
   \   00000166   0x2200             MOVS     R2,#+0
   \   00000168   0x210D             MOVS     R1,#+13
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000016E   0x.... 0x....      BL       GPIO_PinAFConfig
    183            GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
   \   00000172   0x2200             MOVS     R2,#+0
   \   00000174   0x210E             MOVS     R1,#+14
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   0000017A   0x.... 0x....      BL       GPIO_PinAFConfig
    184            GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
   \   0000017E   0x2200             MOVS     R2,#+0
   \   00000180   0x210F             MOVS     R1,#+15
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x40021400
   \   00000186   0x.... 0x....      BL       GPIO_PinAFConfig
    185          
    186          
    187            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    188                                          GPIO_Pin_4 | GPIO_Pin_5;
   \   0000018A   0x203F             MOVS     R0,#+63
   \   0000018C   0x9000             STR      R0,[SP, #+0]
    189          
    190            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   0000018E   0x4669             MOV      R1,SP
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   00000194   0x.... 0x....      BL       GPIO_Init
    191          
    192            GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000198   0x2200             MOVS     R2,#+0
   \   0000019A   0x2100             MOVS     R1,#+0
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001A0   0x.... 0x....      BL       GPIO_PinAFConfig
    193            GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
   \   000001A4   0x2200             MOVS     R2,#+0
   \   000001A6   0x2101             MOVS     R1,#+1
   \   000001A8   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001AC   0x.... 0x....      BL       GPIO_PinAFConfig
    194            GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
   \   000001B0   0x2200             MOVS     R2,#+0
   \   000001B2   0x2102             MOVS     R1,#+2
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001B8   0x.... 0x....      BL       GPIO_PinAFConfig
    195            GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
   \   000001BC   0x2200             MOVS     R2,#+0
   \   000001BE   0x2103             MOVS     R1,#+3
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001C4   0x.... 0x....      BL       GPIO_PinAFConfig
    196            GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
   \   000001C8   0x2200             MOVS     R2,#+0
   \   000001CA   0x2104             MOVS     R1,#+4
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001D0   0x.... 0x....      BL       GPIO_PinAFConfig
    197            GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
   \   000001D4   0x2200             MOVS     R2,#+0
   \   000001D6   0x2105             MOVS     R1,#+5
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   000001DC   0x.... 0x....      BL       GPIO_PinAFConfig
    198          
    199            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
   \   000001E0   0xF44F 0x5060      MOV      R0,#+14336
   \   000001E4   0x9000             STR      R0,[SP, #+0]
    200          
    201            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000001E6   0x4669             MOV      R1,SP
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   000001EC   0x.... 0x....      BL       GPIO_Init
    202          
    203            GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
   \   000001F0   0x2200             MOVS     R2,#+0
   \   000001F2   0x210B             MOVS     R1,#+11
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   000001F8   0x.... 0x....      BL       GPIO_PinAFConfig
    204            GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
   \   000001FC   0x2200             MOVS     R2,#+0
   \   000001FE   0x210C             MOVS     R1,#+12
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000204   0x.... 0x....      BL       GPIO_PinAFConfig
    205            GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
   \   00000208   0x2200             MOVS     R2,#+0
   \   0000020A   0x210D             MOVS     R1,#+13
   \   0000020C   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000210   0x.... 0x....      BL       GPIO_PinAFConfig
    206          
    207            /* NOE and NWE configuration */  
    208            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
   \   00000214   0x2030             MOVS     R0,#+48
   \   00000216   0x9000             STR      R0,[SP, #+0]
    209          
    210            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000218   0x4669             MOV      R1,SP
   \   0000021A   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000021E   0x.... 0x....      BL       GPIO_Init
    211            GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
   \   00000222   0x2200             MOVS     R2,#+0
   \   00000224   0x2104             MOVS     R1,#+4
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   0000022A   0x.... 0x....      BL       GPIO_PinAFConfig
    212            GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
   \   0000022E   0x2200             MOVS     R2,#+0
   \   00000230   0x2105             MOVS     R1,#+5
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020c00
   \   00000236   0x.... 0x....      BL       GPIO_PinAFConfig
    213          
    214            /* NE3 configuration */
    215            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
   \   0000023A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000023E   0x9000             STR      R0,[SP, #+0]
    216          
    217            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   00000240   0x4669             MOV      R1,SP
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   00000246   0x.... 0x....      BL       GPIO_Init
    218            GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
   \   0000024A   0x2200             MOVS     R2,#+0
   \   0000024C   0x210C             MOVS     R1,#+12
   \   0000024E   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x40021800
   \   00000252   0x.... 0x....      BL       GPIO_PinAFConfig
    219          
    220            /* NBL0, NBL1 configuration */
    221            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
   \   00000256   0x2003             MOVS     R0,#+3
   \   00000258   0x9000             STR      R0,[SP, #+0]
    222            GPIO_Init(GPIOE, &GPIO_InitStructure); 
   \   0000025A   0x4669             MOV      R1,SP
   \   0000025C   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   00000260   0x.... 0x....      BL       GPIO_Init
    223          
    224            GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000264   0x2200             MOVS     R2,#+0
   \   00000266   0x2100             MOVS     R1,#+0
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   0000026C   0x.... 0x....      BL       GPIO_PinAFConfig
    225            GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
   \   00000270   0x2200             MOVS     R2,#+0
   \   00000272   0x2101             MOVS     R1,#+1
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40021000
   \   00000278   0x.... 0x....      BL       GPIO_PinAFConfig
    226          }
   \   0000027C   0xBD07             POP      {R0-R2,PC}       ;; return
    227          
    228          /**
    229            * @brief  Initializes the LCD.
    230            * @param  None
    231            * @retval None
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          void LCD_Init(void)
    234          { 
   \                     LCD_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    235            __IO uint32_t lcdid = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
    236            
    237          /* Configure the LCD Control pins --------------------------------------------*/
    238            LCD_CtrlLinesConfig();
   \   00000006   0x.... 0x....      BL       LCD_CtrlLinesConfig
    239          
    240          /* Configure the FSMC Parallel interface -------------------------------------*/
    241            LCD_FSMCConfig();
   \   0000000A   0x.... 0x....      BL       LCD_FSMCConfig
    242          
    243            _delay_(5); /* delay 50 ms */
   \   0000000E   0x2005             MOVS     R0,#+5
   \   00000010   0x.... 0x....      BL       delay
    244          
    245            /* Read the LCD ID */
    246            lcdid = LCD_ReadReg(0x00);  
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       LCD_ReadReg
   \   0000001A   0x9000             STR      R0,[SP, #+0]
    247          
    248            /* Check if the LCD is ILI9320 Controller */
    249            if(lcdid == 0x9320)
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0xF249 0x3120      MOVW     R1,#+37664
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xF040 0x80F8      BNE.W    ??LCD_Init_0
    250            {
    251              /* Start Initial Sequence ------------------------------------------------*/
    252              LCD_WriteReg(LCD_REG_229,0x8000); /* Set the internal vcore voltage */
   \   00000028   0xF44F 0x4100      MOV      R1,#+32768
   \   0000002C   0x20E5             MOVS     R0,#+229
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
    253              LCD_WriteReg(LCD_REG_0,  0x0001); /* Start internal OSC. */
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       LCD_WriteReg
    254              LCD_WriteReg(LCD_REG_1,  0x0100); /* set SS and SM bit */
   \   0000003A   0xF44F 0x7180      MOV      R1,#+256
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       LCD_WriteReg
    255              LCD_WriteReg(LCD_REG_2,  0x0700); /* set 1 line inversion */
   \   00000044   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x.... 0x....      BL       LCD_WriteReg
    256              LCD_WriteReg(LCD_REG_3,  0x1030); /* set GRAM write direction and BGR=1. */
   \   0000004E   0xF241 0x0130      MOVW     R1,#+4144
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0x.... 0x....      BL       LCD_WriteReg
    257              LCD_WriteReg(LCD_REG_4,  0x0000); /* Resize register */
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x2004             MOVS     R0,#+4
   \   0000005C   0x.... 0x....      BL       LCD_WriteReg
    258              LCD_WriteReg(LCD_REG_8,  0x0202); /* set the back porch and front porch */
   \   00000060   0xF240 0x2102      MOVW     R1,#+514
   \   00000064   0x2008             MOVS     R0,#+8
   \   00000066   0x.... 0x....      BL       LCD_WriteReg
    259              LCD_WriteReg(LCD_REG_9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x2009             MOVS     R0,#+9
   \   0000006E   0x.... 0x....      BL       LCD_WriteReg
    260              LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x200A             MOVS     R0,#+10
   \   00000076   0x.... 0x....      BL       LCD_WriteReg
    261              LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x200C             MOVS     R0,#+12
   \   0000007E   0x.... 0x....      BL       LCD_WriteReg
    262              LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x200D             MOVS     R0,#+13
   \   00000086   0x.... 0x....      BL       LCD_WriteReg
    263              LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x200F             MOVS     R0,#+15
   \   0000008E   0x.... 0x....      BL       LCD_WriteReg
    264          
    265              /* Power On sequence -----------------------------------------------------*/
    266              LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x2010             MOVS     R0,#+16
   \   00000096   0x.... 0x....      BL       LCD_WriteReg
    267              LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x2011             MOVS     R0,#+17
   \   0000009E   0x.... 0x....      BL       LCD_WriteReg
    268              LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x2012             MOVS     R0,#+18
   \   000000A6   0x.... 0x....      BL       LCD_WriteReg
    269              LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x2013             MOVS     R0,#+19
   \   000000AE   0x.... 0x....      BL       LCD_WriteReg
    270              _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   000000B2   0x2014             MOVS     R0,#+20
   \   000000B4   0x.... 0x....      BL       delay
    271              LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000000B8   0xF241 0x71B0      MOVW     R1,#+6064
   \   000000BC   0x2010             MOVS     R0,#+16
   \   000000BE   0x.... 0x....      BL       LCD_WriteReg
    272              LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000000C2   0xF240 0x1137      MOVW     R1,#+311
   \   000000C6   0x2011             MOVS     R0,#+17
   \   000000C8   0x.... 0x....      BL       LCD_WriteReg
    273              _delay_(5);                  /* Delay 50 ms */
   \   000000CC   0x2005             MOVS     R0,#+5
   \   000000CE   0x.... 0x....      BL       delay
    274              LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   000000D2   0xF240 0x1139      MOVW     R1,#+313
   \   000000D6   0x2012             MOVS     R0,#+18
   \   000000D8   0x.... 0x....      BL       LCD_WriteReg
    275              _delay_(5);                  /* Delay 50 ms */
   \   000000DC   0x2005             MOVS     R0,#+5
   \   000000DE   0x.... 0x....      BL       delay
    276              LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000000E2   0xF44F 0x51E8      MOV      R1,#+7424
   \   000000E6   0x2013             MOVS     R0,#+19
   \   000000E8   0x.... 0x....      BL       LCD_WriteReg
    277              LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000000EC   0x2113             MOVS     R1,#+19
   \   000000EE   0x2029             MOVS     R0,#+41
   \   000000F0   0x.... 0x....      BL       LCD_WriteReg
    278              _delay_(5);                  /* Delay 50 ms */
   \   000000F4   0x2005             MOVS     R0,#+5
   \   000000F6   0x.... 0x....      BL       delay
    279              LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x2020             MOVS     R0,#+32
   \   000000FE   0x.... 0x....      BL       LCD_WriteReg
    280              LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0x2021             MOVS     R0,#+33
   \   00000106   0x.... 0x....      BL       LCD_WriteReg
    281          
    282              /* Adjust the Gamma Curve ------------------------------------------------*/
    283              LCD_WriteReg(LCD_REG_48, 0x0007);
   \   0000010A   0x2107             MOVS     R1,#+7
   \   0000010C   0x2030             MOVS     R0,#+48
   \   0000010E   0x.... 0x....      BL       LCD_WriteReg
    284              LCD_WriteReg(LCD_REG_49, 0x0007);
   \   00000112   0x2107             MOVS     R1,#+7
   \   00000114   0x2031             MOVS     R0,#+49
   \   00000116   0x.... 0x....      BL       LCD_WriteReg
    285              LCD_WriteReg(LCD_REG_50, 0x0007);
   \   0000011A   0x2107             MOVS     R1,#+7
   \   0000011C   0x2032             MOVS     R0,#+50
   \   0000011E   0x.... 0x....      BL       LCD_WriteReg
    286              LCD_WriteReg(LCD_REG_53, 0x0007);
   \   00000122   0x2107             MOVS     R1,#+7
   \   00000124   0x2035             MOVS     R0,#+53
   \   00000126   0x.... 0x....      BL       LCD_WriteReg
    287              LCD_WriteReg(LCD_REG_54, 0x0007);
   \   0000012A   0x2107             MOVS     R1,#+7
   \   0000012C   0x2036             MOVS     R0,#+54
   \   0000012E   0x.... 0x....      BL       LCD_WriteReg
    288              LCD_WriteReg(LCD_REG_55, 0x0700);
   \   00000132   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000136   0x2037             MOVS     R0,#+55
   \   00000138   0x.... 0x....      BL       LCD_WriteReg
    289              LCD_WriteReg(LCD_REG_56, 0x0700);
   \   0000013C   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000140   0x2038             MOVS     R0,#+56
   \   00000142   0x.... 0x....      BL       LCD_WriteReg
    290              LCD_WriteReg(LCD_REG_57, 0x0700);
   \   00000146   0xF44F 0x61E0      MOV      R1,#+1792
   \   0000014A   0x2039             MOVS     R0,#+57
   \   0000014C   0x.... 0x....      BL       LCD_WriteReg
    291              LCD_WriteReg(LCD_REG_60, 0x0700);
   \   00000150   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000154   0x203C             MOVS     R0,#+60
   \   00000156   0x.... 0x....      BL       LCD_WriteReg
    292              LCD_WriteReg(LCD_REG_61, 0x1F00);
   \   0000015A   0xF44F 0x51F8      MOV      R1,#+7936
   \   0000015E   0x203D             MOVS     R0,#+61
   \   00000160   0x.... 0x....      BL       LCD_WriteReg
    293            
    294              /* Set GRAM area ---------------------------------------------------------*/
    295              LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
   \   00000164   0x2100             MOVS     R1,#+0
   \   00000166   0x2050             MOVS     R0,#+80
   \   00000168   0x.... 0x....      BL       LCD_WriteReg
    296              LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
   \   0000016C   0x21EF             MOVS     R1,#+239
   \   0000016E   0x2051             MOVS     R0,#+81
   \   00000170   0x.... 0x....      BL       LCD_WriteReg
    297              LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
   \   00000174   0x2100             MOVS     R1,#+0
   \   00000176   0x2052             MOVS     R0,#+82
   \   00000178   0x.... 0x....      BL       LCD_WriteReg
    298              LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
   \   0000017C   0xF240 0x113F      MOVW     R1,#+319
   \   00000180   0x2053             MOVS     R0,#+83
   \   00000182   0x.... 0x....      BL       LCD_WriteReg
    299              LCD_WriteReg(LCD_REG_96,  0x2700); /* Gate Scan Line */
   \   00000186   0xF44F 0x511C      MOV      R1,#+9984
   \   0000018A   0x2060             MOVS     R0,#+96
   \   0000018C   0x.... 0x....      BL       LCD_WriteReg
    300              LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
   \   00000190   0x2101             MOVS     R1,#+1
   \   00000192   0x2061             MOVS     R0,#+97
   \   00000194   0x.... 0x....      BL       LCD_WriteReg
    301              LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
   \   00000198   0x2100             MOVS     R1,#+0
   \   0000019A   0x206A             MOVS     R0,#+106
   \   0000019C   0x.... 0x....      BL       LCD_WriteReg
    302          
    303              /* Partial Display Control -----------------------------------------------*/
    304              LCD_WriteReg(LCD_REG_128, 0x0000);
   \   000001A0   0x2100             MOVS     R1,#+0
   \   000001A2   0x2080             MOVS     R0,#+128
   \   000001A4   0x.... 0x....      BL       LCD_WriteReg
    305              LCD_WriteReg(LCD_REG_129, 0x0000);
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x2081             MOVS     R0,#+129
   \   000001AC   0x.... 0x....      BL       LCD_WriteReg
    306              LCD_WriteReg(LCD_REG_130, 0x0000);
   \   000001B0   0x2100             MOVS     R1,#+0
   \   000001B2   0x2082             MOVS     R0,#+130
   \   000001B4   0x.... 0x....      BL       LCD_WriteReg
    307              LCD_WriteReg(LCD_REG_131, 0x0000);
   \   000001B8   0x2100             MOVS     R1,#+0
   \   000001BA   0x2083             MOVS     R0,#+131
   \   000001BC   0x.... 0x....      BL       LCD_WriteReg
    308              LCD_WriteReg(LCD_REG_132, 0x0000);
   \   000001C0   0x2100             MOVS     R1,#+0
   \   000001C2   0x2084             MOVS     R0,#+132
   \   000001C4   0x.... 0x....      BL       LCD_WriteReg
    309              LCD_WriteReg(LCD_REG_133, 0x0000);
   \   000001C8   0x2100             MOVS     R1,#+0
   \   000001CA   0x2085             MOVS     R0,#+133
   \   000001CC   0x.... 0x....      BL       LCD_WriteReg
    310          
    311              /* Panel Control ---------------------------------------------------------*/
    312              LCD_WriteReg(LCD_REG_144, 0x0010);
   \   000001D0   0x2110             MOVS     R1,#+16
   \   000001D2   0x2090             MOVS     R0,#+144
   \   000001D4   0x.... 0x....      BL       LCD_WriteReg
    313              LCD_WriteReg(LCD_REG_146, 0x0000);
   \   000001D8   0x2100             MOVS     R1,#+0
   \   000001DA   0x2092             MOVS     R0,#+146
   \   000001DC   0x.... 0x....      BL       LCD_WriteReg
    314              LCD_WriteReg(LCD_REG_147, 0x0003);
   \   000001E0   0x2103             MOVS     R1,#+3
   \   000001E2   0x2093             MOVS     R0,#+147
   \   000001E4   0x.... 0x....      BL       LCD_WriteReg
    315              LCD_WriteReg(LCD_REG_149, 0x0110);
   \   000001E8   0xF44F 0x7188      MOV      R1,#+272
   \   000001EC   0x2095             MOVS     R0,#+149
   \   000001EE   0x.... 0x....      BL       LCD_WriteReg
    316              LCD_WriteReg(LCD_REG_151, 0x0000);
   \   000001F2   0x2100             MOVS     R1,#+0
   \   000001F4   0x2097             MOVS     R0,#+151
   \   000001F6   0x.... 0x....      BL       LCD_WriteReg
    317              LCD_WriteReg(LCD_REG_152, 0x0000);
   \   000001FA   0x2100             MOVS     R1,#+0
   \   000001FC   0x2098             MOVS     R0,#+152
   \   000001FE   0x.... 0x....      BL       LCD_WriteReg
    318          
    319              /* Set GRAM write direction and BGR = 1 */
    320              /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    321              /* AM=1 (address is updated in vertical writing direction) */
    322              LCD_WriteReg(LCD_REG_3, 0x1018);
   \   00000202   0xF241 0x0118      MOVW     R1,#+4120
   \   00000206   0x2003             MOVS     R0,#+3
   \   00000208   0x.... 0x....      BL       LCD_WriteReg
    323          
    324              LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */  
   \   0000020C   0xF240 0x1173      MOVW     R1,#+371
   \   00000210   0x2007             MOVS     R0,#+7
   \   00000212   0x.... 0x....      BL       LCD_WriteReg
   \   00000216   0xE0FA             B.N      ??LCD_Init_1
    325            }
    326            else if(lcdid == 0x9325) /* Check if the LCD is ILI9325 Controller */
   \                     ??LCD_Init_0: (+1)
   \   00000218   0x9800             LDR      R0,[SP, #+0]
   \   0000021A   0xF249 0x3125      MOVW     R1,#+37669
   \   0000021E   0x4288             CMP      R0,R1
   \   00000220   0xF040 0x80F5      BNE.W    ??LCD_Init_1
    327            {
    328              /* Start Initial Sequence ------------------------------------------------*/
    329              LCD_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
   \   00000224   0x2101             MOVS     R1,#+1
   \   00000226   0x2000             MOVS     R0,#+0
   \   00000228   0x.... 0x....      BL       LCD_WriteReg
    330              LCD_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
   \   0000022C   0xF44F 0x7180      MOV      R1,#+256
   \   00000230   0x2001             MOVS     R0,#+1
   \   00000232   0x.... 0x....      BL       LCD_WriteReg
    331              LCD_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
   \   00000236   0xF44F 0x61E0      MOV      R1,#+1792
   \   0000023A   0x2002             MOVS     R0,#+2
   \   0000023C   0x.... 0x....      BL       LCD_WriteReg
    332              LCD_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
   \   00000240   0xF241 0x0118      MOVW     R1,#+4120
   \   00000244   0x2003             MOVS     R0,#+3
   \   00000246   0x.... 0x....      BL       LCD_WriteReg
    333              LCD_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
   \   0000024A   0x2100             MOVS     R1,#+0
   \   0000024C   0x2004             MOVS     R0,#+4
   \   0000024E   0x.... 0x....      BL       LCD_WriteReg
    334              LCD_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
   \   00000252   0xF240 0x2102      MOVW     R1,#+514
   \   00000256   0x2008             MOVS     R0,#+8
   \   00000258   0x.... 0x....      BL       LCD_WriteReg
    335              LCD_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
   \   0000025C   0x2100             MOVS     R1,#+0
   \   0000025E   0x2009             MOVS     R0,#+9
   \   00000260   0x.... 0x....      BL       LCD_WriteReg
    336              LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
   \   00000264   0x2100             MOVS     R1,#+0
   \   00000266   0x200A             MOVS     R0,#+10
   \   00000268   0x.... 0x....      BL       LCD_WriteReg
    337              LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
   \   0000026C   0x2100             MOVS     R1,#+0
   \   0000026E   0x200C             MOVS     R0,#+12
   \   00000270   0x.... 0x....      BL       LCD_WriteReg
    338              LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
   \   00000274   0x2100             MOVS     R1,#+0
   \   00000276   0x200D             MOVS     R0,#+13
   \   00000278   0x.... 0x....      BL       LCD_WriteReg
    339              LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
   \   0000027C   0x2100             MOVS     R1,#+0
   \   0000027E   0x200F             MOVS     R0,#+15
   \   00000280   0x.... 0x....      BL       LCD_WriteReg
    340          
    341              /* Power On sequence -----------------------------------------------------*/
    342              LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000284   0x2100             MOVS     R1,#+0
   \   00000286   0x2010             MOVS     R0,#+16
   \   00000288   0x.... 0x....      BL       LCD_WriteReg
    343              LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000028C   0x2100             MOVS     R1,#+0
   \   0000028E   0x2011             MOVS     R0,#+17
   \   00000290   0x.... 0x....      BL       LCD_WriteReg
    344              LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   00000294   0x2100             MOVS     R1,#+0
   \   00000296   0x2012             MOVS     R0,#+18
   \   00000298   0x.... 0x....      BL       LCD_WriteReg
    345              LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   0000029C   0x2100             MOVS     R1,#+0
   \   0000029E   0x2013             MOVS     R0,#+19
   \   000002A0   0x.... 0x....      BL       LCD_WriteReg
    346              _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
   \   000002A4   0x2014             MOVS     R0,#+20
   \   000002A6   0x.... 0x....      BL       delay
    347              LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000002AA   0xF241 0x71B0      MOVW     R1,#+6064
   \   000002AE   0x2010             MOVS     R0,#+16
   \   000002B0   0x.... 0x....      BL       LCD_WriteReg
    348              LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000002B4   0xF240 0x1137      MOVW     R1,#+311
   \   000002B8   0x2011             MOVS     R0,#+17
   \   000002BA   0x.... 0x....      BL       LCD_WriteReg
    349              _delay_(5);                       /* Delay 50 ms */
   \   000002BE   0x2005             MOVS     R0,#+5
   \   000002C0   0x.... 0x....      BL       delay
    350              LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   000002C4   0xF240 0x1139      MOVW     R1,#+313
   \   000002C8   0x2012             MOVS     R0,#+18
   \   000002CA   0x.... 0x....      BL       LCD_WriteReg
    351              _delay_(5);                       /* Delay 50 ms */
   \   000002CE   0x2005             MOVS     R0,#+5
   \   000002D0   0x.... 0x....      BL       delay
    352              LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000002D4   0xF44F 0x51E8      MOV      R1,#+7424
   \   000002D8   0x2013             MOVS     R0,#+19
   \   000002DA   0x.... 0x....      BL       LCD_WriteReg
    353              LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000002DE   0x2113             MOVS     R1,#+19
   \   000002E0   0x2029             MOVS     R0,#+41
   \   000002E2   0x.... 0x....      BL       LCD_WriteReg
    354              _delay_(5);                       /* Delay 50 ms */
   \   000002E6   0x2005             MOVS     R0,#+5
   \   000002E8   0x.... 0x....      BL       delay
    355              LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
   \   000002EC   0x2100             MOVS     R1,#+0
   \   000002EE   0x2020             MOVS     R0,#+32
   \   000002F0   0x.... 0x....      BL       LCD_WriteReg
    356              LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
   \   000002F4   0x2100             MOVS     R1,#+0
   \   000002F6   0x2021             MOVS     R0,#+33
   \   000002F8   0x.... 0x....      BL       LCD_WriteReg
    357          
    358              /* Adjust the Gamma Curve (ILI9325)---------------------------------------*/
    359              LCD_WriteReg(LCD_REG_48, 0x0007);
   \   000002FC   0x2107             MOVS     R1,#+7
   \   000002FE   0x2030             MOVS     R0,#+48
   \   00000300   0x.... 0x....      BL       LCD_WriteReg
    360              LCD_WriteReg(LCD_REG_49, 0x0302);
   \   00000304   0xF240 0x3102      MOVW     R1,#+770
   \   00000308   0x2031             MOVS     R0,#+49
   \   0000030A   0x.... 0x....      BL       LCD_WriteReg
    361              LCD_WriteReg(LCD_REG_50, 0x0105);
   \   0000030E   0xF240 0x1105      MOVW     R1,#+261
   \   00000312   0x2032             MOVS     R0,#+50
   \   00000314   0x.... 0x....      BL       LCD_WriteReg
    362              LCD_WriteReg(LCD_REG_53, 0x0206);
   \   00000318   0xF240 0x2106      MOVW     R1,#+518
   \   0000031C   0x2035             MOVS     R0,#+53
   \   0000031E   0x.... 0x....      BL       LCD_WriteReg
    363              LCD_WriteReg(LCD_REG_54, 0x0808);
   \   00000322   0xF640 0x0108      MOVW     R1,#+2056
   \   00000326   0x2036             MOVS     R0,#+54
   \   00000328   0x.... 0x....      BL       LCD_WriteReg
    364              LCD_WriteReg(LCD_REG_55, 0x0206);
   \   0000032C   0xF240 0x2106      MOVW     R1,#+518
   \   00000330   0x2037             MOVS     R0,#+55
   \   00000332   0x.... 0x....      BL       LCD_WriteReg
    365              LCD_WriteReg(LCD_REG_56, 0x0504);
   \   00000336   0xF240 0x5104      MOVW     R1,#+1284
   \   0000033A   0x2038             MOVS     R0,#+56
   \   0000033C   0x.... 0x....      BL       LCD_WriteReg
    366              LCD_WriteReg(LCD_REG_57, 0x0007);
   \   00000340   0x2107             MOVS     R1,#+7
   \   00000342   0x2039             MOVS     R0,#+57
   \   00000344   0x.... 0x....      BL       LCD_WriteReg
    367              LCD_WriteReg(LCD_REG_60, 0x0105);
   \   00000348   0xF240 0x1105      MOVW     R1,#+261
   \   0000034C   0x203C             MOVS     R0,#+60
   \   0000034E   0x.... 0x....      BL       LCD_WriteReg
    368              LCD_WriteReg(LCD_REG_61, 0x0808);
   \   00000352   0xF640 0x0108      MOVW     R1,#+2056
   \   00000356   0x203D             MOVS     R0,#+61
   \   00000358   0x.... 0x....      BL       LCD_WriteReg
    369          
    370              /* Set GRAM area ---------------------------------------------------------*/
    371              LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
   \   0000035C   0x2100             MOVS     R1,#+0
   \   0000035E   0x2050             MOVS     R0,#+80
   \   00000360   0x.... 0x....      BL       LCD_WriteReg
    372              LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
   \   00000364   0x21EF             MOVS     R1,#+239
   \   00000366   0x2051             MOVS     R0,#+81
   \   00000368   0x.... 0x....      BL       LCD_WriteReg
    373              LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
   \   0000036C   0x2100             MOVS     R1,#+0
   \   0000036E   0x2052             MOVS     R0,#+82
   \   00000370   0x.... 0x....      BL       LCD_WriteReg
    374              LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
   \   00000374   0xF240 0x113F      MOVW     R1,#+319
   \   00000378   0x2053             MOVS     R0,#+83
   \   0000037A   0x.... 0x....      BL       LCD_WriteReg
    375          
    376              LCD_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
   \   0000037E   0xF44F 0x4127      MOV      R1,#+42752
   \   00000382   0x2060             MOVS     R0,#+96
   \   00000384   0x.... 0x....      BL       LCD_WriteReg
    377              LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
   \   00000388   0x2101             MOVS     R1,#+1
   \   0000038A   0x2061             MOVS     R0,#+97
   \   0000038C   0x.... 0x....      BL       LCD_WriteReg
    378              LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
   \   00000390   0x2100             MOVS     R1,#+0
   \   00000392   0x206A             MOVS     R0,#+106
   \   00000394   0x.... 0x....      BL       LCD_WriteReg
    379          
    380              /* Partial Display Control -----------------------------------------------*/
    381              LCD_WriteReg(LCD_REG_128, 0x0000);
   \   00000398   0x2100             MOVS     R1,#+0
   \   0000039A   0x2080             MOVS     R0,#+128
   \   0000039C   0x.... 0x....      BL       LCD_WriteReg
    382              LCD_WriteReg(LCD_REG_129, 0x0000);
   \   000003A0   0x2100             MOVS     R1,#+0
   \   000003A2   0x2081             MOVS     R0,#+129
   \   000003A4   0x.... 0x....      BL       LCD_WriteReg
    383              LCD_WriteReg(LCD_REG_130, 0x0000);
   \   000003A8   0x2100             MOVS     R1,#+0
   \   000003AA   0x2082             MOVS     R0,#+130
   \   000003AC   0x.... 0x....      BL       LCD_WriteReg
    384              LCD_WriteReg(LCD_REG_131, 0x0000);
   \   000003B0   0x2100             MOVS     R1,#+0
   \   000003B2   0x2083             MOVS     R0,#+131
   \   000003B4   0x.... 0x....      BL       LCD_WriteReg
    385              LCD_WriteReg(LCD_REG_132, 0x0000);
   \   000003B8   0x2100             MOVS     R1,#+0
   \   000003BA   0x2084             MOVS     R0,#+132
   \   000003BC   0x.... 0x....      BL       LCD_WriteReg
    386              LCD_WriteReg(LCD_REG_133, 0x0000);
   \   000003C0   0x2100             MOVS     R1,#+0
   \   000003C2   0x2085             MOVS     R0,#+133
   \   000003C4   0x.... 0x....      BL       LCD_WriteReg
    387          
    388              /* Panel Control ---------------------------------------------------------*/
    389              LCD_WriteReg(LCD_REG_144, 0x0010);
   \   000003C8   0x2110             MOVS     R1,#+16
   \   000003CA   0x2090             MOVS     R0,#+144
   \   000003CC   0x.... 0x....      BL       LCD_WriteReg
    390              LCD_WriteReg(LCD_REG_146, 0x0000);
   \   000003D0   0x2100             MOVS     R1,#+0
   \   000003D2   0x2092             MOVS     R0,#+146
   \   000003D4   0x.... 0x....      BL       LCD_WriteReg
    391              LCD_WriteReg(LCD_REG_147, 0x0003);
   \   000003D8   0x2103             MOVS     R1,#+3
   \   000003DA   0x2093             MOVS     R0,#+147
   \   000003DC   0x.... 0x....      BL       LCD_WriteReg
    392              LCD_WriteReg(LCD_REG_149, 0x0110);
   \   000003E0   0xF44F 0x7188      MOV      R1,#+272
   \   000003E4   0x2095             MOVS     R0,#+149
   \   000003E6   0x.... 0x....      BL       LCD_WriteReg
    393              LCD_WriteReg(LCD_REG_151, 0x0000);
   \   000003EA   0x2100             MOVS     R1,#+0
   \   000003EC   0x2097             MOVS     R0,#+151
   \   000003EE   0x.... 0x....      BL       LCD_WriteReg
    394              LCD_WriteReg(LCD_REG_152, 0x0000);
   \   000003F2   0x2100             MOVS     R1,#+0
   \   000003F4   0x2098             MOVS     R0,#+152
   \   000003F6   0x.... 0x....      BL       LCD_WriteReg
    395          
    396              /* set GRAM write direction and BGR = 1 */
    397              /* I/D=00 (Horizontal : increment, Vertical : decrement) */
    398              /* AM=1 (address is updated in vertical writing direction) */
    399              LCD_WriteReg(LCD_REG_3, 0x1018);
   \   000003FA   0xF241 0x0118      MOVW     R1,#+4120
   \   000003FE   0x2003             MOVS     R0,#+3
   \   00000400   0x.... 0x....      BL       LCD_WriteReg
    400          
    401              LCD_WriteReg(LCD_REG_7, 0x0133); /* 262K color and display ON */ 
   \   00000404   0xF240 0x1133      MOVW     R1,#+307
   \   00000408   0x2007             MOVS     R0,#+7
   \   0000040A   0x.... 0x....      BL       LCD_WriteReg
    402            }
    403            LCD_SetFont(&LCD_DEFAULT_FONT);
   \                     ??LCD_Init_1: (+1)
   \   0000040E   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000412   0x.... 0x....      BL       LCD_SetFont
    404          }
   \   00000416   0xBD01             POP      {R0,PC}          ;; return
    405          
    406          /**
    407            * @brief  Sets the LCD Text and Background colors.
    408            * @param  _TextColor: specifies the Text Color.
    409            * @param  _BackColor: specifies the Background Color.
    410            * @retval None
    411            */

   \                                 In section .text, align 2, keep-with-next
    412          void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
    413          {
   \                     LCD_SetColors: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
    414            TextColor = _TextColor; 
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable23_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    415            BackColor = _BackColor;
   \   0000000C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable23_2
   \   00000014   0x8008             STRH     R0,[R1, #+0]
    416          }
   \   00000016   0xB002             ADD      SP,SP,#+8
   \   00000018   0x4770             BX       LR               ;; return
    417          
    418          /**
    419            * @brief  Gets the LCD Text and Background colors.
    420            * @param  _TextColor: pointer to the variable that will contain the Text 
    421                      Color.
    422            * @param  _BackColor: pointer to the variable that will contain the Background 
    423                      Color.
    424            * @retval None
    425            */

   \                                 In section .text, align 2, keep-with-next
    426          void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
    427          {
    428            *_TextColor = TextColor; *_BackColor = BackColor;
   \                     LCD_GetColors: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable23_1
   \   00000004   0x8812             LDRH     R2,[R2, #+0]
   \   00000006   0x8002             STRH     R2,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    429          }
   \   00000010   0x4770             BX       LR               ;; return
    430          
    431          /**
    432            * @brief  Sets the Text color.
    433            * @param  Color: specifies the Text color code RGB(5-6-5).
    434            * @retval None
    435            */

   \                                 In section .text, align 2, keep-with-next
    436          void LCD_SetTextColor(__IO uint16_t Color)
    437          {
   \                     LCD_SetTextColor: (+1)
   \   00000000   0xB401             PUSH     {R0}
    438            TextColor = Color;
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable23_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    439          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    440          
    441          
    442          /**
    443            * @brief  Sets the Background color.
    444            * @param  Color: specifies the Background color code RGB(5-6-5).
    445            * @retval None
    446            */

   \                                 In section .text, align 2, keep-with-next
    447          void LCD_SetBackColor(__IO uint16_t Color)
    448          {
   \                     LCD_SetBackColor: (+1)
   \   00000000   0xB401             PUSH     {R0}
    449            BackColor = Color;
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable23_2
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    450          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    451          
    452          /**
    453            * @brief  Sets the Text Font.
    454            * @param  fonts: specifies the font to be used.
    455            * @retval None
    456            */

   \                                 In section .text, align 2, keep-with-next
    457          void LCD_SetFont(sFONT *fonts)
    458          {
    459            LCD_Currentfonts = fonts;
   \                     LCD_SetFont: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable24
   \   00000004   0x6008             STR      R0,[R1, #+0]
    460          }
   \   00000006   0x4770             BX       LR               ;; return
    461          
    462          /**
    463            * @brief  Gets the Text Font.
    464            * @param  None.
    465            * @retval the used font.
    466            */

   \                                 In section .text, align 2, keep-with-next
    467          sFONT *LCD_GetFont(void)
    468          {
    469            return LCD_Currentfonts;
   \                     LCD_GetFont: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    470          }
    471          
    472          /**
    473            * @brief  Clears the selected line.
    474            * @param  Line: the Line to be cleared.
    475            *   This parameter can be one of the following values:
    476            *     @arg Linex: where x can be 0..n
    477            * @retval None
    478            */

   \                                 In section .text, align 2, keep-with-next
    479          void LCD_ClearLine(uint16_t Line)
    480          {
   \                     LCD_ClearLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    481            uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
   \   00000004   0xF240 0x153F      MOVW     R5,#+319
   \   00000008   0xE00B             B.N      ??LCD_ClearLine_0
    482            /* Send the string character by character on lCD */
    483            while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
    484            {
    485              /* Display one character on LCD */
    486              LCD_DisplayChar(Line, refcolumn, ' ');
   \                     ??LCD_ClearLine_1: (+1)
   \   0000000A   0x2220             MOVS     R2,#+32
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x.... 0x....      BL       LCD_DisplayChar
    487              /* Decrement the column position by 16 */
    488              refcolumn -= LCD_Currentfonts->Width;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable24
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x8880             LDRH     R0,[R0, #+4]
   \   00000020   0x1A2D             SUBS     R5,R5,R0
    489            }
   \                     ??LCD_ClearLine_0: (+1)
   \   00000022   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   0x1C68             ADDS     R0,R5,#+1
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable24
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x8889             LDRH     R1,[R1, #+4]
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xDAEA             BGE.N    ??LCD_ClearLine_1
    490          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    491          
    492          /**
    493            * @brief  Clears the hole LCD.
    494            * @param  Color: the color of the background.
    495            * @retval None
    496            */

   \                                 In section .text, align 2, keep-with-next
    497          void LCD_Clear(uint16_t Color)
    498          {
   \                     LCD_Clear: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    499            uint32_t index = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    500            
    501            LCD_SetCursor(0x00, 0x013F); 
   \   00000006   0xF240 0x113F      MOVW     R1,#+319
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       LCD_SetCursor
    502            LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000010   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    503            for(index = 0; index < 76800; index++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE003             B.N      ??LCD_Clear_0
    504            {
    505              LCD->LCD_RAM = Color;
   \                     ??LCD_Clear_1: (+1)
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable24_1  ;; 0x68000002
   \   0000001C   0x800C             STRH     R4,[R1, #+0]
    506            }  
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \                     ??LCD_Clear_0: (+1)
   \   00000020   0xF5B0 0x3F96      CMP      R0,#+76800
   \   00000024   0xD3F8             BCC.N    ??LCD_Clear_1
    507          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    508          
    509          /**
    510            * @brief  Sets the cursor position.
    511            * @param  Xpos: specifies the X position.
    512            * @param  Ypos: specifies the Y position. 
    513            * @retval None
    514            */

   \                                 In section .text, align 2, keep-with-next
    515          void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
    516          {
   \                     LCD_SetCursor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    517            LCD_WriteReg(LCD_REG_32, Xpos);
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x2020             MOVS     R0,#+32
   \   0000000A   0x.... 0x....      BL       LCD_WriteReg
    518            LCD_WriteReg(LCD_REG_33, Ypos);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x2021             MOVS     R0,#+33
   \   00000014   0x.... 0x....      BL       LCD_WriteReg
    519          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    520          
    521          /**
    522            * @brief  Draws a character on LCD.
    523            * @param  Xpos: the Line where to display the character shape.
    524            * @param  Ypos: start column address.
    525            * @param  c: pointer to the character data.
    526            * @retval None
    527            */

   \                                 In section .text, align 2, keep-with-next
    528          void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
    529          {
   \                     LCD_DrawChar: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    530            uint32_t index = 0, i = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    531            uint16_t  Xaddress = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    532            Xaddress = Xpos;
   \   00000010   0x0006             MOVS     R6,R0
    533            
    534            LCD_SetCursor(Xaddress, Ypos);
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0x.... 0x....      BL       LCD_SetCursor
    535            
    536            for(index = 0; index < LCD_Currentfonts->Height; index++)
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0xE007             B.N      ??LCD_DrawChar_0
    537            {
    538              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    539              for(i = 0; i < LCD_Currentfonts->Width; i++)
    540              {
    541            
    542                if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
    543                  (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
    544          
    545                {
    546                  LCD_WriteRAM(BackColor);
    547                }
    548                else
    549                {
    550                  LCD_WriteRAM(TextColor);
    551                } 
    552              }
    553              Xaddress++;
   \                     ??LCD_DrawChar_1: (+1)
   \   00000022   0x1C76             ADDS     R6,R6,#+1
    554              LCD_SetCursor(Xaddress, Ypos);
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x.... 0x....      BL       LCD_SetCursor
   \   00000030   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawChar_0: (+1)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable24
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x88C0             LDRH     R0,[R0, #+6]
   \   0000003A   0x4287             CMP      R7,R0
   \   0000003C   0xD23B             BCS.N    ??LCD_DrawChar_2
   \   0000003E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   00000042   0xF05F 0x0800      MOVS     R8,#+0
   \   00000046   0xE006             B.N      ??LCD_DrawChar_3
   \                     ??LCD_DrawChar_4: (+1)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000004C   0x8800             LDRH     R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawChar_5: (+1)
   \   00000052   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_DrawChar_3: (+1)
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable24
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x8880             LDRH     R0,[R0, #+4]
   \   0000005E   0x4580             CMP      R8,R0
   \   00000060   0xD2DF             BCS.N    ??LCD_DrawChar_1
   \   00000062   0xF835 0x0017      LDRH     R0,[R5, R7, LSL #+1]
   \   00000066   0x2180             MOVS     R1,#+128
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable24
   \   0000006C   0x6812             LDR      R2,[R2, #+0]
   \   0000006E   0x8892             LDRH     R2,[R2, #+4]
   \   00000070   0x230C             MOVS     R3,#+12
   \   00000072   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000076   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000078   0x00D2             LSLS     R2,R2,#+3
   \   0000007A   0x4091             LSLS     R1,R1,R2
   \   0000007C   0xFA51 0xF108      ASRS     R1,R1,R8
   \   00000080   0x4208             TST      R0,R1
   \   00000082   0xD105             BNE.N    ??LCD_DrawChar_6
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable24
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x8880             LDRH     R0,[R0, #+4]
   \   0000008C   0x280D             CMP      R0,#+13
   \   0000008E   0xDB0C             BLT.N    ??LCD_DrawChar_7
   \                     ??LCD_DrawChar_6: (+1)
   \   00000090   0xF835 0x0017      LDRH     R0,[R5, R7, LSL #+1]
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0xFA11 0xF108      LSLS     R1,R1,R8
   \   0000009A   0x4208             TST      R0,R1
   \   0000009C   0xD1D4             BNE.N    ??LCD_DrawChar_4
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable24
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x8880             LDRH     R0,[R0, #+4]
   \   000000A6   0x280D             CMP      R0,#+13
   \   000000A8   0xDBCE             BLT.N    ??LCD_DrawChar_4
   \                     ??LCD_DrawChar_7: (+1)
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   000000AE   0x8800             LDRH     R0,[R0, #+0]
   \   000000B0   0x.... 0x....      BL       LCD_WriteRAM
   \   000000B4   0xE7CD             B.N      ??LCD_DrawChar_5
    555            }
    556          }
   \                     ??LCD_DrawChar_2: (+1)
   \   000000B6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    557          
    558          /**
    559            * @brief  Displays one character (16dots width, 24dots height).
    560            * @param  Line: the Line where to display the character shape .
    561            *   This parameter can be one of the following values:
    562            *     @arg Linex: where x can be 0..9
    563            * @param  Column: start column address.
    564            * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
    565            * @retval None
    566            */

   \                                 In section .text, align 2, keep-with-next
    567          void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
    568          {
   \                     LCD_DisplayChar: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    569            Ascii -= 32;
   \   00000002   0x3A20             SUBS     R2,R2,#+32
    570            LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable24
   \   00000008   0x681B             LDR      R3,[R3, #+0]
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable24
   \   00000012   0x6824             LDR      R4,[R4, #+0]
   \   00000014   0x88E4             LDRH     R4,[R4, #+6]
   \   00000016   0x4362             MULS     R2,R4,R2
   \   00000018   0xEB03 0x0242      ADD      R2,R3,R2, LSL #+1
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       LCD_DrawChar
    571          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    572          
    573          /**
    574            * @brief  Displays a maximum of 20 char on the LCD.
    575            * @param  Line: the Line where to display the character shape .
    576            *   This parameter can be one of the following values:
    577            *     @arg Linex: where x can be 0..9
    578            * @param  *ptr: pointer to string to display on LCD.
    579            * @retval None
    580            */

   \                                 In section .text, align 2, keep-with-next
    581          void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
    582          {
   \                     LCD_DisplayStringLine: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    583            uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
   \   00000006   0xF240 0x153F      MOVW     R5,#+319
   \   0000000A   0xE00C             B.N      ??LCD_DisplayStringLine_0
    584          
    585            /* Send the string character by character on lCD */
    586            while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
    587            {
    588              /* Display one character on LCD */
    589              LCD_DisplayChar(Line, refcolumn, *ptr);
   \                     ??LCD_DisplayStringLine_1: (+1)
   \   0000000C   0x7832             LDRB     R2,[R6, #+0]
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      BL       LCD_DisplayChar
    590              /* Decrement the column position by 16 */
    591              refcolumn -= LCD_Currentfonts->Width;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable24
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x8880             LDRH     R0,[R0, #+4]
   \   00000022   0x1A2D             SUBS     R5,R5,R0
    592              /* Point on the next character */
    593              ptr++;
   \   00000024   0x1C76             ADDS     R6,R6,#+1
    594            }
   \                     ??LCD_DisplayStringLine_0: (+1)
   \   00000026   0x7830             LDRB     R0,[R6, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD008             BEQ.N    ??LCD_DisplayStringLine_2
   \   0000002C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0x1C68             ADDS     R0,R5,#+1
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable24
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x8889             LDRH     R1,[R1, #+4]
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xDAE6             BGE.N    ??LCD_DisplayStringLine_1
    595          }
   \                     ??LCD_DisplayStringLine_2: (+1)
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    596          
    597          /**
    598            * @brief  Sets a display window
    599            * @param  Xpos: specifies the X bottom left position.
    600            * @param  Ypos: specifies the Y bottom left position.
    601            * @param  Height: display window height.
    602            * @param  Width: display window width.
    603            * @retval None
    604            */

   \                                 In section .text, align 2, keep-with-next
    605          void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
    606          {
   \                     LCD_SetDisplayWindow: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
    607            /* Horizontal GRAM Start Address */
    608            if(Xpos >= Height)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x0011             MOVS     R1,R2
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD307             BCC.N    ??LCD_SetDisplayWindow_0
    609            {
    610              LCD_WriteReg(LCD_REG_80, (Xpos - Height + 1));
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x1AA0             SUBS     R0,R4,R2
   \   0000001A   0x1C41             ADDS     R1,R0,#+1
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x2050             MOVS     R0,#+80
   \   00000020   0x.... 0x....      BL       LCD_WriteReg
   \   00000024   0xE003             B.N      ??LCD_SetDisplayWindow_1
    611            }
    612            else
    613            {
    614              LCD_WriteReg(LCD_REG_80, 0);
   \                     ??LCD_SetDisplayWindow_0: (+1)
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2050             MOVS     R0,#+80
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
    615            }
    616            /* Horizontal GRAM End Address */
    617            LCD_WriteReg(LCD_REG_81, Xpos);
   \                     ??LCD_SetDisplayWindow_1: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x2051             MOVS     R0,#+81
   \   00000034   0x.... 0x....      BL       LCD_WriteReg
    618            /* Vertical GRAM Start Address */
    619            if(Ypos >= Width)
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x0031             MOVS     R1,R6
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD306             BCC.N    ??LCD_SetDisplayWindow_2
    620            {
    621              LCD_WriteReg(LCD_REG_82, (Ypos - Width + 1));
   \   00000044   0x1BA8             SUBS     R0,R5,R6
   \   00000046   0x1C41             ADDS     R1,R0,#+1
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x2052             MOVS     R0,#+82
   \   0000004C   0x.... 0x....      BL       LCD_WriteReg
   \   00000050   0xE003             B.N      ??LCD_SetDisplayWindow_3
    622            }  
    623            else
    624            {
    625              LCD_WriteReg(LCD_REG_82, 0);
   \                     ??LCD_SetDisplayWindow_2: (+1)
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x2052             MOVS     R0,#+82
   \   00000056   0x.... 0x....      BL       LCD_WriteReg
    626            }
    627            /* Vertical GRAM End Address */
    628            LCD_WriteReg(LCD_REG_83, Ypos);
   \                     ??LCD_SetDisplayWindow_3: (+1)
   \   0000005A   0x0029             MOVS     R1,R5
   \   0000005C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005E   0x2053             MOVS     R0,#+83
   \   00000060   0x.... 0x....      BL       LCD_WriteReg
    629            LCD_SetCursor(Xpos, Ypos);
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0x.... 0x....      BL       LCD_SetCursor
    630          }
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
    631          
    632          /**
    633            * @brief  Disables LCD Window mode.
    634            * @param  None
    635            * @retval None
    636            */

   \                                 In section .text, align 2, keep-with-next
    637          void LCD_WindowModeDisable(void)
    638          {
   \                     LCD_WindowModeDisable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    639            LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   \   00000002   0xF44F 0x73A0      MOV      R3,#+320
   \   00000006   0x22F0             MOVS     R2,#+240
   \   00000008   0xF240 0x113F      MOVW     R1,#+319
   \   0000000C   0x20EF             MOVS     R0,#+239
   \   0000000E   0x.... 0x....      BL       LCD_SetDisplayWindow
    640            LCD_WriteReg(LCD_REG_3, 0x1018);    
   \   00000012   0xF241 0x0118      MOVW     R1,#+4120
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x.... 0x....      BL       LCD_WriteReg
    641          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    642          
    643          /**
    644            * @brief  Displays a line.
    645            * @param Xpos: specifies the X position.
    646            * @param Ypos: specifies the Y position.
    647            * @param Length: line length.
    648            * @param Direction: line direction.
    649            *   This parameter can be one of the following values: Vertical or Horizontal.
    650            * @retval None
    651            */

   \                                 In section .text, align 2, keep-with-next
    652          void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
    653          {
   \                     LCD_DrawLine: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    654            uint32_t i = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    655            
    656            LCD_SetCursor(Xpos, Ypos);
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x.... 0x....      BL       LCD_SetCursor
    657            if(Direction == LCD_DIR_HORIZONTAL)
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0x2F00             CMP      R7,#+0
   \   00000020   0xD10E             BNE.N    ??LCD_DrawLine_0
    658            {
    659              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000022   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    660              for(i = 0; i < Length; i++)
   \   00000026   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??LCD_DrawLine_1: (+1)
   \   0000002A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   0x45B0             CMP      R8,R6
   \   0000002E   0xD21D             BCS.N    ??LCD_DrawLine_2
    661              {
    662                LCD_WriteRAM(TextColor);
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0x.... 0x....      BL       LCD_WriteRAM
    663              }
   \   0000003A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000003E   0xE7F4             B.N      ??LCD_DrawLine_1
    664            }
    665            else
    666            {
    667              for(i = 0; i < Length; i++)
   \                     ??LCD_DrawLine_0: (+1)
   \   00000040   0xF05F 0x0800      MOVS     R8,#+0
   \   00000044   0xE00F             B.N      ??LCD_DrawLine_3
    668              {
    669                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \                     ??LCD_DrawLine_4: (+1)
   \   00000046   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    670                LCD_WriteRAM(TextColor);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       LCD_WriteRAM
    671                Xpos++;
   \   00000054   0x1C64             ADDS     R4,R4,#+1
    672                LCD_SetCursor(Xpos, Ypos);
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x.... 0x....      BL       LCD_SetCursor
    673              }
   \   00000062   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_DrawLine_3: (+1)
   \   00000066   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000068   0x45B0             CMP      R8,R6
   \   0000006A   0xD3EC             BCC.N    ??LCD_DrawLine_4
    674            }
    675          }
   \                     ??LCD_DrawLine_2: (+1)
   \   0000006C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    676          
    677          /**
    678            * @brief  Displays a rectangle.
    679            * @param  Xpos: specifies the X position.
    680            * @param  Ypos: specifies the Y position.
    681            * @param  Height: display rectangle height.
    682            * @param  Width: display rectangle width.
    683            * @retval None
    684            */

   \                                 In section .text, align 2, keep-with-next
    685          void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
    686          {
   \                     LCD_DrawRect: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    687            LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x003A             MOVS     R2,R7
   \   0000000E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x.... 0x....      BL       LCD_DrawLine
    688            LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x003A             MOVS     R2,R7
   \   00000020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0xFA54 0xF086      UXTAB    R0,R4,R6
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x.... 0x....      BL       LCD_DrawLine
    689            
    690            LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
   \   00000030   0x2301             MOVS     R3,#+1
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0x0032             MOVS     R2,R6
   \   00000036   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0x.... 0x....      BL       LCD_DrawLine
    691            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
   \   00000044   0x2301             MOVS     R3,#+1
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0x1BE8             SUBS     R0,R5,R7
   \   0000004E   0x1C41             ADDS     R1,R0,#+1
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x.... 0x....      BL       LCD_DrawLine
    692          }
   \   0000005A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    693          
    694          /**
    695            * @brief  Displays a circle.
    696            * @param  Xpos: specifies the X position.
    697            * @param  Ypos: specifies the Y position.
    698            * @param  Radius
    699            * @retval None
    700            */

   \                                 In section .text, align 2, keep-with-next
    701          void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
    702          {
   \                     LCD_DrawCircle: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    703            int32_t  D;/* Decision Variable */ 
    704            uint32_t  CurX;/* Current X Value */
    705            uint32_t  CurY;/* Current Y Value */ 
    706            
    707            D = 3 - (Radius << 1);
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x0070             LSLS     R0,R6,#+1
   \   0000000E   0xF1D0 0x0803      RSBS     R8,R0,#+3
    708            CurX = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    709            CurY = Radius;
   \   00000014   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000016   0xE006             B.N      ??LCD_DrawCircle_0
    710            
    711            while (CurX <= CurY)
    712            {
    713              LCD_SetCursor(Xpos + CurX, Ypos + CurY);
    714              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    715              LCD_WriteRAM(TextColor);
    716              LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    717              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    718              LCD_WriteRAM(TextColor);
    719              LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    720              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    721              LCD_WriteRAM(TextColor);
    722              LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    723              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    724              LCD_WriteRAM(TextColor);
    725              LCD_SetCursor(Xpos + CurY, Ypos + CurX);
    726              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    727              LCD_WriteRAM(TextColor);
    728              LCD_SetCursor(Xpos + CurY, Ypos - CurX);
    729              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    730              LCD_WriteRAM(TextColor);
    731              LCD_SetCursor(Xpos - CurY, Ypos + CurX);
    732              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    733              LCD_WriteRAM(TextColor);
    734              LCD_SetCursor(Xpos - CurY, Ypos - CurX);
    735              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    736              LCD_WriteRAM(TextColor);
    737              if (D < 0)
    738              { 
    739                D += (CurX << 2) + 6;
    740              }
    741              else
    742              {
    743                D += ((CurX - CurY) << 2) + 10;
   \                     ??LCD_DrawCircle_1: (+1)
   \   00000018   0x1BB8             SUBS     R0,R7,R6
   \   0000001A   0xEB18 0x0080      ADDS     R0,R8,R0, LSL #+2
   \   0000001E   0xF110 0x080A      ADDS     R8,R0,#+10
    744                CurY--;
   \   00000022   0x1E76             SUBS     R6,R6,#+1
    745              }
    746              CurX++;
   \                     ??LCD_DrawCircle_2: (+1)
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawCircle_0: (+1)
   \   00000026   0x42BE             CMP      R6,R7
   \   00000028   0xD36F             BCC.N    ??LCD_DrawCircle_3
   \   0000002A   0x1971             ADDS     R1,R6,R5
   \   0000002C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   0x1938             ADDS     R0,R7,R4
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x.... 0x....      BL       LCD_SetCursor
   \   00000036   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       LCD_WriteRAM
   \   00000044   0x1BA9             SUBS     R1,R5,R6
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0x1938             ADDS     R0,R7,R4
   \   0000004A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004C   0x.... 0x....      BL       LCD_SetCursor
   \   00000050   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       LCD_WriteRAM
   \   0000005E   0x1971             ADDS     R1,R6,R5
   \   00000060   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   0x1BE0             SUBS     R0,R4,R7
   \   00000064   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000066   0x.... 0x....      BL       LCD_SetCursor
   \   0000006A   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000072   0x8800             LDRH     R0,[R0, #+0]
   \   00000074   0x.... 0x....      BL       LCD_WriteRAM
   \   00000078   0x1BA9             SUBS     R1,R5,R6
   \   0000007A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007C   0x1BE0             SUBS     R0,R4,R7
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0x.... 0x....      BL       LCD_SetCursor
   \   00000084   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000008C   0x8800             LDRH     R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       LCD_WriteRAM
   \   00000092   0x1979             ADDS     R1,R7,R5
   \   00000094   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000096   0x1930             ADDS     R0,R6,R4
   \   00000098   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009A   0x.... 0x....      BL       LCD_SetCursor
   \   0000009E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000A6   0x8800             LDRH     R0,[R0, #+0]
   \   000000A8   0x.... 0x....      BL       LCD_WriteRAM
   \   000000AC   0x1BE9             SUBS     R1,R5,R7
   \   000000AE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B0   0x1930             ADDS     R0,R6,R4
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0x.... 0x....      BL       LCD_SetCursor
   \   000000B8   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       LCD_WriteRAM
   \   000000C6   0x1979             ADDS     R1,R7,R5
   \   000000C8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CA   0x1BA0             SUBS     R0,R4,R6
   \   000000CC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CE   0x.... 0x....      BL       LCD_SetCursor
   \   000000D2   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0x.... 0x....      BL       LCD_WriteRAM
   \   000000E0   0x1BE9             SUBS     R1,R5,R7
   \   000000E2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E4   0x1BA0             SUBS     R0,R4,R6
   \   000000E6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E8   0x.... 0x....      BL       LCD_SetCursor
   \   000000EC   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000F4   0x8800             LDRH     R0,[R0, #+0]
   \   000000F6   0x.... 0x....      BL       LCD_WriteRAM
   \   000000FA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000FE   0xD58B             BPL.N    ??LCD_DrawCircle_1
   \   00000100   0xEB18 0x0087      ADDS     R0,R8,R7, LSL #+2
   \   00000104   0xF110 0x0806      ADDS     R8,R0,#+6
   \   00000108   0xE78C             B.N      ??LCD_DrawCircle_2
    747            }
    748          }
   \                     ??LCD_DrawCircle_3: (+1)
   \   0000010A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    749          
    750          /**
    751            * @brief  Displays a mono-color picture.
    752            * @param  Pict: pointer to the picture array.
    753            * @retval None
    754            */

   \                                 In section .text, align 2, keep-with-next
    755          void LCD_DrawMonoPict(const uint32_t *Pict)
    756          {
   \                     LCD_DrawMonoPict: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    757            uint32_t index = 0, i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
    758            LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
   \   00000008   0xF240 0x113F      MOVW     R1,#+319
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCD_SetCursor
    759            LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000012   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    760            for(index = 0; index < 2400; index++)
   \   00000016   0x2500             MOVS     R5,#+0
   \   00000018   0xE000             B.N      ??LCD_DrawMonoPict_0
   \                     ??LCD_DrawMonoPict_1: (+1)
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_DrawMonoPict_0: (+1)
   \   0000001C   0xF5B5 0x6F16      CMP      R5,#+2400
   \   00000020   0xD214             BCS.N    ??LCD_DrawMonoPict_2
    761            {
    762              for(i = 0; i < 32; i++)
   \   00000022   0x2600             MOVS     R6,#+0
   \   00000024   0xE005             B.N      ??LCD_DrawMonoPict_3
    763              {
    764                if((Pict[index] & (1 << i)) == 0x00)
    765                {
    766                  LCD_WriteRAM(BackColor);
    767                }
    768                else
    769                {
    770                  LCD_WriteRAM(TextColor);
   \                     ??LCD_DrawMonoPict_4: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       LCD_WriteRAM
    771                }
   \                     ??LCD_DrawMonoPict_5: (+1)
   \   00000030   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_DrawMonoPict_3: (+1)
   \   00000032   0x2E20             CMP      R6,#+32
   \   00000034   0xD2F1             BCS.N    ??LCD_DrawMonoPict_1
   \   00000036   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \   0000003A   0x40F0             LSRS     R0,R0,R6
   \   0000003C   0x07C0             LSLS     R0,R0,#+31
   \   0000003E   0xD4F2             BMI.N    ??LCD_DrawMonoPict_4
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0x.... 0x....      BL       LCD_WriteRAM
   \   0000004A   0xE7F1             B.N      ??LCD_DrawMonoPict_5
    772              }
    773            }
    774          }
   \                     ??LCD_DrawMonoPict_2: (+1)
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    775          
    776          /**
    777            * @brief  Displays a bitmap picture loaded in the internal Flash.
    778            * @param  BmpAddress: Bmp picture address in the internal Flash.
    779            * @retval None
    780            */

   \                                 In section .text, align 2, keep-with-next
    781          void LCD_WriteBMP(uint32_t BmpAddress)
    782          {
   \                     LCD_WriteBMP: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    783            uint32_t index = 0, size = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
    784            /* Read bitmap size */
    785            size = *(__IO uint16_t *) (BmpAddress + 2);
   \   00000008   0x1CA0             ADDS     R0,R4,#+2
   \   0000000A   0x8806             LDRH     R6,[R0, #+0]
   \   0000000C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
    786            size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
   \   0000000E   0x1D20             ADDS     R0,R4,#+4
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0xEA56 0x4600      ORRS     R6,R6,R0, LSL #+16
    787            /* Get bitmap data address offset */
    788            index = *(__IO uint16_t *) (BmpAddress + 10);
   \   00000018   0xF114 0x000A      ADDS     R0,R4,#+10
   \   0000001C   0x8805             LDRH     R5,[R0, #+0]
   \   0000001E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
    789            index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
   \   00000020   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0xEA55 0x4500      ORRS     R5,R5,R0, LSL #+16
    790            size = (size - index)/2;
   \   0000002C   0x1B70             SUBS     R0,R6,R5
   \   0000002E   0x0846             LSRS     R6,R0,#+1
    791            BmpAddress += index;
   \   00000030   0x192C             ADDS     R4,R5,R4
    792            /* Set GRAM write direction and BGR = 1 */
    793            /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
    794            /* AM=1 (address is updated in vertical writing direction) */
    795            LCD_WriteReg(LCD_REG_3, 0x1008);
   \   00000032   0xF241 0x0108      MOVW     R1,#+4104
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       LCD_WriteReg
    796           
    797            LCD_WriteRAM_Prepare();
   \   0000003C   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    798           
    799            for(index = 0; index < size; index++)
   \   00000040   0x2500             MOVS     R5,#+0
   \   00000042   0xE004             B.N      ??LCD_WriteBMP_0
    800            {
    801              LCD_WriteRAM(*(__IO uint16_t *)BmpAddress);
   \                     ??LCD_WriteBMP_1: (+1)
   \   00000044   0x8820             LDRH     R0,[R4, #+0]
   \   00000046   0x.... 0x....      BL       LCD_WriteRAM
    802              BmpAddress += 2;
   \   0000004A   0x1CA4             ADDS     R4,R4,#+2
    803            }
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_WriteBMP_0: (+1)
   \   0000004E   0x42B5             CMP      R5,R6
   \   00000050   0xD3F8             BCC.N    ??LCD_WriteBMP_1
    804           
    805            /* Set GRAM write direction and BGR = 1 */
    806            /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
    807            /* AM = 1 (address is updated in vertical writing direction) */
    808            LCD_WriteReg(LCD_REG_3, 0x1018);
   \   00000052   0xF241 0x0118      MOVW     R1,#+4120
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x.... 0x....      BL       LCD_WriteReg
    809          }
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    810          
    811          /**
    812            * @brief  Displays a full rectangle.
    813            * @param  Xpos: specifies the X position.
    814            * @param  Ypos: specifies the Y position.
    815            * @param  Height: rectangle height.
    816            * @param  Width: rectangle width.
    817            * @retval None
    818            */

   \                                 In section .text, align 2, keep-with-next
    819          void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
    820          {
   \                     LCD_DrawFullRect: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    821            LCD_SetTextColor(TextColor);
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x.... 0x....      BL       LCD_SetTextColor
    822          
    823            LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x0032             MOVS     R2,R6
   \   00000018   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0x.... 0x....      BL       LCD_DrawLine
    824            LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x0032             MOVS     R2,R6
   \   0000002A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x1938             ADDS     R0,R7,R4
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0x.... 0x....      BL       LCD_DrawLine
    825            
    826            LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
   \   00000038   0x2301             MOVS     R3,#+1
   \   0000003A   0x003A             MOVS     R2,R7
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x0029             MOVS     R1,R5
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   0x.... 0x....      BL       LCD_DrawLine
    827            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
   \   0000004A   0x2301             MOVS     R3,#+1
   \   0000004C   0x003A             MOVS     R2,R7
   \   0000004E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000050   0x1BA8             SUBS     R0,R5,R6
   \   00000052   0x1C41             ADDS     R1,R0,#+1
   \   00000054   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0x.... 0x....      BL       LCD_DrawLine
    828          
    829            Width -= 2;
   \   0000005E   0x1EB6             SUBS     R6,R6,#+2
    830            Height--;
   \   00000060   0x1E7F             SUBS     R7,R7,#+1
    831            Ypos--;
   \   00000062   0x1E6D             SUBS     R5,R5,#+1
    832          
    833            LCD_SetTextColor(BackColor);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x.... 0x....      BL       LCD_SetTextColor
   \   0000006E   0xE009             B.N      ??LCD_DrawFullRect_0
    834          
    835            while(Height--)
    836            {
    837              LCD_DrawLine(++Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);    
   \                     ??LCD_DrawFullRect_1: (+1)
   \   00000070   0x1C64             ADDS     R4,R4,#+1
   \   00000072   0x2300             MOVS     R3,#+0
   \   00000074   0x0032             MOVS     R2,R6
   \   00000076   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000078   0x0029             MOVS     R1,R5
   \   0000007A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0x.... 0x....      BL       LCD_DrawLine
    838            }
   \                     ??LCD_DrawFullRect_0: (+1)
   \   00000084   0x0038             MOVS     R0,R7
   \   00000086   0x1E47             SUBS     R7,R0,#+1
   \   00000088   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD1F0             BNE.N    ??LCD_DrawFullRect_1
    839          
    840            LCD_SetTextColor(TextColor);
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000092   0x8800             LDRH     R0,[R0, #+0]
   \   00000094   0x.... 0x....      BL       LCD_SetTextColor
    841          }
   \   00000098   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    842          
    843          /**
    844            * @brief  Displays a full circle.
    845            * @param  Xpos: specifies the X position.
    846            * @param  Ypos: specifies the Y position.
    847            * @param  Radius
    848            * @retval None
    849            */

   \                                 In section .text, align 2, keep-with-next
    850          void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
    851          {
   \                     LCD_DrawFullCircle: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    852            int32_t  D;    /* Decision Variable */ 
    853            uint32_t  CurX;/* Current X Value */
    854            uint32_t  CurY;/* Current Y Value */ 
    855            
    856            D = 3 - (Radius << 1);
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x0070             LSLS     R0,R6,#+1
   \   0000000E   0xF1D0 0x0903      RSBS     R9,R0,#+3
    857          
    858            CurX = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    859            CurY = Radius;
   \   00000014   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000016   0x46B0             MOV      R8,R6
    860            
    861            LCD_SetTextColor(BackColor);
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       LCD_SetTextColor
   \   00000022   0xE008             B.N      ??LCD_DrawFullCircle_0
    862          
    863            while (CurX <= CurY)
    864            {
    865              if(CurY > 0) 
    866              {
    867                LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
    868                LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
    869              }
    870          
    871              if(CurX > 0) 
    872              {
    873                LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
    874                LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
    875              }
    876              if (D < 0)
    877              { 
    878                D += (CurX << 2) + 6;
    879              }
    880              else
    881              {
    882                D += ((CurX - CurY) << 2) + 10;
   \                     ??LCD_DrawFullCircle_1: (+1)
   \   00000024   0xEBB7 0x0008      SUBS     R0,R7,R8
   \   00000028   0xEB19 0x0080      ADDS     R0,R9,R0, LSL #+2
   \   0000002C   0xF110 0x090A      ADDS     R9,R0,#+10
    883                CurY--;
   \   00000030   0xF1B8 0x0801      SUBS     R8,R8,#+1
    884              }
    885              CurX++;
   \                     ??LCD_DrawFullCircle_2: (+1)
   \   00000034   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawFullCircle_0: (+1)
   \   00000036   0x45B8             CMP      R8,R7
   \   00000038   0xD33C             BCC.N    ??LCD_DrawFullCircle_3
   \   0000003A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000003E   0xD017             BEQ.N    ??LCD_DrawFullCircle_4
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   0x0042             LSLS     R2,R0,#+1
   \   00000048   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004A   0xEB18 0x0105      ADDS     R1,R8,R5
   \   0000004E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   0x1BE0             SUBS     R0,R4,R7
   \   00000052   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000054   0x.... 0x....      BL       LCD_DrawLine
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x4640             MOV      R0,R8
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x0042             LSLS     R2,R0,#+1
   \   00000060   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000062   0xEB18 0x0105      ADDS     R1,R8,R5
   \   00000066   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   0x1938             ADDS     R0,R7,R4
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0x.... 0x....      BL       LCD_DrawLine
   \                     ??LCD_DrawFullCircle_4: (+1)
   \   00000070   0x2F00             CMP      R7,#+0
   \   00000072   0xD017             BEQ.N    ??LCD_DrawFullCircle_5
   \   00000074   0x2300             MOVS     R3,#+0
   \   00000076   0x0038             MOVS     R0,R7
   \   00000078   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   0x0042             LSLS     R2,R0,#+1
   \   0000007C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007E   0x1979             ADDS     R1,R7,R5
   \   00000080   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   0xEBB4 0x0008      SUBS     R0,R4,R8
   \   00000086   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000088   0x.... 0x....      BL       LCD_DrawLine
   \   0000008C   0x2300             MOVS     R3,#+0
   \   0000008E   0x0038             MOVS     R0,R7
   \   00000090   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000092   0x0042             LSLS     R2,R0,#+1
   \   00000094   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000096   0x1979             ADDS     R1,R7,R5
   \   00000098   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000009A   0xEB18 0x0004      ADDS     R0,R8,R4
   \   0000009E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A0   0x.... 0x....      BL       LCD_DrawLine
   \                     ??LCD_DrawFullCircle_5: (+1)
   \   000000A4   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000A8   0xD5BC             BPL.N    ??LCD_DrawFullCircle_1
   \   000000AA   0xEB19 0x0087      ADDS     R0,R9,R7, LSL #+2
   \   000000AE   0xF110 0x0906      ADDS     R9,R0,#+6
   \   000000B2   0xE7BF             B.N      ??LCD_DrawFullCircle_2
    886            }
    887          
    888            LCD_SetTextColor(TextColor);
   \                     ??LCD_DrawFullCircle_3: (+1)
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   000000B8   0x8800             LDRH     R0,[R0, #+0]
   \   000000BA   0x.... 0x....      BL       LCD_SetTextColor
    889            LCD_DrawCircle(Xpos, Ypos, Radius);
   \   000000BE   0x0032             MOVS     R2,R6
   \   000000C0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000C2   0x0029             MOVS     R1,R5
   \   000000C4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C6   0x0020             MOVS     R0,R4
   \   000000C8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CA   0x.... 0x....      BL       LCD_DrawCircle
    890          }
   \   000000CE   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    891          
    892          /**
    893            * @brief  Displays an uni-line (between two points).
    894            * @param  x1: specifies the point 1 x position.
    895            * @param  y1: specifies the point 1 y position.
    896            * @param  x2: specifies the point 2 x position.
    897            * @param  y2: specifies the point 2 y position.
    898            * @retval None
    899            */

   \                                 In section .text, align 2, keep-with-next
    900          void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
    901          {
   \                     LCD_DrawUniLine: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
    902            int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
   \   00000006   0xF05F 0x0E00      MOVS     LR,#+0
   \   0000000A   0xF05F 0x0B00      MOVS     R11,#+0
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x2700             MOVS     R7,#+0
    903            yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
   \   00000016   0xF05F 0x0800      MOVS     R8,#+0
   \   0000001A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xF8AD 0x4000      STRH     R4,[SP, #+0]
   \   00000024   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000028   0x2400             MOVS     R4,#+0
   \   0000002A   0xF8AD 0x4004      STRH     R4,[SP, #+4]
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0xF8AD 0x4002      STRH     R4,[SP, #+2]
    904            curpixel = 0;
   \   00000034   0xF05F 0x0B00      MOVS     R11,#+0
    905            
    906            deltax = ABS(x2 - x1);        /* The difference between the x's */
   \   00000038   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x1A14             SUBS     R4,R2,R0
   \   0000003E   0x2C01             CMP      R4,#+1
   \   00000040   0xDB02             BLT.N    ??LCD_DrawUniLine_0
   \   00000042   0xEBB2 0x0E00      SUBS     LR,R2,R0
   \   00000046   0xE001             B.N      ??LCD_DrawUniLine_1
   \                     ??LCD_DrawUniLine_0: (+1)
   \   00000048   0xEBB0 0x0E02      SUBS     LR,R0,R2
    907            deltay = ABS(y2 - y1);        /* The difference between the y's */
   \                     ??LCD_DrawUniLine_1: (+1)
   \   0000004C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   0x1A5C             SUBS     R4,R3,R1
   \   00000052   0x2C01             CMP      R4,#+1
   \   00000054   0xDB02             BLT.N    ??LCD_DrawUniLine_2
   \   00000056   0xEBB3 0x0B01      SUBS     R11,R3,R1
   \   0000005A   0xE001             B.N      ??LCD_DrawUniLine_3
   \                     ??LCD_DrawUniLine_2: (+1)
   \   0000005C   0xEBB1 0x0B03      SUBS     R11,R1,R3
    908            x = x1;                       /* Start x off at the first pixel */
   \                     ??LCD_DrawUniLine_3: (+1)
   \   00000060   0x0004             MOVS     R4,R0
   \   00000062   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
    909            y = y1;                       /* Start y off at the first pixel */
   \   00000064   0x000D             MOVS     R5,R1
   \   00000066   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
    910            
    911            if (x2 >= x1)                 /* The x-values are increasing */
   \   00000068   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0x4282             CMP      R2,R0
   \   0000006E   0xD302             BCC.N    ??LCD_DrawUniLine_4
    912            {
    913              xinc1 = 1;
   \   00000070   0x2601             MOVS     R6,#+1
    914              xinc2 = 1;
   \   00000072   0x2701             MOVS     R7,#+1
   \   00000074   0xE003             B.N      ??LCD_DrawUniLine_5
    915            }
    916            else                          /* The x-values are decreasing */
    917            {
    918              xinc1 = -1;
   \                     ??LCD_DrawUniLine_4: (+1)
   \   00000076   0xF05F 0x36FF      MOVS     R6,#-1
    919              xinc2 = -1;
   \   0000007A   0xF05F 0x37FF      MOVS     R7,#-1
    920            }
    921            
    922            if (y2 >= y1)                 /* The y-values are increasing */
   \                     ??LCD_DrawUniLine_5: (+1)
   \   0000007E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000080   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   0x428B             CMP      R3,R1
   \   00000084   0xD304             BCC.N    ??LCD_DrawUniLine_6
    923            {
    924              yinc1 = 1;
   \   00000086   0xF05F 0x0801      MOVS     R8,#+1
    925              yinc2 = 1;
   \   0000008A   0xF05F 0x0901      MOVS     R9,#+1
   \   0000008E   0xE003             B.N      ??LCD_DrawUniLine_7
    926            }
    927            else                          /* The y-values are decreasing */
    928            {
    929              yinc1 = -1;
   \                     ??LCD_DrawUniLine_6: (+1)
   \   00000090   0xF05F 0x38FF      MOVS     R8,#-1
    930              yinc2 = -1;
   \   00000094   0xF05F 0x39FF      MOVS     R9,#-1
    931            }
    932            
    933            if (deltax >= deltay)         /* There is at least one x-value for every y-value */
   \                     ??LCD_DrawUniLine_7: (+1)
   \   00000098   0x4670             MOV      R0,LR
   \   0000009A   0x4659             MOV      R1,R11
   \   0000009C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000009E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xDB0E             BLT.N    ??LCD_DrawUniLine_8
    934            {
    935              xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
   \   000000A4   0x2600             MOVS     R6,#+0
    936              yinc2 = 0;                  /* Don't change the y for every iteration */
   \   000000A6   0xF05F 0x0900      MOVS     R9,#+0
    937              den = deltax;
   \   000000AA   0xF8AD 0xE000      STRH     LR,[SP, #+0]
    938              num = deltax / 2;
   \   000000AE   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000000B2   0x2002             MOVS     R0,#+2
   \   000000B4   0xFB9E 0xFAF0      SDIV     R10,LR,R0
    939              numadd = deltay;
   \   000000B8   0xF8AD 0xB004      STRH     R11,[SP, #+4]
    940              numpixels = deltax;         /* There are more x-values than y-values */
   \   000000BC   0xF8AD 0xE002      STRH     LR,[SP, #+2]
   \   000000C0   0xE00D             B.N      ??LCD_DrawUniLine_9
    941            }
    942            else                          /* There is at least one y-value for every x-value */
    943            {
    944              xinc2 = 0;                  /* Don't change the x for every iteration */
   \                     ??LCD_DrawUniLine_8: (+1)
   \   000000C2   0x2700             MOVS     R7,#+0
    945              yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
   \   000000C4   0xF05F 0x0800      MOVS     R8,#+0
    946              den = deltay;
   \   000000C8   0xF8AD 0xB000      STRH     R11,[SP, #+0]
    947              num = deltay / 2;
   \   000000CC   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   000000D0   0x2002             MOVS     R0,#+2
   \   000000D2   0xFB9B 0xFAF0      SDIV     R10,R11,R0
    948              numadd = deltax;
   \   000000D6   0xF8AD 0xE004      STRH     LR,[SP, #+4]
    949              numpixels = deltay;         /* There are more y-values than x-values */
   \   000000DA   0xF8AD 0xB002      STRH     R11,[SP, #+2]
    950            }
    951            
    952            for (curpixel = 0; curpixel <= numpixels; curpixel++)
   \                     ??LCD_DrawUniLine_9: (+1)
   \   000000DE   0xF05F 0x0B00      MOVS     R11,#+0
   \   000000E2   0xE01B             B.N      ??LCD_DrawUniLine_10
    953            {
    954              PutPixel(x, y);             /* Draw the current pixel */
   \                     ??LCD_DrawUniLine_11: (+1)
   \   000000E4   0x0029             MOVS     R1,R5
   \   000000E6   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000EC   0x.... 0x....      BL       PutPixel
    955              num += numadd;              /* Increase the numerator by the top of the fraction */
   \   000000F0   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000F4   0xEB10 0x0A0A      ADDS     R10,R0,R10
    956              if (num >= den)             /* Check if numerator >= denominator */
   \   000000F8   0x4650             MOV      R0,R10
   \   000000FA   0xF9BD 0x1000      LDRSH    R1,[SP, #+0]
   \   000000FE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000100   0x4288             CMP      R0,R1
   \   00000102   0xDB06             BLT.N    ??LCD_DrawUniLine_12
    957              {
    958                num -= den;               /* Calculate the new numerator value */
   \   00000104   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000108   0xEBBA 0x0A00      SUBS     R10,R10,R0
    959                x += xinc1;               /* Change the x as appropriate */
   \   0000010C   0x1934             ADDS     R4,R6,R4
    960                y += yinc1;               /* Change the y as appropriate */
   \   0000010E   0xEB18 0x0505      ADDS     R5,R8,R5
    961              }
    962              x += xinc2;                 /* Change the x as appropriate */
   \                     ??LCD_DrawUniLine_12: (+1)
   \   00000112   0x193C             ADDS     R4,R7,R4
    963              y += yinc2;                 /* Change the y as appropriate */
   \   00000114   0xEB19 0x0505      ADDS     R5,R9,R5
    964            }
   \   00000118   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??LCD_DrawUniLine_10: (+1)
   \   0000011C   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \   00000120   0x4659             MOV      R1,R11
   \   00000122   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000124   0x4288             CMP      R0,R1
   \   00000126   0xDADD             BGE.N    ??LCD_DrawUniLine_11
    965          }
   \   00000128   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    966          
    967          /**
    968            * @brief  Displays an poly-line (between many points).
    969            * @param  Points: pointer to the points array.
    970            * @param  PointCount: Number of points.
    971            * @retval None
    972            */

   \                                 In section .text, align 2, keep-with-next
    973          void LCD_PolyLine(pPoint Points, uint16_t PointCount)
    974          {
   \                     LCD_PolyLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    975            int16_t X = 0, Y = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x2100             MOVS     R1,#+0
    976          
    977            if(PointCount < 2)
   \   0000000A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000C   0x2D02             CMP      R5,#+2
   \   0000000E   0xDA0E             BGE.N    ??LCD_PolyLine_0
    978            {
    979              return;
   \   00000010   0xE011             B.N      ??LCD_PolyLine_1
    980            }
    981          
    982            while(--PointCount)
    983            {
    984              X = Points->X;
   \                     ??LCD_PolyLine_2: (+1)
   \   00000012   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
    985              Y = Points->Y;
   \   00000016   0xF9B4 0x1002      LDRSH    R1,[R4, #+2]
    986              Points++;
   \   0000001A   0x1D24             ADDS     R4,R4,#+4
    987              LCD_DrawUniLine(X, Y, Points->X, Points->Y);
   \   0000001C   0x8862             LDRH     R2,[R4, #+2]
   \   0000001E   0x0013             MOVS     R3,R2
   \   00000020   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   0x8822             LDRH     R2,[R4, #+0]
   \   00000024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       LCD_DrawUniLine
    988            }
   \                     ??LCD_PolyLine_0: (+1)
   \   0000002E   0x1E6D             SUBS     R5,R5,#+1
   \   00000030   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xD1ED             BNE.N    ??LCD_PolyLine_2
    989          }
   \                     ??LCD_PolyLine_1: (+1)
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    990          
    991          /**
    992            * @brief  Displays an relative poly-line (between many points).
    993            * @param  Points: pointer to the points array.
    994            * @param  PointCount: Number of points.
    995            * @param  Closed: specifies if the draw is closed or not.
    996            *           1: closed, 0 : not closed.
    997            * @retval None
    998            */

   \                                 In section .text, align 2, keep-with-next
    999          static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
   1000          {
   \                     LCD_PolyLineRelativeClosed: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   1001            int16_t X = 0, Y = 0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000000E   0x2700             MOVS     R7,#+0
   1002            pPoint First = Points;
   \   00000010   0x4646             MOV      R6,R8
   1003          
   1004            if(PointCount < 2)
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xDB2E             BLT.N    ??LCD_PolyLineRelativeClosed_0
   1005            {
   1006              return;
   1007            }  
   1008            X = Points->X;
   \                     ??LCD_PolyLineRelativeClosed_1: (+1)
   \   00000018   0xF9B8 0x9000      LDRSH    R9,[R8, #+0]
   1009            Y = Points->Y;
   \   0000001C   0xF9B8 0x7002      LDRSH    R7,[R8, #+2]
   \   00000020   0xE017             B.N      ??LCD_PolyLineRelativeClosed_2
   1010            while(--PointCount)
   1011            {
   1012              Points++;
   \                     ??LCD_PolyLineRelativeClosed_3: (+1)
   \   00000022   0xF118 0x0804      ADDS     R8,R8,#+4
   1013              LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
   \   00000026   0xF9B8 0x0002      LDRSH    R0,[R8, #+2]
   \   0000002A   0x19C3             ADDS     R3,R0,R7
   \   0000002C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002E   0xF9B8 0x0000      LDRSH    R0,[R8, #+0]
   \   00000032   0xEB10 0x0209      ADDS     R2,R0,R9
   \   00000036   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003C   0x4648             MOV      R0,R9
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0x.... 0x....      BL       LCD_DrawUniLine
   1014              X = X + Points->X;
   \   00000044   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000048   0xEB10 0x0909      ADDS     R9,R0,R9
   1015              Y = Y + Points->Y;
   \   0000004C   0xF8B8 0x0002      LDRH     R0,[R8, #+2]
   \   00000050   0x19C7             ADDS     R7,R0,R7
   1016            }
   \                     ??LCD_PolyLineRelativeClosed_2: (+1)
   \   00000052   0x1E64             SUBS     R4,R4,#+1
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD1E3             BNE.N    ??LCD_PolyLineRelativeClosed_3
   1017            if(Closed)
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0x2D00             CMP      R5,#+0
   \   0000005E   0xD00A             BEQ.N    ??LCD_PolyLineRelativeClosed_4
   1018            {
   1019              LCD_DrawUniLine(First->X, First->Y, X, Y);
   \   00000060   0x003B             MOVS     R3,R7
   \   00000062   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000064   0x464A             MOV      R2,R9
   \   00000066   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000068   0x8870             LDRH     R0,[R6, #+2]
   \   0000006A   0x0001             MOVS     R1,R0
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0x8830             LDRH     R0,[R6, #+0]
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0x.... 0x....      BL       LCD_DrawUniLine
   1020            }  
   1021          }
   \                     ??LCD_PolyLineRelativeClosed_4: (+1)
   \                     ??LCD_PolyLineRelativeClosed_0: (+1)
   \   00000076   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   1022          
   1023          /**
   1024            * @brief  Displays a closed poly-line (between many points).
   1025            * @param  Points: pointer to the points array.
   1026            * @param  PointCount: Number of points.
   1027            * @retval None
   1028            */

   \                                 In section .text, align 2, keep-with-next
   1029          void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
   1030          {
   \                     LCD_ClosedPolyLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1031            LCD_PolyLine(Points, PointCount);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       LCD_PolyLine
   1032            LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000016   0xF830 0x0C02      LDRH     R0,[R0, #-2]
   \   0000001A   0x0003             MOVS     R3,R0
   \   0000001C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000020   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000024   0xF830 0x0C04      LDRH     R0,[R0, #-4]
   \   00000028   0x0002             MOVS     R2,R0
   \   0000002A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   0x8860             LDRH     R0,[R4, #+2]
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x8820             LDRH     R0,[R4, #+0]
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x.... 0x....      BL       LCD_DrawUniLine
   1033          }
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1034          
   1035          /**
   1036            * @brief  Displays a relative poly-line (between many points).
   1037            * @param  Points: pointer to the points array.
   1038            * @param  PointCount: Number of points.
   1039            * @retval None
   1040            */

   \                                 In section .text, align 2, keep-with-next
   1041          void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
   1042          {
   \                     LCD_PolyLineRelative: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1043            LCD_PolyLineRelativeClosed(Points, PointCount, 0);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x.... 0x....      BL       LCD_PolyLineRelativeClosed
   1044          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1045          
   1046          /**
   1047            * @brief  Displays a closed relative poly-line (between many points).
   1048            * @param  Points: pointer to the points array.
   1049            * @param  PointCount: Number of points.
   1050            * @retval None
   1051            */

   \                                 In section .text, align 2, keep-with-next
   1052          void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
   1053          {
   \                     LCD_ClosedPolyLineRelative: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1054            LCD_PolyLineRelativeClosed(Points, PointCount, 1);
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x.... 0x....      BL       LCD_PolyLineRelativeClosed
   1055          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1056          
   1057          
   1058          /**
   1059            * @brief  Displays a  full poly-line (between many points).
   1060            * @param  Points: pointer to the points array.
   1061            * @param  PointCount: Number of points.
   1062            * @retval None
   1063            */

   \                                 In section .text, align 2, keep-with-next
   1064          void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
   1065          {
   \                     LCD_FillPolyLine: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB0E6             SUB      SP,SP,#+408
   \   00000006   0x0004             MOVS     R4,R0
   1066            /*  public-domain code by Darel Rex Finley, 2007 */
   1067            uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x2700             MOVS     R7,#+0
   1068            j = 0, swap = 0;
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   \   00000014   0x2000             MOVS     R0,#+0
   1069            uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
   \   00000016   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000001A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0xF05F 0x0B00      MOVS     R11,#+0
   1070          
   1071            IMAGE_LEFT = IMAGE_RIGHT = Points->X;
   \   00000024   0xF8B4 0x9000      LDRH     R9,[R4, #+0]
   \   00000028   0x46CA             MOV      R10,R9
   1072            IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
   \   0000002A   0xF8B4 0xB002      LDRH     R11,[R4, #+2]
   \   0000002E   0x465E             MOV      R6,R11
   1073          
   1074            for(i = 1; i < PointCount; i++)
   \   00000030   0x2701             MOVS     R7,#+1
   \   00000032   0xE023             B.N      ??LCD_FillPolyLine_0
   1075            {
   1076              pixelX = POLY_X(i);
   \                     ??LCD_FillPolyLine_1: (+1)
   \   00000034   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000036   0xEB04 0x0087      ADD      R0,R4,R7, LSL #+2
   \   0000003A   0x8840             LDRH     R0,[R0, #+2]
   1077              if(pixelX < IMAGE_LEFT)
   \   0000003C   0x0001             MOVS     R1,R0
   \   0000003E   0x4652             MOV      R2,R10
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000044   0x4291             CMP      R1,R2
   \   00000046   0xD200             BCS.N    ??LCD_FillPolyLine_2
   1078              {
   1079                IMAGE_LEFT = pixelX;
   \   00000048   0x4682             MOV      R10,R0
   1080              }
   1081              if(pixelX > IMAGE_RIGHT)
   \                     ??LCD_FillPolyLine_2: (+1)
   \   0000004A   0x4649             MOV      R1,R9
   \   0000004C   0x0002             MOVS     R2,R0
   \   0000004E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000052   0x4291             CMP      R1,R2
   \   00000054   0xD200             BCS.N    ??LCD_FillPolyLine_3
   1082              {
   1083                IMAGE_RIGHT = pixelX;
   \   00000056   0x4681             MOV      R9,R0
   1084              }
   1085              
   1086              pixelY = POLY_Y(i);
   \                     ??LCD_FillPolyLine_3: (+1)
   \   00000058   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005A   0xF834 0x5027      LDRH     R5,[R4, R7, LSL #+2]
   1087              if(pixelY < IMAGE_TOP)
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x0031             MOVS     R1,R6
   \   00000062   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000064   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD200             BCS.N    ??LCD_FillPolyLine_4
   1088              { 
   1089                IMAGE_TOP = pixelY;
   \   0000006A   0x002E             MOVS     R6,R5
   1090              }
   1091              if(pixelY > IMAGE_BOTTOM)
   \                     ??LCD_FillPolyLine_4: (+1)
   \   0000006C   0x4658             MOV      R0,R11
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD200             BCS.N    ??LCD_FillPolyLine_5
   1092              {
   1093                IMAGE_BOTTOM = pixelY;
   \   00000078   0x46AB             MOV      R11,R5
   1094              }
   1095            }
   \                     ??LCD_FillPolyLine_5: (+1)
   \   0000007A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_0: (+1)
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0xF8BD 0x1198      LDRH     R1,[SP, #+408]
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x4288             CMP      R0,R1
   \   00000086   0xD3D5             BCC.N    ??LCD_FillPolyLine_1
   1096            
   1097            LCD_SetTextColor(BackColor);  
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000008C   0x8800             LDRH     R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       LCD_SetTextColor
   1098          
   1099            /*  Loop through the rows of the image. */
   1100            for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
   \   00000092   0x0035             MOVS     R5,R6
   \   00000094   0xE068             B.N      ??LCD_FillPolyLine_6
   1101            {  
   1102              /* Build a list of nodes. */
   1103              nodes = 0; j = PointCount-1;
   1104          
   1105              for (i = 0; i < PointCount; i++) 
   1106              {
   1107                if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
   1108                    ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
   1109                {
   1110                  nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
   1111                }
   1112                j = i; 
   1113              }
   1114            
   1115              /* Sort the nodes, via a simple "Bubble" sort. */
   1116              i = 0;
   1117              while (i < nodes-1) 
   1118              {
   1119                if (nodeX[i]>nodeX[i+1]) 
   1120                {
   1121                  swap = nodeX[i]; 
   1122                  nodeX[i] = nodeX[i+1]; 
   1123                  nodeX[i+1] = swap; 
   1124                  if(i)
   1125                  {
   1126                    i--; 
   1127                  }
   1128                }
   1129                else 
   1130                {
   1131                  i++;
   1132                }
   1133              }
   1134            
   1135              /*  Fill the pixels between node pairs. */
   1136              for (i = 0; i < nodes; i+=2) 
   1137              {
   1138                if(nodeX[i] >= IMAGE_RIGHT) 
   1139                {
   1140                  break;
   1141                }
   1142                if(nodeX[i+1] > IMAGE_LEFT) 
   \                     ??LCD_FillPolyLine_7: (+1)
   \   00000096   0x4650             MOV      R0,R10
   \   00000098   0xA902             ADD      R1,SP,#+8
   \   0000009A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000009C   0xEB01 0x0147      ADD      R1,R1,R7, LSL #+1
   \   000000A0   0x8849             LDRH     R1,[R1, #+2]
   \   000000A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD24F             BCS.N    ??LCD_FillPolyLine_8
   1143                {
   1144                  if (nodeX[i] < IMAGE_LEFT)
   \   000000A8   0xA802             ADD      R0,SP,#+8
   \   000000AA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000AC   0xF830 0x0017      LDRH     R0,[R0, R7, LSL #+1]
   \   000000B0   0x4651             MOV      R1,R10
   \   000000B2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B4   0x4288             CMP      R0,R1
   \   000000B6   0xD203             BCS.N    ??LCD_FillPolyLine_9
   1145                  {
   1146                    nodeX[i]=IMAGE_LEFT;
   \   000000B8   0xA802             ADD      R0,SP,#+8
   \   000000BA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000BC   0xF820 0xA017      STRH     R10,[R0, R7, LSL #+1]
   1147                  }
   1148                  if(nodeX[i+1] > IMAGE_RIGHT)
   \                     ??LCD_FillPolyLine_9: (+1)
   \   000000C0   0x4648             MOV      R0,R9
   \   000000C2   0xA902             ADD      R1,SP,#+8
   \   000000C4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C6   0xEB01 0x0147      ADD      R1,R1,R7, LSL #+1
   \   000000CA   0x8849             LDRH     R1,[R1, #+2]
   \   000000CC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xD205             BCS.N    ??LCD_FillPolyLine_10
   1149                  {
   1150                    nodeX[i+1] = IMAGE_RIGHT;
   \   000000D2   0xA802             ADD      R0,SP,#+8
   \   000000D4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D6   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   000000DA   0xF8A0 0x9002      STRH     R9,[R0, #+2]
   1151                  }
   1152                  LCD_SetTextColor(BackColor);
   \                     ??LCD_FillPolyLine_10: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   000000E2   0x8800             LDRH     R0,[R0, #+0]
   \   000000E4   0x.... 0x....      BL       LCD_SetTextColor
   1153                  LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
   \   000000E8   0x2300             MOVS     R3,#+0
   \   000000EA   0xA802             ADD      R0,SP,#+8
   \   000000EC   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EE   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   000000F2   0x8840             LDRH     R0,[R0, #+2]
   \   000000F4   0xA902             ADD      R1,SP,#+8
   \   000000F6   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F8   0xF831 0x1017      LDRH     R1,[R1, R7, LSL #+1]
   \   000000FC   0x1A42             SUBS     R2,R0,R1
   \   000000FE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000100   0xA802             ADD      R0,SP,#+8
   \   00000102   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000104   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   00000108   0x8841             LDRH     R1,[R0, #+2]
   \   0000010A   0x0028             MOVS     R0,R5
   \   0000010C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010E   0x.... 0x....      BL       LCD_DrawLine
   1154                  LCD_SetTextColor(TextColor);
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable23_1
   \   00000116   0x8800             LDRH     R0,[R0, #+0]
   \   00000118   0x.... 0x....      BL       LCD_SetTextColor
   1155                  PutPixel(pixelY, nodeX[i+1]);
   \   0000011C   0xA802             ADD      R0,SP,#+8
   \   0000011E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000120   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   00000124   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000128   0x0001             MOVS     R1,R0
   \   0000012A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000012C   0x0028             MOVS     R0,R5
   \   0000012E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000130   0x.... 0x....      BL       PutPixel
   1156                  PutPixel(pixelY, nodeX[i]);
   \   00000134   0xA802             ADD      R0,SP,#+8
   \   00000136   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000138   0xF930 0x0017      LDRSH    R0,[R0, R7, LSL #+1]
   \   0000013C   0x0001             MOVS     R1,R0
   \   0000013E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000140   0x0028             MOVS     R0,R5
   \   00000142   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000144   0x.... 0x....      BL       PutPixel
   1157                  /* for (j=nodeX[i]; j<nodeX[i+1]; j++) PutPixel(j,pixelY); */
   1158                }
   \                     ??LCD_FillPolyLine_8: (+1)
   \   00000148   0x1CBF             ADDS     R7,R7,#+2
   \                     ??LCD_FillPolyLine_11: (+1)
   \   0000014A   0x0038             MOVS     R0,R7
   \   0000014C   0x0031             MOVS     R1,R6
   \   0000014E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000150   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000152   0x4288             CMP      R0,R1
   \   00000154   0xD207             BCS.N    ??LCD_FillPolyLine_12
   \   00000156   0xA802             ADD      R0,SP,#+8
   \   00000158   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000015A   0xF830 0x0017      LDRH     R0,[R0, R7, LSL #+1]
   \   0000015E   0x4649             MOV      R1,R9
   \   00000160   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000162   0x4288             CMP      R0,R1
   \   00000164   0xD397             BCC.N    ??LCD_FillPolyLine_7
   1159              }
   \                     ??LCD_FillPolyLine_12: (+1)
   \   00000166   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_FillPolyLine_6: (+1)
   \   00000168   0x0028             MOVS     R0,R5
   \   0000016A   0x4659             MOV      R1,R11
   \   0000016C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000016E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xF080 0x80AC      BCS.W    ??LCD_FillPolyLine_13
   \   00000176   0x2600             MOVS     R6,#+0
   \   00000178   0xF8BD 0x0198      LDRH     R0,[SP, #+408]
   \   0000017C   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000180   0x2700             MOVS     R7,#+0
   \   00000182   0xE072             B.N      ??LCD_FillPolyLine_14
   \                     ??LCD_FillPolyLine_15: (+1)
   \   00000184   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000186   0x0028             MOVS     R0,R5
   \   00000188   0x.... 0x....      BL       __aeabi_ui2d
   \   0000018C   0x0002             MOVS     R2,R0
   \   0000018E   0x000B             MOVS     R3,R1
   \   00000190   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00000194   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000196   0xF934 0x0027      LDRSH    R0,[R4, R7, LSL #+2]
   \   0000019A   0x.... 0x....      BL       __aeabi_i2d
   \   0000019E   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000001A2   0x.... 0x....      BL       __aeabi_cdcmple
   \   000001A6   0xD212             BCS.N    ??LCD_FillPolyLine_16
   \   000001A8   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001AA   0x0028             MOVS     R0,R5
   \   000001AC   0x.... 0x....      BL       __aeabi_ui2d
   \   000001B0   0x0002             MOVS     R2,R0
   \   000001B2   0x000B             MOVS     R3,R1
   \   000001B4   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000001B8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001BC   0xF934 0x0028      LDRSH    R0,[R4, R8, LSL #+2]
   \   000001C0   0x.... 0x....      BL       __aeabi_i2d
   \   000001C4   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000001C8   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000001CC   0xD924             BLS.N    ??LCD_FillPolyLine_17
   \                     ??LCD_FillPolyLine_16: (+1)
   \   000001CE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001D0   0x0028             MOVS     R0,R5
   \   000001D2   0x.... 0x....      BL       __aeabi_ui2d
   \   000001D6   0x0002             MOVS     R2,R0
   \   000001D8   0x000B             MOVS     R3,R1
   \   000001DA   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000001DE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001E2   0xF934 0x0028      LDRSH    R0,[R4, R8, LSL #+2]
   \   000001E6   0x.... 0x....      BL       __aeabi_i2d
   \   000001EA   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000001EE   0x.... 0x....      BL       __aeabi_cdcmple
   \   000001F2   0xD238             BCS.N    ??LCD_FillPolyLine_18
   \   000001F4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001F6   0x0028             MOVS     R0,R5
   \   000001F8   0x.... 0x....      BL       __aeabi_ui2d
   \   000001FC   0x0002             MOVS     R2,R0
   \   000001FE   0x000B             MOVS     R3,R1
   \   00000200   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00000204   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000206   0xF934 0x0027      LDRSH    R0,[R4, R7, LSL #+2]
   \   0000020A   0x.... 0x....      BL       __aeabi_i2d
   \   0000020E   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000212   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000216   0xD826             BHI.N    ??LCD_FillPolyLine_18
   \                     ??LCD_FillPolyLine_17: (+1)
   \   00000218   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000021A   0xEB04 0x0087      ADD      R0,R4,R7, LSL #+2
   \   0000021E   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000222   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000224   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000226   0xF934 0x1027      LDRSH    R1,[R4, R7, LSL #+2]
   \   0000022A   0x1A69             SUBS     R1,R5,R1
   \   0000022C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000230   0xEB04 0x0288      ADD      R2,R4,R8, LSL #+2
   \   00000234   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000238   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000023A   0xEB04 0x0387      ADD      R3,R4,R7, LSL #+2
   \   0000023E   0xF9B3 0x3002      LDRSH    R3,[R3, #+2]
   \   00000242   0x1AD2             SUBS     R2,R2,R3
   \   00000244   0x4351             MULS     R1,R2,R1
   \   00000246   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000024A   0xF934 0x2028      LDRSH    R2,[R4, R8, LSL #+2]
   \   0000024E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000250   0xF934 0x3027      LDRSH    R3,[R4, R7, LSL #+2]
   \   00000254   0x1AD2             SUBS     R2,R2,R3
   \   00000256   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000025A   0x1808             ADDS     R0,R1,R0
   \   0000025C   0xA902             ADD      R1,SP,#+8
   \   0000025E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000260   0xF821 0x0016      STRH     R0,[R1, R6, LSL #+1]
   \   00000264   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_FillPolyLine_18: (+1)
   \   00000266   0x46B8             MOV      R8,R7
   \   00000268   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_14: (+1)
   \   0000026A   0x0038             MOVS     R0,R7
   \   0000026C   0xF8BD 0x1198      LDRH     R1,[SP, #+408]
   \   00000270   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000272   0x4288             CMP      R0,R1
   \   00000274   0xD386             BCC.N    ??LCD_FillPolyLine_15
   \   00000276   0x2700             MOVS     R7,#+0
   \   00000278   0xE000             B.N      ??LCD_FillPolyLine_19
   \                     ??LCD_FillPolyLine_20: (+1)
   \   0000027A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_19: (+1)
   \   0000027C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000027E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000280   0x1E70             SUBS     R0,R6,#+1
   \   00000282   0x4287             CMP      R7,R0
   \   00000284   0xDA21             BGE.N    ??LCD_FillPolyLine_21
   \   00000286   0xA802             ADD      R0,SP,#+8
   \   00000288   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000028A   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   0000028E   0x8840             LDRH     R0,[R0, #+2]
   \   00000290   0xA902             ADD      R1,SP,#+8
   \   00000292   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000294   0xF831 0x1017      LDRH     R1,[R1, R7, LSL #+1]
   \   00000298   0x4288             CMP      R0,R1
   \   0000029A   0xD2EE             BCS.N    ??LCD_FillPolyLine_20
   \   0000029C   0xA802             ADD      R0,SP,#+8
   \   0000029E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002A0   0xF830 0x0017      LDRH     R0,[R0, R7, LSL #+1]
   \   000002A4   0xA902             ADD      R1,SP,#+8
   \   000002A6   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002A8   0xEB01 0x0147      ADD      R1,R1,R7, LSL #+1
   \   000002AC   0x8849             LDRH     R1,[R1, #+2]
   \   000002AE   0xAA02             ADD      R2,SP,#+8
   \   000002B0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002B2   0xF822 0x1017      STRH     R1,[R2, R7, LSL #+1]
   \   000002B6   0xA902             ADD      R1,SP,#+8
   \   000002B8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002BA   0xEB01 0x0147      ADD      R1,R1,R7, LSL #+1
   \   000002BE   0x8048             STRH     R0,[R1, #+2]
   \   000002C0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002C2   0x2F00             CMP      R7,#+0
   \   000002C4   0xD0DA             BEQ.N    ??LCD_FillPolyLine_19
   \   000002C6   0x1E7F             SUBS     R7,R7,#+1
   \   000002C8   0xE7D8             B.N      ??LCD_FillPolyLine_19
   \                     ??LCD_FillPolyLine_21: (+1)
   \   000002CA   0x2700             MOVS     R7,#+0
   \   000002CC   0xE73D             B.N      ??LCD_FillPolyLine_11
   1160            } 
   1161          
   1162            /* draw the edges */
   1163            LCD_SetTextColor(TextColor);
   \                     ??LCD_FillPolyLine_13: (+1)
   \   000002CE   0x....             LDR.N    R0,??DataTable23_1
   \   000002D0   0x8800             LDRH     R0,[R0, #+0]
   \   000002D2   0x.... 0x....      BL       LCD_SetTextColor
   1164          }
   \   000002D6   0xB067             ADD      SP,SP,#+412
   \   000002D8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1165          
   1166          /**
   1167            * @brief  Writes to the selected LCD register.
   1168            * @param  LCD_Reg: address of the selected register.
   1169            * @param  LCD_RegValue: value to write to the selected register.
   1170            * @retval None
   1171            */

   \                                 In section .text, align 2, keep-with-next
   1172          void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
   1173          {
   1174            /* Write 16-bit Index, then Write Reg */
   1175            LCD->LCD_REG = LCD_Reg;
   \                     LCD_WriteReg: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF05F 0x42D0      MOVS     R2,#+1744830464
   \   00000006   0x8010             STRH     R0,[R2, #+0]
   1176            /* Write 16-bit Reg */
   1177            LCD->LCD_RAM = LCD_RegValue;
   \   00000008   0x....             LDR.N    R0,??DataTable24_1  ;; 0x68000002
   \   0000000A   0x8001             STRH     R1,[R0, #+0]
   1178          }
   \   0000000C   0x4770             BX       LR               ;; return
   1179          
   1180          /**
   1181            * @brief  Reads the selected LCD Register.
   1182            * @param  LCD_Reg: address of the selected register.
   1183            * @retval LCD Register Value.
   1184            */

   \                                 In section .text, align 2, keep-with-next
   1185          uint16_t LCD_ReadReg(uint8_t LCD_Reg)
   1186          {
   1187            /* Write 16-bit Index (then Read Reg) */
   1188            LCD->LCD_REG = LCD_Reg;
   \                     LCD_ReadReg: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   00000006   0x8008             STRH     R0,[R1, #+0]
   1189            /* Read 16-bit Reg */
   1190            return (LCD->LCD_RAM);
   \   00000008   0x....             LDR.N    R0,??DataTable24_1  ;; 0x68000002
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x4770             BX       LR               ;; return
   1191          }
   1192          
   1193          /**
   1194            * @brief  Prepare to write to the LCD RAM.
   1195            * @param  None
   1196            * @retval None
   1197            */

   \                                 In section .text, align 2, keep-with-next
   1198          void LCD_WriteRAM_Prepare(void)
   1199          {
   1200            LCD->LCD_REG = LCD_REG_34;
   \                     LCD_WriteRAM_Prepare: (+1)
   \   00000000   0x2022             MOVS     R0,#+34
   \   00000002   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   00000006   0x8008             STRH     R0,[R1, #+0]
   1201          }
   \   00000008   0x4770             BX       LR               ;; return
   1202          
   1203          /**
   1204            * @brief  Writes to the LCD RAM.
   1205            * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
   1206            * @retval None
   1207            */

   \                                 In section .text, align 2, keep-with-next
   1208          void LCD_WriteRAM(uint16_t RGB_Code)
   1209          {
   1210            /* Write 16-bit GRAM Reg */
   1211            LCD->LCD_RAM = RGB_Code;
   \                     LCD_WriteRAM: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable24_1  ;; 0x68000002
   \   00000002   0x8008             STRH     R0,[R1, #+0]
   1212          }
   \   00000004   0x4770             BX       LR               ;; return
   1213          
   1214          /**
   1215            * @brief  Reads the LCD RAM.
   1216            * @param  None
   1217            * @retval LCD RAM Value.
   1218            */

   \                                 In section .text, align 2, keep-with-next
   1219          uint16_t LCD_ReadRAM(void)
   1220          {
   1221            /* Write 16-bit Index (then Read Reg) */
   1222            LCD->LCD_REG = LCD_REG_34; /* Select GRAM Reg */
   \                     LCD_ReadRAM: (+1)
   \   00000000   0x2022             MOVS     R0,#+34
   \   00000002   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   00000006   0x8008             STRH     R0,[R1, #+0]
   1223            /* Read 16-bit Reg */
   1224            return LCD->LCD_RAM;
   \   00000008   0x....             LDR.N    R0,??DataTable24_1  ;; 0x68000002
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x4770             BX       LR               ;; return
   1225          }
   1226          
   1227          /**
   1228            * @brief  Power on the LCD.
   1229            * @param  None
   1230            * @retval None
   1231            */

   \                                 In section .text, align 2, keep-with-next
   1232          void LCD_PowerOn(void)
   1233          {
   \                     LCD_PowerOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1234          /* Power On sequence ---------------------------------------------------------*/
   1235            LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2010             MOVS     R0,#+16
   \   00000006   0x.... 0x....      BL       LCD_WriteReg
   1236            LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2011             MOVS     R0,#+17
   \   0000000E   0x.... 0x....      BL       LCD_WriteReg
   1237            LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2012             MOVS     R0,#+18
   \   00000016   0x.... 0x....      BL       LCD_WriteReg
   1238            LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2013             MOVS     R0,#+19
   \   0000001E   0x.... 0x....      BL       LCD_WriteReg
   1239            _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   00000022   0x2014             MOVS     R0,#+20
   \   00000024   0x.... 0x....      BL       delay
   1240            LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000028   0xF241 0x71B0      MOVW     R1,#+6064
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
   1241            LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000032   0xF240 0x1137      MOVW     R1,#+311
   \   00000036   0x2011             MOVS     R0,#+17
   \   00000038   0x.... 0x....      BL       LCD_WriteReg
   1242            _delay_(5);                  /* Delay 50 ms */
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x.... 0x....      BL       delay
   1243            LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   00000042   0xF240 0x1139      MOVW     R1,#+313
   \   00000046   0x2012             MOVS     R0,#+18
   \   00000048   0x.... 0x....      BL       LCD_WriteReg
   1244            _delay_(5);                  /* Delay 50 ms */
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0x.... 0x....      BL       delay
   1245            LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   00000052   0xF44F 0x51E8      MOV      R1,#+7424
   \   00000056   0x2013             MOVS     R0,#+19
   \   00000058   0x.... 0x....      BL       LCD_WriteReg
   1246            LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   0000005C   0x2113             MOVS     R1,#+19
   \   0000005E   0x2029             MOVS     R0,#+41
   \   00000060   0x.... 0x....      BL       LCD_WriteReg
   1247            _delay_(5);                  /* Delay 50 ms */
   \   00000064   0x2005             MOVS     R0,#+5
   \   00000066   0x.... 0x....      BL       delay
   1248            LCD_WriteReg(LCD_REG_7, 0x0173);  /* 262K color and display ON */
   \   0000006A   0xF240 0x1173      MOVW     R1,#+371
   \   0000006E   0x2007             MOVS     R0,#+7
   \   00000070   0x.... 0x....      BL       LCD_WriteReg
   1249          }
   \   00000074   0xBD01             POP      {R0,PC}          ;; return
   1250          
   1251          /**
   1252            * @brief  Enables the Display.
   1253            * @param  None
   1254            * @retval None
   1255            */

   \                                 In section .text, align 2, keep-with-next
   1256          void LCD_DisplayOn(void)
   1257          {
   \                     LCD_DisplayOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1258            /* Display On */
   1259            LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
   \   00000002   0xF240 0x1173      MOVW     R1,#+371
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       LCD_WriteReg
   1260          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
   1261          
   1262          /**
   1263            * @brief  Disables the Display.
   1264            * @param  None
   1265            * @retval None
   1266            */

   \                                 In section .text, align 2, keep-with-next
   1267          void LCD_DisplayOff(void)
   1268          {
   \                     LCD_DisplayOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1269            /* Display Off */
   1270            LCD_WriteReg(LCD_REG_7, 0x0); 
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x.... 0x....      BL       LCD_WriteReg
   1271          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1272          
   1273          /**
   1274            * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
   1275            * @param  None
   1276            * @retval None
   1277            */

   \                                 In section .text, align 2, keep-with-next
   1278          void LCD_CtrlLinesConfig(void)
   1279          {
   \                     LCD_CtrlLinesConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1280            GPIO_InitTypeDef GPIO_InitStructure;
   1281          
   1282            /* Enable GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
   1283            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
   1284                                   RCC_AHB1Periph_GPIOF, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2078             MOVS     R0,#+120
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
   1285          
   1286          /*-- GPIO Configuration ------------------------------------------------------*/
   1287            /* SRAM Data lines,  NOE and NWE configuration */
   1288            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
   1289                                          GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
   1290                                          GPIO_Pin_4 |GPIO_Pin_5;;
   \   0000000C   0xF24C 0x7033      MOVW     R0,#+50995
   \   00000010   0x9000             STR      R0,[SP, #+0]
   1291            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1292            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1293            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1294            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0007      STRB     R0,[SP, #+7]
   1295          
   1296            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
   1297            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000032   0x220C             MOVS     R2,#+12
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000038   0x.... 0x....      BL       GPIO_PinAFConfig
   1298            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000042   0x.... 0x....      BL       GPIO_PinAFConfig
   1299            GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000046   0x220C             MOVS     R2,#+12
   \   00000048   0x2104             MOVS     R1,#+4
   \   0000004A   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   0000004C   0x.... 0x....      BL       GPIO_PinAFConfig
   1300            GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000050   0x220C             MOVS     R2,#+12
   \   00000052   0x2105             MOVS     R1,#+5
   \   00000054   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000056   0x.... 0x....      BL       GPIO_PinAFConfig
   1301            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
   \   0000005A   0x220C             MOVS     R2,#+12
   \   0000005C   0x2108             MOVS     R1,#+8
   \   0000005E   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000060   0x.... 0x....      BL       GPIO_PinAFConfig
   1302            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
   \   00000064   0x220C             MOVS     R2,#+12
   \   00000066   0x2109             MOVS     R1,#+9
   \   00000068   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   0000006A   0x.... 0x....      BL       GPIO_PinAFConfig
   1303            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
   \   0000006E   0x220C             MOVS     R2,#+12
   \   00000070   0x210A             MOVS     R1,#+10
   \   00000072   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000074   0x.... 0x....      BL       GPIO_PinAFConfig
   1304            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000078   0x220C             MOVS     R2,#+12
   \   0000007A   0x210E             MOVS     R1,#+14
   \   0000007C   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   0000007E   0x.... 0x....      BL       GPIO_PinAFConfig
   1305            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000082   0x220C             MOVS     R2,#+12
   \   00000084   0x210F             MOVS     R1,#+15
   \   00000086   0x....             LDR.N    R0,??DataTable24_3  ;; 0x40020c00
   \   00000088   0x.... 0x....      BL       GPIO_PinAFConfig
   1306          
   1307            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
   1308                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
   1309                                          GPIO_Pin_15;
   \   0000008C   0xF64F 0x7080      MOVW     R0,#+65408
   \   00000090   0x9000             STR      R0,[SP, #+0]
   1310            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000092   0x4669             MOV      R1,SP
   \   00000094   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   00000096   0x.... 0x....      BL       GPIO_Init
   1311          
   1312            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
   \   0000009A   0x220C             MOVS     R2,#+12
   \   0000009C   0x2107             MOVS     R1,#+7
   \   0000009E   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000A0   0x.... 0x....      BL       GPIO_PinAFConfig
   1313            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
   \   000000A4   0x220C             MOVS     R2,#+12
   \   000000A6   0x2108             MOVS     R1,#+8
   \   000000A8   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000AA   0x.... 0x....      BL       GPIO_PinAFConfig
   1314            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
   \   000000AE   0x220C             MOVS     R2,#+12
   \   000000B0   0x2109             MOVS     R1,#+9
   \   000000B2   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000B4   0x.... 0x....      BL       GPIO_PinAFConfig
   1315            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
   \   000000B8   0x220C             MOVS     R2,#+12
   \   000000BA   0x210A             MOVS     R1,#+10
   \   000000BC   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000BE   0x.... 0x....      BL       GPIO_PinAFConfig
   1316            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
   \   000000C2   0x220C             MOVS     R2,#+12
   \   000000C4   0x210B             MOVS     R1,#+11
   \   000000C6   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000C8   0x.... 0x....      BL       GPIO_PinAFConfig
   1317            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
   \   000000CC   0x220C             MOVS     R2,#+12
   \   000000CE   0x210C             MOVS     R1,#+12
   \   000000D0   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000D2   0x.... 0x....      BL       GPIO_PinAFConfig
   1318            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
   \   000000D6   0x220C             MOVS     R2,#+12
   \   000000D8   0x210D             MOVS     R1,#+13
   \   000000DA   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000DC   0x.... 0x....      BL       GPIO_PinAFConfig
   1319            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
   \   000000E0   0x220C             MOVS     R2,#+12
   \   000000E2   0x210E             MOVS     R1,#+14
   \   000000E4   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000E6   0x.... 0x....      BL       GPIO_PinAFConfig
   1320            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
   \   000000EA   0x220C             MOVS     R2,#+12
   \   000000EC   0x210F             MOVS     R1,#+15
   \   000000EE   0x....             LDR.N    R0,??DataTable24_4  ;; 0x40021000
   \   000000F0   0x.... 0x....      BL       GPIO_PinAFConfig
   1321          
   1322            /* SRAM Address lines configuration */
   1323            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x9000             STR      R0,[SP, #+0]
   1324            GPIO_Init(GPIOF, &GPIO_InitStructure);  
   \   000000F8   0x4669             MOV      R1,SP
   \   000000FA   0x....             LDR.N    R0,??DataTable24_5  ;; 0x40021400
   \   000000FC   0x.... 0x....      BL       GPIO_Init
   1325            GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);	   
   \   00000100   0x220C             MOVS     R2,#+12
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0x....             LDR.N    R0,??DataTable24_5  ;; 0x40021400
   \   00000106   0x.... 0x....      BL       GPIO_PinAFConfig
   1326          
   1327            /* NE3 configuration */
   1328            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
   \   0000010A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000010E   0x9000             STR      R0,[SP, #+0]
   1329          
   1330            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   00000110   0x4669             MOV      R1,SP
   \   00000112   0x....             LDR.N    R0,??DataTable24_6  ;; 0x40021800
   \   00000114   0x.... 0x....      BL       GPIO_Init
   1331            GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000118   0x220C             MOVS     R2,#+12
   \   0000011A   0x210A             MOVS     R1,#+10
   \   0000011C   0x....             LDR.N    R0,??DataTable24_6  ;; 0x40021800
   \   0000011E   0x.... 0x....      BL       GPIO_PinAFConfig
   1332          }
   \   00000122   0xBD07             POP      {R0-R2,PC}       ;; return
   1333          
   1334          /**
   1335            * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
   1336            * @param  None
   1337            * @retval None
   1338            */

   \                                 In section .text, align 2, keep-with-next
   1339          void LCD_FSMCConfig(void)
   1340          {
   \                     LCD_FSMCConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
   1341            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
   1342            FSMC_NORSRAMTimingInitTypeDef  p;
   1343             
   1344            /* Enable FSMC clock */
   1345            RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_AHB3PeriphClockCmd
   1346            
   1347          /*-- FSMC Configuration ------------------------------------------------------*/
   1348          /*----------------------- SRAM Bank 3 ----------------------------------------*/
   1349            /* FSMC_Bank1_NORSRAM4 configuration */
   1350            p.FSMC_AddressSetupTime = 5;
   \   0000000C   0x2005             MOVS     R0,#+5
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   1351            p.FSMC_AddressHoldTime = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9001             STR      R0,[SP, #+4]
   1352            p.FSMC_DataSetupTime = 9;
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0x9002             STR      R0,[SP, #+8]
   1353            p.FSMC_BusTurnAroundDuration = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9003             STR      R0,[SP, #+12]
   1354            p.FSMC_CLKDivision = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9004             STR      R0,[SP, #+16]
   1355            p.FSMC_DataLatency = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9005             STR      R0,[SP, #+20]
   1356            p.FSMC_AccessMode = FSMC_AccessMode_A;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9006             STR      R0,[SP, #+24]
   1357            /* Color LCD configuration ------------------------------------
   1358               LCD configured as follow:
   1359                  - Data/Address MUX = Disable
   1360                  - Memory Type = SRAM
   1361                  - Data Width = 16bit
   1362                  - Write Operation = Enable
   1363                  - Extended Mode = Enable
   1364                  - Asynchronous Wait = Disable */
   1365          
   1366            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
   \   00000028   0x2004             MOVS     R0,#+4
   \   0000002A   0x9007             STR      R0,[SP, #+28]
   1367            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9008             STR      R0,[SP, #+32]
   1368            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9009             STR      R0,[SP, #+36]
   1369            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x900A             STR      R0,[SP, #+40]
   1370            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x900B             STR      R0,[SP, #+44]
   1371            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x900C             STR      R0,[SP, #+48]
   1372            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x900D             STR      R0,[SP, #+52]
   1373            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x900E             STR      R0,[SP, #+56]
   1374            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x900F             STR      R0,[SP, #+60]
   1375            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   0000004C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000050   0x9010             STR      R0,[SP, #+64]
   1376            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9011             STR      R0,[SP, #+68]
   1377            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x9012             STR      R0,[SP, #+72]
   1378            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9013             STR      R0,[SP, #+76]
   1379            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   0000005E   0x4668             MOV      R0,SP
   \   00000060   0x9014             STR      R0,[SP, #+80]
   1380            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   00000062   0x4668             MOV      R0,SP
   \   00000064   0x9015             STR      R0,[SP, #+84]
   1381          
   1382            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
   \   00000066   0xA807             ADD      R0,SP,#+28
   \   00000068   0x.... 0x....      BL       FSMC_NORSRAMInit
   1383          
   1384            /* Enable FSMC NOR/SRAM Bank3 */
   1385            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x2004             MOVS     R0,#+4
   \   00000070   0x.... 0x....      BL       FSMC_NORSRAMCmd
   1386          }
   \   00000074   0xB017             ADD      SP,SP,#+92
   \   00000076   0xBD00             POP      {PC}             ;; return
   1387          
   1388          /**
   1389            * @brief  Displays a pixel.
   1390            * @param  x: pixel x.
   1391            * @param  y: pixel y.  
   1392            * @retval None
   1393            */

   \                                 In section .text, align 2, keep-with-next
   1394          static void PutPixel(int16_t x, int16_t y)
   1395          { 
   \                     PutPixel: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1396            if(x < 0 || x > 239 || y < 0 || y > 319)
   \   00000002   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000004   0x1E02             SUBS     R2,R0,#+0
   \   00000006   0x2AF0             CMP      R2,#+240
   \   00000008   0xD204             BCS.N    ??PutPixel_0
   \   0000000A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000000C   0x1E0A             SUBS     R2,R1,#+0
   \   0000000E   0xF5B2 0x7FA0      CMP      R2,#+320
   \   00000012   0xD300             BCC.N    ??PutPixel_1
   1397            {
   1398              return;  
   \                     ??PutPixel_0: (+1)
   \   00000014   0xE005             B.N      ??PutPixel_2
   1399            }
   1400            LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
   \                     ??PutPixel_1: (+1)
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0x.... 0x....      BL       LCD_DrawLine
   1401          }
   \                     ??PutPixel_2: (+1)
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
   1402          
   1403          
   1404          #ifndef USE_Delay
   1405          /**
   1406            * @brief  Inserts a delay time.
   1407            * @param  nCount: specifies the delay time length.
   1408            * @retval None
   1409            */

   \                                 In section .text, align 2, keep-with-next
   1410          static void delay(__IO uint32_t nCount)
   1411          {
   \                     delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1412            __IO uint32_t index = 0; 
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   1413            for(index = (100000 * nCount); index != 0; index--)
   \   00000008   0x9801             LDR      R0,[SP, #+4]
   \   0000000A   0x....             LDR.N    R1,??DataTable24_7  ;; 0x186a0
   \   0000000C   0x4348             MULS     R0,R1,R0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0xE002             B.N      ??delay_0
   \                     ??delay_1: (+1)
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x1E40             SUBS     R0,R0,#+1
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \                     ??delay_0: (+1)
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F9             BNE.N    ??delay_1
   1414            {
   1415            }
   1416          }
   \   0000001E   0xB002             ADD      SP,SP,#+8
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     Font16x24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     TextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     BackColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     LCD_Currentfonts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x68000002         DC32     0x68000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     BackColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x000186A0         DC32     0x186a0
   1417          #endif /* USE_Delay*/
   1418          /**
   1419            * @}
   1420            */ 
   1421          
   1422          /**
   1423            * @}
   1424            */ 
   1425            
   1426          /**
   1427            * @}
   1428            */ 
   1429          
   1430          /**
   1431            * @}
   1432            */ 
   1433            
   1434          /**
   1435            * @}
   1436            */  
   1437          
   1438          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LCD_Clear
         8   -> LCD_SetCursor
         8   -> LCD_WriteRAM_Prepare
      16   LCD_ClearLine
        16   -> LCD_DisplayChar
      16   LCD_ClosedPolyLine
        16   -> LCD_DrawUniLine
        16   -> LCD_PolyLine
       8   LCD_ClosedPolyLineRelative
         8   -> LCD_PolyLineRelativeClosed
      16   LCD_CtrlLinesConfig
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
      16   LCD_DeInit
        16   -> FSMC_NORSRAMCmd
        16   -> FSMC_NORSRAMDeInit
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> LCD_DisplayOff
       8   LCD_DisplayChar
         8   -> LCD_DrawChar
       8   LCD_DisplayOff
         8   -> LCD_WriteReg
       8   LCD_DisplayOn
         8   -> LCD_WriteReg
      16   LCD_DisplayStringLine
        16   -> LCD_DisplayChar
      24   LCD_DrawChar
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAM_Prepare
      24   LCD_DrawCircle
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAM_Prepare
      32   LCD_DrawFullCircle
        32   -> LCD_DrawCircle
        32   -> LCD_DrawLine
        32   -> LCD_SetTextColor
      24   LCD_DrawFullRect
        24   -> LCD_DrawLine
        24   -> LCD_SetTextColor
      24   LCD_DrawLine
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAM_Prepare
      16   LCD_DrawMonoPict
        16   -> LCD_SetCursor
        16   -> LCD_WriteRAM
        16   -> LCD_WriteRAM_Prepare
      24   LCD_DrawRect
        24   -> LCD_DrawLine
      48   LCD_DrawUniLine
        48   -> PutPixel
      96   LCD_FSMCConfig
        96   -> FSMC_NORSRAMCmd
        96   -> FSMC_NORSRAMInit
        96   -> RCC_AHB3PeriphClockCmd
     448   LCD_FillPolyLine
       448   -> LCD_DrawLine
       448   -> LCD_SetTextColor
       448   -> PutPixel
       448   -> __aeabi_i2d
       448   -> __aeabi_ui2d
       448 __aeabi_cdcmple
       448 __aeabi_cdrcmple
       0   LCD_GetColors
       0   LCD_GetFont
       8   LCD_Init
         8   -> LCD_CtrlLinesConfig
         8   -> LCD_FSMCConfig
         8   -> LCD_ReadReg
         8   -> LCD_SetFont
         8   -> LCD_WriteReg
         8   -> delay
      16   LCD_PolyLine
        16   -> LCD_DrawUniLine
       8   LCD_PolyLineRelative
         8   -> LCD_PolyLineRelativeClosed
      32   LCD_PolyLineRelativeClosed
        32   -> LCD_DrawUniLine
       8   LCD_PowerOn
         8   -> LCD_WriteReg
         8   -> delay
       0   LCD_ReadRAM
       0   LCD_ReadReg
       4   LCD_SetBackColor
       8   LCD_SetColors
       8   LCD_SetCursor
         8   -> LCD_WriteReg
      16   LCD_SetDisplayWindow
        16   -> LCD_SetCursor
        16   -> LCD_WriteReg
       0   LCD_SetFont
       4   LCD_SetTextColor
       8   LCD_WindowModeDisable
         8   -> LCD_SetDisplayWindow
         8   -> LCD_WriteReg
      16   LCD_WriteBMP
        16   -> LCD_WriteRAM
        16   -> LCD_WriteRAM_Prepare
        16   -> LCD_WriteReg
       0   LCD_WriteRAM
       0   LCD_WriteRAM_Prepare
       0   LCD_WriteReg
       8   PutPixel
         8   -> LCD_DrawLine
       8   delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
    2304  ASCII12x12_Table
    4560  ASCII16x24_Table
    2304  ASCII8x12_Table
    1536  ASCII8x8_Table
       2  BackColor
       8  Font12x12
       8  Font16x24
       8  Font8x12
       8  Font8x8
      40  LCD_Clear
      54  LCD_ClearLine
      60  LCD_ClosedPolyLine
      12  LCD_ClosedPolyLineRelative
     292  LCD_CtrlLinesConfig
       4  LCD_Currentfonts
     638  LCD_DeInit
      38  LCD_DisplayChar
      12  LCD_DisplayOff
      14  LCD_DisplayOn
      64  LCD_DisplayStringLine
     186  LCD_DrawChar
     270  LCD_DrawCircle
     210  LCD_DrawFullCircle
     154  LCD_DrawFullRect
     112  LCD_DrawLine
      78  LCD_DrawMonoPict
      92  LCD_DrawRect
     300  LCD_DrawUniLine
     120  LCD_FSMCConfig
     732  LCD_FillPolyLine
      18  LCD_GetColors
       8  LCD_GetFont
    1048  LCD_Init
      56  LCD_PolyLine
      12  LCD_PolyLineRelative
     122  LCD_PolyLineRelativeClosed
     118  LCD_PowerOn
      16  LCD_ReadRAM
      16  LCD_ReadReg
      16  LCD_SetBackColor
      26  LCD_SetColors
      26  LCD_SetCursor
     114  LCD_SetDisplayWindow
       8  LCD_SetFont
      16  LCD_SetTextColor
      30  LCD_WindowModeDisable
      94  LCD_WriteBMP
       6  LCD_WriteRAM
      10  LCD_WriteRAM_Prepare
      14  LCD_WriteReg
      36  PutPixel
       2  TextColor
      34  delay

 
      6 bytes in section .bss
     34 bytes in section .data
 10 704 bytes in section .rodata
  5 382 bytes in section .text
 
  5 382 bytes of CODE  memory
 10 704 bytes of CONST memory
     40 bytes of DATA  memory

Errors: none
Warnings: none
