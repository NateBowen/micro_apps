###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       25/Jan/2017  22:42:46
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\stm32f4xx_it.c
#    Command line =  
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\stm32f4xx_it.c" -D USE_STDPERIPH_DRIVER -D STM32F40XX -D
#        USE_STM324xG_EVAL -lC
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\List" -o
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Utilities\STM32_EVAL\Common\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\" -Ol
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\List\stm32f4xx_it.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\Obj\stm32f4xx_it.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework 1\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Template/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.2.0RC2
      6            * @date    20-February-2013
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          #include "main.h"
     33              

   \                                 In section .bss, align 4
     34          uint32_t dataByte = 0;
   \                     dataByte:
   \   00000000                      DS8 4
     35          
     36          /** @addtogroup Template_Project
     37            * @{
     38            */
     39          
     40          /* Private typedef -----------------------------------------------------------*/
     41          /* Private define ------------------------------------------------------------*/
     42          /* Private macro -------------------------------------------------------------*/
     43          /* Private variables ---------------------------------------------------------*/
     44          /* Private function prototypes -----------------------------------------------*/
     45          /* Private functions ---------------------------------------------------------*/
     46          
     47          /******************************************************************************/
     48          /*            Cortex-M4 Processor Exceptions Handlers                         */
     49          /******************************************************************************/
     50          
     51          /**
     52            * @brief   This function handles NMI exception.
     53            * @param  None
     54            * @retval None
     55            */

   \                                 In section .text, align 2, keep-with-next
     56          void NMI_Handler(void)
     57          {
     58          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     59          
     60          /**
     61            * @brief  This function handles Hard Fault exception.
     62            * @param  None
     63            * @retval None
     64            */

   \                                 In section .text, align 2, keep-with-next
     65          void HardFault_Handler(void)
     66          {
     67            /* Go to infinite loop when Hard Fault exception occurs */
     68            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     69            {
     70            }
     71          }
     72          
     73          /**
     74            * @brief  This function handles Memory Manage exception.
     75            * @param  None
     76            * @retval None
     77            */

   \                                 In section .text, align 2, keep-with-next
     78          void MemManage_Handler(void)
     79          {
     80            /* Go to infinite loop when Memory Manage exception occurs */
     81            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     82            {
     83            }
     84          }
     85          
     86          /**
     87            * @brief  This function handles Bus Fault exception.
     88            * @param  None
     89            * @retval None
     90            */

   \                                 In section .text, align 2, keep-with-next
     91          void BusFault_Handler(void)
     92          {
     93            /* Go to infinite loop when Bus Fault exception occurs */
     94            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
     95            {
     96            }
     97          }
     98          
     99          /**
    100            * @brief  This function handles Usage Fault exception.
    101            * @param  None
    102            * @retval None
    103            */

   \                                 In section .text, align 2, keep-with-next
    104          void UsageFault_Handler(void)
    105          {
    106            /* Go to infinite loop when Usage Fault exception occurs */
    107            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    108            {
    109            }
    110          }
    111          
    112          /**
    113            * @brief  This function handles SVCall exception.
    114            * @param  None
    115            * @retval None
    116            */

   \                                 In section .text, align 2, keep-with-next
    117          void SVC_Handler(void)
    118          {
    119          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    120          
    121          /**
    122            * @brief  This function handles Debug Monitor exception.
    123            * @param  None
    124            * @retval None
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          void DebugMon_Handler(void)
    127          {
    128          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    129          
    130          /**
    131            * @brief  This function handles PendSVC exception.
    132            * @param  None
    133            * @retval None
    134            */

   \                                 In section .text, align 2, keep-with-next
    135          void PendSV_Handler(void)
    136          {
    137          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    138          
    139          
    140          /**
    141            * @brief  This function handles External line 0 interrupt request.
    142            * @param  None
    143            * @retval None
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          void EXTI0_IRQHandler(void)
    146          {
   \                     EXTI0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    147            /* Check the EXTI line 0 bit */
    148            if(EXTI_GetITStatus(EXTI_Line0) != RESET)
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       EXTI_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD015             BEQ.N    ??EXTI0_IRQHandler_0
    149            {
    150              
    151              /* Put new byte on the bus */
    152              GPIOE->ODR = (dataByte << 8);
   \   0000000C   0x....             LDR.N    R0,??DataTable0
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0200             LSLS     R0,R0,#+8
   \   00000012   0x....             LDR.N    R1,??DataTable0_1  ;; 0x40021014
   \   00000014   0x6008             STR      R0,[R1, #+0]
    153              dataByte += 8;
   \   00000016   0x....             LDR.N    R0,??DataTable0
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x3008             ADDS     R0,R0,#+8
   \   0000001C   0x....             LDR.N    R1,??DataTable0
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    154              dataByte = dataByte % 256;
   \   00000020   0x....             LDR.N    R0,??DataTable0
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   00000028   0x....             LDR.N    R1,??DataTable0
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    155              
    156              /* Pull down the ACK line */
    157              GPIOC->BSRRH = GPIO_Pin_2;
   \   0000002C   0x2004             MOVS     R0,#+4
   \   0000002E   0x....             LDR.N    R1,??DataTable0_2  ;; 0x4002081a
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    158              
    159              /* Clear the EXTI line 0 pending bit */
    160              EXTI_ClearITPendingBit(EXTI_Line0);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       EXTI_ClearITPendingBit
    161            }
    162          }
   \                     ??EXTI0_IRQHandler_0: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    163          
    164          
    165          /**
    166            * @brief  This function handles SysTick Handler.
    167            * @param  None
    168            * @retval None
    169            */

   \                                 In section .text, align 2, keep-with-next
    170          void SysTick_Handler(void)
    171          {
    172          //  TimingDelay_Decrement();
    173          }
   \                     SysTick_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     dataByte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40021014         DC32     0x40021014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4002081A         DC32     0x4002081a
    174          
    175          /******************************************************************************/
    176          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    177          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    178          /*  available peripheral interrupt handler's name please refer to the startup */
    179          /*  file (startup_stm32f4xx.s).                                               */
    180          /******************************************************************************/
    181          
    182          /**
    183            * @brief  This function handles PPP interrupt request.
    184            * @param  None
    185            * @retval None
    186            */
    187          /*void PPP_IRQHandler(void)
    188          {
    189          }*/
    190          
    191          /**
    192            * @}
    193            */ 
    194          
    195          
    196          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       8   EXTI0_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       0   SysTick_Handler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       2  BusFault_Handler
       2  DebugMon_Handler
      58  EXTI0_IRQHandler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       2  SysTick_Handler
       2  UsageFault_Handler
       4  dataByte

 
  4 bytes in section .bss
 88 bytes in section .text
 
 88 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
