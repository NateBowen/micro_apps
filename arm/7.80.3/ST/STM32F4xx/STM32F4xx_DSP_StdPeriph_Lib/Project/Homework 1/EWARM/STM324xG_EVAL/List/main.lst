###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       27/Jan/2017  14:57:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\main.c
#    Command line =  
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\main.c" -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL
#        -lC
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\List" -o
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Utilities\STM32_EVAL\Common\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\" -Ol
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        1\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework 1\main.c
      1          /* Includes */
      2          #include "main.h"
      3          #include "stm32f4xx.h"
      4          
      5          /* Defines */
      6          #define START_PIN       GPIO_Pin_0
      7          #define ACK_PIN         GPIO_Pin_2
      8          #define SIGNAL_PORT     GPIOC->ODR
      9          
     10          

   \                                 In section .bss, align 4
     11          GPIO_InitTypeDef   GPIO_InitStructure;
   \                     GPIO_InitStructure:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     12          EXTI_InitTypeDef   EXTI_InitStructure;
   \                     EXTI_InitStructure:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     13          NVIC_InitTypeDef   NVIC_InitStructure_Main;
   \                     NVIC_InitStructure_Main:
   \   00000000                      DS8 4
     14          

   \                                 In section .text, align 4, keep-with-next
     15          int main(void)
     16          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     17          
     18            /*!< At this stage the microcontroller clock setting is already configured, 
     19            this is done through SystemInit() function which is called from startup
     20            files (startup_stm32f40xx.s/startup_stm32f427x.s/startup_stm32f429x.s)
     21            before to branch to application main. 
     22            To reconfigure the default setting of SystemInit() function, refer to
     23            system_stm32f4xx.c file
     24            */  
     25            
     26            /* GPIOC and GPIOE Peripheral clock enable */
     27            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     28            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     29            
     30            /* Enable SYSCFG clock */
     31            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF44F 0x4080      MOV      R0,#+16384
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     32          
     33            /* Configure PC0 input ~START */
     34            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x4930             LDR.N    R1,??main_0
   \   00000020   0x6008             STR      R0,[R1, #+0]
     35            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x492E             LDR.N    R1,??main_0
   \   00000026   0x7108             STRB     R0,[R1, #+4]
     36            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x492D             LDR.N    R1,??main_0
   \   0000002C   0x71C8             STRB     R0,[R1, #+7]
     37            GPIO_Init(GPIOC, &GPIO_InitStructure); 
   \   0000002E   0x492C             LDR.N    R1,??main_0
   \   00000030   0x482C             LDR.N    R0,??main_0+0x4  ;; 0x40020800
   \   00000032   0x.... 0x....      BL       GPIO_Init
     38            
     39            /* Configure PC2 output ~ACK */
     40            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x4929             LDR.N    R1,??main_0
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     41            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x4928             LDR.N    R1,??main_0
   \   00000040   0x7108             STRB     R0,[R1, #+4]
     42            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x4926             LDR.N    R1,??main_0
   \   00000046   0x7188             STRB     R0,[R1, #+6]
     43            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x4925             LDR.N    R1,??main_0
   \   0000004C   0x7148             STRB     R0,[R1, #+5]
     44            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x4923             LDR.N    R1,??main_0
   \   00000052   0x71C8             STRB     R0,[R1, #+7]
     45            GPIO_Init(GPIOC, &GPIO_InitStructure); 
   \   00000054   0x4922             LDR.N    R1,??main_0
   \   00000056   0x4823             LDR.N    R0,??main_0+0x4  ;; 0x40020800
   \   00000058   0x.... 0x....      BL       GPIO_Init
     46            
     47            /* Configure PE8-PE15 output push-pull mode */
     48            GPIO_InitStructure.GPIO_Pin = 0xFF00;
   \   0000005C   0xF44F 0x407F      MOV      R0,#+65280
   \   00000060   0x491F             LDR.N    R1,??main_0
   \   00000062   0x6008             STR      R0,[R1, #+0]
     49            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x491E             LDR.N    R1,??main_0
   \   00000068   0x7108             STRB     R0,[R1, #+4]
     50            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x491C             LDR.N    R1,??main_0
   \   0000006E   0x7188             STRB     R0,[R1, #+6]
     51            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000070   0x2003             MOVS     R0,#+3
   \   00000072   0x491B             LDR.N    R1,??main_0
   \   00000074   0x7148             STRB     R0,[R1, #+5]
     52            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x4919             LDR.N    R1,??main_0
   \   0000007A   0x71C8             STRB     R0,[R1, #+7]
     53            GPIO_Init(GPIOE, &GPIO_InitStructure); 
   \   0000007C   0x4918             LDR.N    R1,??main_0
   \   0000007E   0x481A             LDR.N    R0,??main_0+0x8  ;; 0x40021000
   \   00000080   0x.... 0x....      BL       GPIO_Init
     54            
     55            /* Connect EXTI Line0 to PA0 pin */
     56            SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       SYSCFG_EXTILineConfig
     57          
     58            /* Configure EXTI Line0 */
     59            EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x4917             LDR.N    R1,??main_0+0xC
   \   00000090   0x6008             STR      R0,[R1, #+0]
     60            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x4915             LDR.N    R1,??main_0+0xC
   \   00000096   0x7108             STRB     R0,[R1, #+4]
     61            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
   \   00000098   0x2008             MOVS     R0,#+8
   \   0000009A   0x4914             LDR.N    R1,??main_0+0xC
   \   0000009C   0x7148             STRB     R0,[R1, #+5]
     62            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x4912             LDR.N    R1,??main_0+0xC
   \   000000A2   0x7188             STRB     R0,[R1, #+6]
     63            EXTI_Init(&EXTI_InitStructure);
   \   000000A4   0x4811             LDR.N    R0,??main_0+0xC
   \   000000A6   0x.... 0x....      BL       EXTI_Init
     64          
     65            /* Enable and set EXTI Line0 Interrupt to the lowest priority */
     66            NVIC_InitStructure_Main.NVIC_IRQChannel = EXTI0_IRQn;
   \   000000AA   0x2006             MOVS     R0,#+6
   \   000000AC   0x4910             LDR.N    R1,??main_0+0x10
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
     67            NVIC_InitStructure_Main.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \   000000B0   0x200F             MOVS     R0,#+15
   \   000000B2   0x490F             LDR.N    R1,??main_0+0x10
   \   000000B4   0x7048             STRB     R0,[R1, #+1]
     68            NVIC_InitStructure_Main.NVIC_IRQChannelSubPriority = 0x0F;
   \   000000B6   0x200F             MOVS     R0,#+15
   \   000000B8   0x490D             LDR.N    R1,??main_0+0x10
   \   000000BA   0x7088             STRB     R0,[R1, #+2]
     69            NVIC_InitStructure_Main.NVIC_IRQChannelCmd = ENABLE;
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x490C             LDR.N    R1,??main_0+0x10
   \   000000C0   0x70C8             STRB     R0,[R1, #+3]
     70            NVIC_Init(&NVIC_InitStructure_Main);  
   \   000000C2   0x480B             LDR.N    R0,??main_0+0x10
   \   000000C4   0x.... 0x....      BL       NVIC_Init
     71          
     72            GPIOC->BSRRL = GPIO_Pin_2;
   \   000000C8   0x2004             MOVS     R0,#+4
   \   000000CA   0x490A             LDR.N    R1,??main_0+0x14  ;; 0x40020818
   \   000000CC   0x8008             STRH     R0,[R1, #+0]
     73          
     74            while (1)
     75            {  
     76              /* Check if START line is high and ACK is low */
     77              if (SIGNAL_PORT == 0) {
   \                     ??main_1: (+1)
   \   000000CE   0x480A             LDR.N    R0,??main_0+0x18  ;; 0x40020814
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD1FB             BNE.N    ??main_1
     78                /* Pull up on ACK line */
     79                GPIOC->BSRRL = GPIO_Pin_2;
   \   000000D6   0x2004             MOVS     R0,#+4
   \   000000D8   0x4906             LDR.N    R1,??main_0+0x14  ;; 0x40020818
   \   000000DA   0x8008             STRH     R0,[R1, #+0]
   \   000000DC   0xE7F7             B.N      ??main_1
   \   000000DE   0xBF00             Nop      
   \                     ??main_0:
   \   000000E0   0x........         DC32     GPIO_InitStructure
   \   000000E4   0x40020800         DC32     0x40020800
   \   000000E8   0x40021000         DC32     0x40021000
   \   000000EC   0x........         DC32     EXTI_InitStructure
   \   000000F0   0x........         DC32     NVIC_InitStructure_Main
   \   000000F4   0x40020818         DC32     0x40020818
   \   000000F8   0x40020814         DC32     0x40020814
     80              }
     81              
     82            }
     83          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> EXTI_Init
         8   -> GPIO_Init
         8   -> NVIC_Init
         8   -> RCC_AHB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
         8   -> SYSCFG_EXTILineConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  EXTI_InitStructure
       8  GPIO_InitStructure
       4  NVIC_InitStructure_Main
     252  main

 
  20 bytes in section .bss
 252 bytes in section .text
 
 252 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
