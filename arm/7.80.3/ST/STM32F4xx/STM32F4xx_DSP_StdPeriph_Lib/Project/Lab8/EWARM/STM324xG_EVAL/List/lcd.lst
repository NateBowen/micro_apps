###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       20/Mar/2017  17:24:47
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\lcd.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\lcd.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\STM324xG_EVAL\List\lcd.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\EWARM\STM324xG_EVAL\Obj\lcd.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab8\lcd.c
      1          #include "lcd.h"
      2          #include "delay.h"
      3          
      4          #define LCD_PORT        GPIOD
      5          #define LCD_PORT_CLOCK  RCC_AHB1Periph_GPIOD
      6          #define LCD_DATA_BUS    0x00FF
      7          #define LCD_ENABLE_PIN  GPIO_Pin_8
      8          #define LCD_RW_PIN      GPIO_Pin_9
      9          #define LCD_RS_PIN      GPIO_Pin_10
     10          
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void LCD_Command(uint8_t data){
   \                     LCD_Command: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     13            LCD_PORT->ODR = data;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000006   0x6008             STR      R0,[R1, #+0]
     14            LCD_PORT->ODR &= ~LCD_RS_PIN;
   \   00000008   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000010   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000012   0x6008             STR      R0,[R1, #+0]
     15            LCD_PORT->ODR &= ~LCD_RW_PIN;
   \   00000014   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000001C   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     16            LCD_PORT->ODR |= LCD_ENABLE_PIN;
   \   00000020   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000028   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     17            Delay(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Delay
     18            LCD_PORT->ODR &= ~(LCD_ENABLE_PIN);
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     19          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
     20          
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void LCD_Write(uint8_t data){ 
   \                     LCD_Write: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     23            LCD_PORT->ODR = data;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000006   0x6008             STR      R0,[R1, #+0]
     24            LCD_PORT->ODR |= LCD_RS_PIN;
   \   00000008   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000010   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   00000012   0x6008             STR      R0,[R1, #+0]
     25            LCD_PORT->ODR &= ~LCD_RW_PIN;
   \   00000014   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000001C   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     26            LCD_PORT->ODR |= LCD_ENABLE_PIN;
   \   00000020   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000028   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     27            Delay(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Delay
     28            LCD_PORT->ODR &= ~(LCD_ENABLE_PIN);  
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     29          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
     30          
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void LCD_Config(void) {
   \                     LCD_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     33            
     34            GPIO_InitTypeDef GPIO_InitStructure;
     35            
     36            RCC_AHB1PeriphClockCmd(LCD_PORT_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     37            
     38            GPIO_InitStructure.GPIO_Pin = LCD_DATA_BUS | LCD_ENABLE_PIN | LCD_RW_PIN | LCD_RS_PIN;
   \   0000000C   0xF240 0x70FF      MOVW     R0,#+2047
   \   00000010   0x9000             STR      R0,[SP, #+0]
     39            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
     40            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0006      STRB     R0,[SP, #+6]
     41            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0005      STRB     R0,[SP, #+5]
     42            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0007      STRB     R0,[SP, #+7]
     43            GPIO_Init(LCD_PORT, &GPIO_InitStructure);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40020c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
     44             
     45            LCD_PORT->ODR &= ~LCD_ENABLE_PIN;
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020c14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000003A   0x....             LDR.N    R1,??DataTable2  ;; 0x40020c14
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     46            Delay(15);           //Wait >15 msec after power is applied
   \   0000003E   0x200F             MOVS     R0,#+15
   \   00000040   0x.... 0x....      BL       Delay
     47            LCD_Command(0x30);    //command 0x30 = Wake up
   \   00000044   0x2030             MOVS     R0,#+48
   \   00000046   0x.... 0x....      BL       LCD_Command
     48            Delay(5);            //must wait 5ms, busy flag not available
   \   0000004A   0x2005             MOVS     R0,#+5
   \   0000004C   0x.... 0x....      BL       Delay
     49            LCD_Command(0x30);    //command 0x30 = Wake up #2
   \   00000050   0x2030             MOVS     R0,#+48
   \   00000052   0x.... 0x....      BL       LCD_Command
     50            Delay(1);            //must wait 160us, busy flag not available
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       Delay
     51            LCD_Command(0x30);    //command 0x30 = Wake up #3
   \   0000005C   0x2030             MOVS     R0,#+48
   \   0000005E   0x.... 0x....      BL       LCD_Command
     52            Delay(1);            //must wait 160us, busy flag not available
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       Delay
     53          //  LCD_Command(0x38);    //Function set: 8-bit/2-line
     54            LCD_Command(0x10);    //Set cursor
   \   00000068   0x2010             MOVS     R0,#+16
   \   0000006A   0x.... 0x....      BL       LCD_Command
     55            LCD_Command(0x01);    //Clear
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      BL       LCD_Command
     56            LCD_Command(0x0F);    //Display ON; Cursor ON, Blink ON
   \   00000074   0x200F             MOVS     R0,#+15
   \   00000076   0x.... 0x....      BL       LCD_Command
     57            LCD_Command(0x06);    //Entry mode set
   \   0000007A   0x2006             MOVS     R0,#+6
   \   0000007C   0x.... 0x....      BL       LCD_Command
     58            
     59          //  LCD_Command(0x01);    //Clear
     60          //  LCD_Command(0x14);
     61           
     62          //  LCD_Write(0x60);
     63          //  LCD_Write(0x80);
     64          }
   \   00000080   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020C14         DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40020C00         DC32     0x40020c00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LCD_Command
         8   -> Delay
      16   LCD_Config
        16   -> Delay
        16   -> GPIO_Init
        16   -> LCD_Command
        16   -> RCC_AHB1PeriphClockCmd
       8   LCD_Write
         8   -> Delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      64  LCD_Command
     130  LCD_Config
      64  LCD_Write

 
 266 bytes in section .text
 
 266 bytes of CODE memory

Errors: none
Warnings: none
