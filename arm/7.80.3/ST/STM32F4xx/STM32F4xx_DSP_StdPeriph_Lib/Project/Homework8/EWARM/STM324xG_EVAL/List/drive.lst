###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  15:54:50
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\drive.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\drive.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\List\drive.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\Obj\drive.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\drive.c
      1          #include "drive.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void Drive_Config(void){
   \                     Drive_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
      4            GPIO_InitTypeDef  GPIO_InitStructure;
      5          
      6            RCC_AHB1PeriphClockCmd(DRIVE_PORT_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
      7          
      8            GPIO_InitStructure.GPIO_Pin = DRIVE_LEFT_PIN | DRIVE_RIGHT_PIN | DRIVE_STRAIGHT_PIN;
   \   0000000C   0x2007             MOVS     R0,#+7
   \   0000000E   0x9000             STR      R0,[SP, #+0]
      9            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
     10            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0006      STRB     R0,[SP, #+6]
     11            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0xF88D 0x0005      STRB     R0,[SP, #+5]
     12            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x0007      STRB     R0,[SP, #+7]
     13            GPIO_Init(DRIVE_PORT, &GPIO_InitStructure);
   \   00000028   0x4669             MOV      R1,SP
   \   0000002A   0x....             LDR.N    R0,??DataTable4  ;; 0x40020800
   \   0000002C   0x.... 0x....      BL       GPIO_Init
     14          }
   \   00000030   0xBD07             POP      {R0-R2,PC}       ;; return
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void DriveLeft(void){
     17            DRIVE_PORT->ODR = DRIVE_LEFT_PIN;
   \                     DriveLeft: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40020814
   \   00000004   0x6008             STR      R0,[R1, #+0]
     18          }
   \   00000006   0x4770             BX       LR               ;; return
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void DriveRight(void){
     21            DRIVE_PORT->ODR = DRIVE_RIGHT_PIN;
   \                     DriveRight: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40020814
   \   00000004   0x6008             STR      R0,[R1, #+0]
     22          }
   \   00000006   0x4770             BX       LR               ;; return
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void DriveStraight(void){
     25            DRIVE_PORT->ODR = DRIVE_STRAIGHT_PIN;
   \                     DriveStraight: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40020814
   \   00000004   0x6008             STR      R0,[R1, #+0]
     26          }
   \   00000006   0x4770             BX       LR               ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void DriveOff(void){
     29            DRIVE_PORT->ODR = 0;
   \                     DriveOff: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40020814
   \   00000004   0x6008             STR      R0,[R1, #+0]
     30          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40020814         DC32     0x40020814

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DriveLeft
       0   DriveOff
       0   DriveRight
       0   DriveStraight
      16   Drive_Config
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       8  DriveLeft
       8  DriveOff
       8  DriveRight
       8  DriveStraight
      50  Drive_Config

 
 90 bytes in section .text
 
 90 bytes of CODE memory

Errors: none
Warnings: none
