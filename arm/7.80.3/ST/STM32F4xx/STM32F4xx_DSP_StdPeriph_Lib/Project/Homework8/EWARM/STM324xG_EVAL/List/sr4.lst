###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       06/Apr/2017  00:26:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\sr4.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\sr4.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\List\sr4.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\EWARM\STM324xG_EVAL\Obj\sr4.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework8\sr4.c
      1          #include "sr4.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void SR4_Config(void){
   \                     SR4_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      4            SR4_1_EchoConfig();
   \   00000002   0x.... 0x....      BL       SR4_1_EchoConfig
      5            SR4_2_EchoConfig();
   \   00000006   0x.... 0x....      BL       SR4_2_EchoConfig
      6            SR4_TriggerConfig();
   \   0000000A   0x.... 0x....      BL       SR4_TriggerConfig
      7          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
      8          

   \                                 In section .text, align 2, keep-with-next
      9          void SR4_TriggerConfig(void){
   \                     SR4_TriggerConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     10          
     11            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     12            TIM_OCInitTypeDef  TIM_OCInitStructure;
     13            GPIO_InitTypeDef GPIO_InitStructure;
     14          
     15            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     16          
     17            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     18          
     19            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x9000             STR      R0,[SP, #+0]
     20            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     21            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0005      STRB     R0,[SP, #+5]
     22            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0006      STRB     R0,[SP, #+6]
     23            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF88D 0x0007      STRB     R0,[SP, #+7]
     24            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000034   0x.... 0x....      BL       GPIO_Init
     25          
     26            GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   0000003E   0x.... 0x....      BL       GPIO_PinAFConfig
     27          
     28            TIM_TimeBaseStructure.TIM_Period = TRIG_CLOCK_PERIOD;
   \   00000042   0xF24C 0x3050      MOVW     R0,#+50000
   \   00000046   0x9003             STR      R0,[SP, #+12]
     29            TIM_TimeBaseStructure.TIM_Prescaler = TRIG_CLOCK_PRESCALAR;
   \   00000048   0x2054             MOVS     R0,#+84
   \   0000004A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     30            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     31            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     32            TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000060   0x.... 0x....      BL       TIM_TimeBaseInit
     33          
     34            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000064   0x2060             MOVS     R0,#+96
   \   00000066   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     35            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     36            TIM_OCInitStructure.TIM_Pulse = TRIG_PULSE;
   \   00000070   0xF246 0x10A8      MOVW     R0,#+25000
   \   00000074   0x9007             STR      R0,[SP, #+28]
     37            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     38            TIM_OC2Init(TIM2, &TIM_OCInitStructure);
   \   0000007C   0xA905             ADD      R1,SP,#+20
   \   0000007E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000082   0x.... 0x....      BL       TIM_OC2Init
     39          
     40            TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Disable);
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000008C   0x.... 0x....      BL       TIM_OC2PreloadConfig
     41            TIM_ARRPreloadConfig(TIM2, ENABLE);
   \   00000090   0x2101             MOVS     R1,#+1
   \   00000092   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000096   0x.... 0x....      BL       TIM_ARRPreloadConfig
     42          
     43            TIM_Cmd(TIM2, ENABLE);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000A0   0x.... 0x....      BL       TIM_Cmd
     44          }
   \   000000A4   0xB00B             ADD      SP,SP,#+44
   \   000000A6   0xBD00             POP      {PC}             ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void SR4_1_EchoConfig(void){
   \                     SR4_1_EchoConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     47            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     48            TIM_ICInitTypeDef  TIM_ICInitStructure;
     49            NVIC_InitTypeDef NVIC_InitStructure;
     50            GPIO_InitTypeDef GPIO_InitStructure;
     51          
     52            RCC_APB1PeriphClockCmd(S1_TIMx_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     53          
     54            RCC_AHB1PeriphClockCmd(S1_PORT_CLOCK, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     55          
     56            GPIO_InitStructure.GPIO_Pin = S1_PIN;
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x9001             STR      R0,[SP, #+4]
     57            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xF88D 0x0008      STRB     R0,[SP, #+8]
     58            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x000B      STRB     R0,[SP, #+11]
     59            GPIO_Init(S1_PORT, &GPIO_InitStructure);
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000028   0x.... 0x....      BL       GPIO_Init
     60          
     61            GPIO_PinAFConfig(S1_PORT, S1_PINSOURCE, S1_AF_TIMx);
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0x2102             MOVS     R1,#+2
   \   00000030   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000032   0x.... 0x....      BL       GPIO_PinAFConfig
     62          
     63            NVIC_InitStructure.NVIC_IRQChannel = S1_TIMx_IRQ;
   \   00000036   0x2032             MOVS     R0,#+50
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
     64            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     65            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xF88D 0x0002      STRB     R0,[SP, #+2]
     66            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     67            NVIC_Init(&NVIC_InitStructure);
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       NVIC_Init
     68          
     69            TIM_TimeBaseStructure.TIM_Period = S1_CLOCK_PERIOD;
   \   00000054   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000058   0x9007             STR      R0,[SP, #+28]
     70            TIM_TimeBaseStructure.TIM_Prescaler = S1_CLOCK_PRESCALAR;
   \   0000005A   0x2054             MOVS     R0,#+84
   \   0000005C   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     71            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     72            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     73            TIM_TimeBaseInit(S1_TIMx, &TIM_TimeBaseStructure);
   \   0000006C   0xA906             ADD      R1,SP,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   00000070   0x.... 0x....      BL       TIM_TimeBaseInit
     74          
     75            TIM_ICInitStructure.TIM_Channel = S1_TIMx_CHANNEL;
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     76            TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
   \   0000007A   0x200A             MOVS     R0,#+10
   \   0000007C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     77            TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     78            TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     79            TIM_ICInitStructure.TIM_ICFilter = 0x0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     80            TIM_ICInit(S1_TIMx, &TIM_ICInitStructure);
   \   00000092   0xA903             ADD      R1,SP,#+12
   \   00000094   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   00000096   0x.... 0x....      BL       TIM_ICInit
     81          
     82            TIM_ARRPreloadConfig(S1_TIMx, ENABLE);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   0000009E   0x.... 0x....      BL       TIM_ARRPreloadConfig
     83          
     84            TIM_ITConfig(S1_TIMx, S1_TIM_IT_CCx, ENABLE);
   \   000000A2   0x2201             MOVS     R2,#+1
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   000000A8   0x.... 0x....      BL       TIM_ITConfig
     85          
     86            TIM_Cmd(S1_TIMx, ENABLE);
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   000000B0   0x.... 0x....      BL       TIM_Cmd
     87          }
   \   000000B4   0xB009             ADD      SP,SP,#+36
   \   000000B6   0xBD00             POP      {PC}             ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void SR4_2_EchoConfig(void){
   \                     SR4_2_EchoConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     90            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     91            TIM_ICInitTypeDef  TIM_ICInitStructure;
     92            NVIC_InitTypeDef NVIC_InitStructure;
     93            GPIO_InitTypeDef GPIO_InitStructure;
     94          
     95            RCC_APB1PeriphClockCmd(S1_TIMx_CLOCK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     96          
     97            RCC_AHB1PeriphClockCmd(S1_PORT_CLOCK, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     98          
     99            GPIO_InitStructure.GPIO_Pin = S1_PIN;
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x9001             STR      R0,[SP, #+4]
    100            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0xF88D 0x0008      STRB     R0,[SP, #+8]
    101            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x000B      STRB     R0,[SP, #+11]
    102            GPIO_Init(S1_PORT, &GPIO_InitStructure);
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000028   0x.... 0x....      BL       GPIO_Init
    103          
    104            GPIO_PinAFConfig(S1_PORT, S1_PINSOURCE, S1_AF_TIMx);
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0x2102             MOVS     R1,#+2
   \   00000030   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000032   0x.... 0x....      BL       GPIO_PinAFConfig
    105          
    106            NVIC_InitStructure.NVIC_IRQChannel = S1_TIMx_IRQ;
   \   00000036   0x2032             MOVS     R0,#+50
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    107            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    108            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xF88D 0x0002      STRB     R0,[SP, #+2]
    109            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    110            NVIC_Init(&NVIC_InitStructure);
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       NVIC_Init
    111          
    112            TIM_TimeBaseStructure.TIM_Period = S1_CLOCK_PERIOD;
   \   00000054   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000058   0x9007             STR      R0,[SP, #+28]
    113            TIM_TimeBaseStructure.TIM_Prescaler = S1_CLOCK_PRESCALAR;
   \   0000005A   0x2054             MOVS     R0,#+84
   \   0000005C   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    114            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF8AD 0x0020      STRH     R0,[SP, #+32]
    115            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    116            TIM_TimeBaseInit(S1_TIMx, &TIM_TimeBaseStructure);
   \   0000006C   0xA906             ADD      R1,SP,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   00000070   0x.... 0x....      BL       TIM_TimeBaseInit
    117          
    118            TIM_ICInitStructure.TIM_Channel = S1_TIMx_CHANNEL;
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    119            TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
   \   0000007A   0x200A             MOVS     R0,#+10
   \   0000007C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    120            TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    121            TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    122            TIM_ICInitStructure.TIM_ICFilter = 0x0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    123            TIM_ICInit(S1_TIMx, &TIM_ICInitStructure);
   \   00000092   0xA903             ADD      R1,SP,#+12
   \   00000094   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   00000096   0x.... 0x....      BL       TIM_ICInit
    124          
    125            TIM_ARRPreloadConfig(S1_TIMx, ENABLE);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   0000009E   0x.... 0x....      BL       TIM_ARRPreloadConfig
    126          
    127            TIM_ITConfig(S1_TIMx, S1_TIM_IT_CCx, ENABLE);
   \   000000A2   0x2201             MOVS     R2,#+1
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   000000A8   0x.... 0x....      BL       TIM_ITConfig
    128          
    129            TIM_Cmd(S1_TIMx, ENABLE);
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40000c00
   \   000000B0   0x.... 0x....      BL       TIM_Cmd
    130          }
   \   000000B4   0xB009             ADD      SP,SP,#+36
   \   000000B6   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40000C00         DC32     0x40000c00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   SR4_1_EchoConfig
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> NVIC_Init
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_ICInit
        40   -> TIM_ITConfig
        40   -> TIM_TimeBaseInit
      40   SR4_2_EchoConfig
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> NVIC_Init
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_ICInit
        40   -> TIM_ITConfig
        40   -> TIM_TimeBaseInit
       8   SR4_Config
         8   -> SR4_1_EchoConfig
         8   -> SR4_2_EchoConfig
         8   -> SR4_TriggerConfig
      48   SR4_TriggerConfig
        48   -> GPIO_Init
        48   -> GPIO_PinAFConfig
        48   -> RCC_AHB1PeriphClockCmd
        48   -> RCC_APB1PeriphClockCmd
        48   -> TIM_ARRPreloadConfig
        48   -> TIM_Cmd
        48   -> TIM_OC2Init
        48   -> TIM_OC2PreloadConfig
        48   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
     184  SR4_1_EchoConfig
     184  SR4_2_EchoConfig
      16  SR4_Config
     168  SR4_TriggerConfig

 
 560 bytes in section .text
 
 560 bytes of CODE memory

Errors: none
Warnings: none
