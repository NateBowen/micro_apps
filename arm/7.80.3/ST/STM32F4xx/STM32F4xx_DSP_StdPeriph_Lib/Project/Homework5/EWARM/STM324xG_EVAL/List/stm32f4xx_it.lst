###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       27/Feb/2017  14:35:12
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\STM324xG_EVAL\List\stm32f4xx_it.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\EWARM\STM324xG_EVAL\Obj\stm32f4xx_it.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c
      1          #include "stm32f4xx_it.h"
      2          
      3          #define LED0    GPIO_Pin_12
      4          #define LED1    GPIO_Pin_13
      5          

   \                                 In section .bss, align 2
      6          __IO uint16_t uhIC2ReadValue1 = 0;
   \                     uhIC2ReadValue1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
      7          __IO uint16_t uhIC2ReadValue2 = 0;
   \                     uhIC2ReadValue2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
      8          __IO uint16_t uhIC2ReadValue3 = 0;
   \                     uhIC2ReadValue3:
   \   00000000                      DS8 2
      9          

   \                                 In section .bss, align 2
     10          __IO uint16_t uhCaptureNumber = 0;
   \                     uhCaptureNumber:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     11          __IO uint32_t uwCapture = 0;
   \                     uwCapture:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     12          __IO uint32_t uwCapture2 = 0;
   \                     uwCapture2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     13          __IO uint32_t uwTIM5Freq = 0;
   \                     uwTIM5Freq:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          __IO uint32_t uwTIM5Period = 0;
   \                     uwTIM5Period:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          __IO uint32_t uwTIM5Duty = 0;
   \                     uwTIM5Duty:
   \   00000000                      DS8 4
     16          

   \                                 In section .bss, align 4
     17          int sigLevel = 0;
   \                     sigLevel:
   \   00000000                      DS8 4
     18          

   \                                 In section .text, align 4, keep-with-next
     19          void TIM5_IRQHandler(void)
     20          { 
   \                     TIM5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     21            if(TIM_GetITStatus(TIM5, TIM_IT_CC2) == SET) 
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x485B             LDR.N    R0,??TIM5_IRQHandler_0  ;; 0x40000c00
   \   00000006   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xF040 0x80B0      BNE.W    ??TIM5_IRQHandler_1
     22            {   
     23              /* Check the signal level, only measure when starting with a peak */  
     24              sigLevel = (GPIOA->IDR & 0x02) >> 1;   
   \   00000010   0x4859             LDR.N    R0,??TIM5_IRQHandler_0+0x4  ;; 0x40020010
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000018   0x4958             LDR.N    R1,??TIM5_IRQHandler_0+0x8
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     25              
     26              if ((uhCaptureNumber == 0) & (sigLevel == 1))
   \   0000001C   0x4858             LDR.N    R0,??TIM5_IRQHandler_0+0xC
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD10C             BNE.N    ??TIM5_IRQHandler_2
   \   00000024   0x4855             LDR.N    R0,??TIM5_IRQHandler_0+0x8
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD108             BNE.N    ??TIM5_IRQHandler_2
     27              {    
     28                /* Get the Input Capture value */
     29                uhIC2ReadValue1 = TIM_GetCapture2(TIM5);
   \   0000002C   0x4851             LDR.N    R0,??TIM5_IRQHandler_0  ;; 0x40000c00
   \   0000002E   0x.... 0x....      BL       TIM_GetCapture2
   \   00000032   0x4954             LDR.N    R1,??TIM5_IRQHandler_0+0x10
   \   00000034   0x8008             STRH     R0,[R1, #+0]
     30                uhCaptureNumber = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x4951             LDR.N    R1,??TIM5_IRQHandler_0+0xC
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
   \   0000003C   0xE098             B.N      ??TIM5_IRQHandler_1
     31              } 
     32              
     33              else if(uhCaptureNumber == 1)
   \                     ??TIM5_IRQHandler_2: (+1)
   \   0000003E   0x4850             LDR.N    R0,??TIM5_IRQHandler_0+0xC
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD108             BNE.N    ??TIM5_IRQHandler_3
     34              {
     35                /* Get the Input Capture value */
     36                uhIC2ReadValue2 = TIM_GetCapture2(TIM5); 
   \   00000046   0x484B             LDR.N    R0,??TIM5_IRQHandler_0  ;; 0x40000c00
   \   00000048   0x.... 0x....      BL       TIM_GetCapture2
   \   0000004C   0x494E             LDR.N    R1,??TIM5_IRQHandler_0+0x14
   \   0000004E   0x8008             STRH     R0,[R1, #+0]
     37                uhCaptureNumber = 2;
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x494B             LDR.N    R1,??TIM5_IRQHandler_0+0xC
   \   00000054   0x8008             STRH     R0,[R1, #+0]
   \   00000056   0xE08B             B.N      ??TIM5_IRQHandler_1
     38              }
     39              
     40              
     41              else if (uhCaptureNumber == 2)
   \                     ??TIM5_IRQHandler_3: (+1)
   \   00000058   0x4849             LDR.N    R0,??TIM5_IRQHandler_0+0xC
   \   0000005A   0x8800             LDRH     R0,[R0, #+0]
   \   0000005C   0x2802             CMP      R0,#+2
   \   0000005E   0xF040 0x8087      BNE.W    ??TIM5_IRQHandler_1
     42              {     
     43                /* Get the Input Capture value */
     44                uhIC2ReadValue3 = TIM_GetCapture2(TIM5); 
   \   00000062   0x4844             LDR.N    R0,??TIM5_IRQHandler_0  ;; 0x40000c00
   \   00000064   0x.... 0x....      BL       TIM_GetCapture2
   \   00000068   0x4948             LDR.N    R1,??TIM5_IRQHandler_0+0x18
   \   0000006A   0x8008             STRH     R0,[R1, #+0]
     45                
     46                /* First period computation */
     47                if (uhIC2ReadValue2 > uhIC2ReadValue1)
   \   0000006C   0x4845             LDR.N    R0,??TIM5_IRQHandler_0+0x10
   \   0000006E   0x8800             LDRH     R0,[R0, #+0]
   \   00000070   0x4945             LDR.N    R1,??TIM5_IRQHandler_0+0x14
   \   00000072   0x8809             LDRH     R1,[R1, #+0]
   \   00000074   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD208             BCS.N    ??TIM5_IRQHandler_4
     48                {
     49                  uwCapture = (uhIC2ReadValue2 - uhIC2ReadValue1); 
   \   0000007A   0x4843             LDR.N    R0,??TIM5_IRQHandler_0+0x14
   \   0000007C   0x8800             LDRH     R0,[R0, #+0]
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0x4940             LDR.N    R1,??TIM5_IRQHandler_0+0x10
   \   00000082   0x8809             LDRH     R1,[R1, #+0]
   \   00000084   0x1A40             SUBS     R0,R0,R1
   \   00000086   0x4942             LDR.N    R1,??TIM5_IRQHandler_0+0x1C
   \   00000088   0x6008             STR      R0,[R1, #+0]
   \   0000008A   0xE015             B.N      ??TIM5_IRQHandler_5
     50                }
     51                else if (uhIC2ReadValue2 < uhIC2ReadValue1)
   \                     ??TIM5_IRQHandler_4: (+1)
   \   0000008C   0x483E             LDR.N    R0,??TIM5_IRQHandler_0+0x14
   \   0000008E   0x8800             LDRH     R0,[R0, #+0]
   \   00000090   0x493C             LDR.N    R1,??TIM5_IRQHandler_0+0x10
   \   00000092   0x8809             LDRH     R1,[R1, #+0]
   \   00000094   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD20B             BCS.N    ??TIM5_IRQHandler_6
     52                {
     53                  uwCapture = ((0xFFFF - uhIC2ReadValue1) + uhIC2ReadValue2); 
   \   0000009A   0x483A             LDR.N    R0,??TIM5_IRQHandler_0+0x10
   \   0000009C   0x8800             LDRH     R0,[R0, #+0]
   \   0000009E   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0x1A08             SUBS     R0,R1,R0
   \   000000A6   0x4938             LDR.N    R1,??TIM5_IRQHandler_0+0x14
   \   000000A8   0x8809             LDRH     R1,[R1, #+0]
   \   000000AA   0x1840             ADDS     R0,R0,R1
   \   000000AC   0x4938             LDR.N    R1,??TIM5_IRQHandler_0+0x1C
   \   000000AE   0x6008             STR      R0,[R1, #+0]
   \   000000B0   0xE002             B.N      ??TIM5_IRQHandler_5
     54                }
     55                else
     56                {
     57                  uwCapture = 0;
   \                     ??TIM5_IRQHandler_6: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x4936             LDR.N    R1,??TIM5_IRQHandler_0+0x1C
   \   000000B6   0x6008             STR      R0,[R1, #+0]
     58                }
     59                
     60                /* Second period computation */
     61                if (uhIC2ReadValue3 > uhIC2ReadValue2)
   \                     ??TIM5_IRQHandler_5: (+1)
   \   000000B8   0x4833             LDR.N    R0,??TIM5_IRQHandler_0+0x14
   \   000000BA   0x8800             LDRH     R0,[R0, #+0]
   \   000000BC   0x4933             LDR.N    R1,??TIM5_IRQHandler_0+0x18
   \   000000BE   0x8809             LDRH     R1,[R1, #+0]
   \   000000C0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xD208             BCS.N    ??TIM5_IRQHandler_7
     62                {
     63                  uwCapture2 = (uhIC2ReadValue3 - uhIC2ReadValue2); 
   \   000000C6   0x4831             LDR.N    R0,??TIM5_IRQHandler_0+0x18
   \   000000C8   0x8800             LDRH     R0,[R0, #+0]
   \   000000CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CC   0x492E             LDR.N    R1,??TIM5_IRQHandler_0+0x14
   \   000000CE   0x8809             LDRH     R1,[R1, #+0]
   \   000000D0   0x1A40             SUBS     R0,R0,R1
   \   000000D2   0x4930             LDR.N    R1,??TIM5_IRQHandler_0+0x20
   \   000000D4   0x6008             STR      R0,[R1, #+0]
   \   000000D6   0xE015             B.N      ??TIM5_IRQHandler_8
     64                }
     65                else if (uhIC2ReadValue3 < uhIC2ReadValue2)
   \                     ??TIM5_IRQHandler_7: (+1)
   \   000000D8   0x482C             LDR.N    R0,??TIM5_IRQHandler_0+0x18
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0x492A             LDR.N    R1,??TIM5_IRQHandler_0+0x14
   \   000000DE   0x8809             LDRH     R1,[R1, #+0]
   \   000000E0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E2   0x4288             CMP      R0,R1
   \   000000E4   0xD20B             BCS.N    ??TIM5_IRQHandler_9
     66                {
     67                  uwCapture2 = ((0xFFFF - uhIC2ReadValue2) + uhIC2ReadValue3); 
   \   000000E6   0x4828             LDR.N    R0,??TIM5_IRQHandler_0+0x14
   \   000000E8   0x8800             LDRH     R0,[R0, #+0]
   \   000000EA   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000EE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F0   0x1A08             SUBS     R0,R1,R0
   \   000000F2   0x4926             LDR.N    R1,??TIM5_IRQHandler_0+0x18
   \   000000F4   0x8809             LDRH     R1,[R1, #+0]
   \   000000F6   0x1840             ADDS     R0,R0,R1
   \   000000F8   0x4926             LDR.N    R1,??TIM5_IRQHandler_0+0x20
   \   000000FA   0x6008             STR      R0,[R1, #+0]
   \   000000FC   0xE002             B.N      ??TIM5_IRQHandler_8
     68                }
     69                else
     70                {
     71                  uwCapture2 = 0;
   \                     ??TIM5_IRQHandler_9: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x4924             LDR.N    R1,??TIM5_IRQHandler_0+0x20
   \   00000102   0x6008             STR      R0,[R1, #+0]
     72                }
     73                
     74                /*  Period computation (in microseconds) */
     75                uwTIM5Period = 2 * (uwCapture + uwCapture2) / (SystemCoreClock / 1000000);
   \                     ??TIM5_IRQHandler_8: (+1)
   \   00000104   0x4822             LDR.N    R0,??TIM5_IRQHandler_0+0x1C
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x4923             LDR.N    R1,??TIM5_IRQHandler_0+0x24
   \   0000010A   0x6809             LDR      R1,[R1, #+0]
   \   0000010C   0x4A23             LDR.N    R2,??TIM5_IRQHandler_0+0x28  ;; 0xf4240
   \   0000010E   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000112   0x4A20             LDR.N    R2,??TIM5_IRQHandler_0+0x20
   \   00000114   0x6812             LDR      R2,[R2, #+0]
   \   00000116   0x1810             ADDS     R0,R2,R0
   \   00000118   0x0040             LSLS     R0,R0,#+1
   \   0000011A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000011E   0x4920             LDR.N    R1,??TIM5_IRQHandler_0+0x2C
   \   00000120   0x6008             STR      R0,[R1, #+0]
     76                
     77                /* Duty Cycle computation (percentage) */
     78                uwTIM5Duty = (uwCapture * 100) / (uwCapture + uwCapture2);
   \   00000122   0x481B             LDR.N    R0,??TIM5_IRQHandler_0+0x1C
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0x491A             LDR.N    R1,??TIM5_IRQHandler_0+0x1C
   \   00000128   0x6809             LDR      R1,[R1, #+0]
   \   0000012A   0x2264             MOVS     R2,#+100
   \   0000012C   0x4350             MULS     R0,R2,R0
   \   0000012E   0x4A19             LDR.N    R2,??TIM5_IRQHandler_0+0x20
   \   00000130   0x6812             LDR      R2,[R2, #+0]
   \   00000132   0x1851             ADDS     R1,R2,R1
   \   00000134   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000138   0x491A             LDR.N    R1,??TIM5_IRQHandler_0+0x30
   \   0000013A   0x6008             STR      R0,[R1, #+0]
     79                
     80                /* Frequency computation */ 
     81                uwTIM5Freq = (uint32_t) SystemCoreClock / (2 * (uwCapture + uwCapture2));
   \   0000013C   0x4814             LDR.N    R0,??TIM5_IRQHandler_0+0x1C
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x4915             LDR.N    R1,??TIM5_IRQHandler_0+0x24
   \   00000142   0x6809             LDR      R1,[R1, #+0]
   \   00000144   0x4A13             LDR.N    R2,??TIM5_IRQHandler_0+0x20
   \   00000146   0x6812             LDR      R2,[R2, #+0]
   \   00000148   0x1810             ADDS     R0,R2,R0
   \   0000014A   0x0040             LSLS     R0,R0,#+1
   \   0000014C   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   00000150   0x4915             LDR.N    R1,??TIM5_IRQHandler_0+0x34
   \   00000152   0x6008             STR      R0,[R1, #+0]
     82                
     83                /* Turn on/off LEDs based on Frequency */     
     84                if(0 <= uwTIM5Freq < 7000)
                            ^
Warning[Pe186]: pointless comparison of unsigned integer with zero

        if (uhIC2ReadValue2 > uhIC2ReadValue1)
        ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",47  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

          uwCapture = (uhIC2ReadValue2 - uhIC2ReadValue1); 
          ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",49  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        else if (uhIC2ReadValue2 < uhIC2ReadValue1)
             ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",51  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

          uwCapture = ((0xFFFF - uhIC2ReadValue1) + uhIC2ReadValue2); 
          ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",53  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        if (uhIC2ReadValue3 > uhIC2ReadValue2)
        ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",61  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

          uwCapture2 = (uhIC2ReadValue3 - uhIC2ReadValue2); 
          ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",63  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        else if (uhIC2ReadValue3 < uhIC2ReadValue2)
             ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",65  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

          uwCapture2 = ((0xFFFF - uhIC2ReadValue2) + uhIC2ReadValue3); 
          ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",67  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        uwTIM5Period = 2 * (uwCapture + uwCapture2) / (SystemCoreClock / 1000000);
        ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",75  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        uwTIM5Duty = (uwCapture * 100) / (uwCapture + uwCapture2);
        ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",78  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        uwTIM5Freq = (uint32_t) SystemCoreClock / (2 * (uwCapture + uwCapture2));
        ^
"C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework5\stm32f4xx_it.c",81  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   \   00000154   0x4814             LDR.N    R0,??TIM5_IRQHandler_0+0x34
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0x2001             MOVS     R0,#+1
     85                {
     86                  GPIOD->ODR = LED0 | LED1;
   \   0000015A   0xF44F 0x5040      MOV      R0,#+12288
   \   0000015E   0x4913             LDR.N    R1,??TIM5_IRQHandler_0+0x38  ;; 0x40020c14
   \   00000160   0x6008             STR      R0,[R1, #+0]
     87                }
     88                else if(7000 <= uwTIM5Freq < 35000)
     89                {
     90                  GPIOD->ODR = LED0;
     91                }
     92                else if(35000 <= uwTIM5Freq < 55000)
     93                {
     94                  GPIOD->ODR = LED1;
     95                }
     96                else if(55000 <= uwTIM5Freq)
     97                {
     98                  GPIOD->ODR = LED0 | LED1;
     99                }
    100                
    101                uhCaptureNumber = 0; 
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x4906             LDR.N    R1,??TIM5_IRQHandler_0+0xC
   \   00000166   0x8008             STRH     R0,[R1, #+0]
    102                
    103                /* Clear TIM5 Capture compare interrupt pending bit */
    104                TIM_ClearITPendingBit(TIM5, TIM_IT_CC2);
   \   00000168   0x2104             MOVS     R1,#+4
   \   0000016A   0x4802             LDR.N    R0,??TIM5_IRQHandler_0  ;; 0x40000c00
   \   0000016C   0x.... 0x....      BL       TIM_ClearITPendingBit
    105              } 
    106            }
    107          }    
   \                     ??TIM5_IRQHandler_1: (+1)
   \   00000170   0xBD01             POP      {R0,PC}          ;; return
   \   00000172   0xBF00             Nop      
   \                     ??TIM5_IRQHandler_0:
   \   00000174   0x40000C00         DC32     0x40000c00
   \   00000178   0x40020010         DC32     0x40020010
   \   0000017C   0x........         DC32     sigLevel
   \   00000180   0x........         DC32     uhCaptureNumber
   \   00000184   0x........         DC32     uhIC2ReadValue1
   \   00000188   0x........         DC32     uhIC2ReadValue2
   \   0000018C   0x........         DC32     uhIC2ReadValue3
   \   00000190   0x........         DC32     uwCapture
   \   00000194   0x........         DC32     uwCapture2
   \   00000198   0x........         DC32     SystemCoreClock
   \   0000019C   0x000F4240         DC32     0xf4240
   \   000001A0   0x........         DC32     uwTIM5Period
   \   000001A4   0x........         DC32     uwTIM5Duty
   \   000001A8   0x........         DC32     uwTIM5Freq
   \   000001AC   0x40020C14         DC32     0x40020c14

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM5_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetCapture2
         8   -> TIM_GetITStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     432  TIM5_IRQHandler
       4  sigLevel
       2  uhCaptureNumber
       2  uhIC2ReadValue1
       2  uhIC2ReadValue2
       2  uhIC2ReadValue3
       4  uwCapture
       4  uwCapture2
       4  uwTIM5Duty
       4  uwTIM5Freq
       4  uwTIM5Period

 
  32 bytes in section .bss
 432 bytes in section .text
 
 432 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: 12
