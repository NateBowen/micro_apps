###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       03/Apr/2017  18:17:00
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_fsmc_sram.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_fsmc_sram.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\List\stm324xg_eval_fsmc_sram.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\Obj\stm324xg_eval_fsmc_sram.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval_fsmc_sram.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm324xg_eval_fsmc_sram.c
      4            * @author  MCD Application Team
      5            * @version V1.1.1
      6            * @date    11-January-2013
      7            * @brief   This file provides a set of functions needed to drive the
      8            *          IS61WV102416BLL SRAM memory mounted on STM324xG-EVAL evaluation
      9            *          board(MB786) RevB.    
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm324xg_eval_fsmc_sram.h"
     32          
     33          /** @addtogroup Utilities
     34            * @{
     35            */
     36          
     37          /** @addtogroup STM32_EVAL
     38            * @{
     39            */
     40          
     41          /** @addtogroup STM324xG_EVAL
     42            * @{
     43            */
     44          
     45          /** @addtogroup STM324xG_EVAL_FSMC_SRAM
     46            * @brief     This file provides a set of functions needed to drive the 
     47            *            CY7C1071DV33-12BAXI SRAM memory mounted on STM324xG-EVAL board.
     48            * @{
     49            */
     50          
     51          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Types
     52            * @{
     53            */
     54          /**
     55            * @}
     56            */
     57          
     58          
     59          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Defines
     60            * @{
     61            */
     62          /**
     63            * @brief  FSMC Bank 1 NOR/SRAM2
     64            */
     65          #define Bank1_SRAM2_ADDR  ((uint32_t)0x64000000)  
     66          
     67          /**
     68            * @}
     69            */
     70          
     71          
     72          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Macros
     73            * @{
     74            */
     75          /**
     76            * @}
     77            */
     78          
     79          
     80          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Variables
     81            * @{
     82            */
     83          /**
     84            * @}
     85            */
     86          
     87          
     88          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Function_Prototypes
     89            * @{
     90            */
     91          /**
     92            * @}
     93            */
     94          
     95          
     96          /** @defgroup STM324xG_EVAL_FSMC_SRAM_Private_Functions
     97            * @{
     98            */
     99          
    100          /**
    101            * @brief  Configures the FSMC and GPIOs to interface with the SRAM memory.
    102            *         This function must be called before any write/read operation
    103            *         on the SRAM.
    104            * @param  None
    105            * @retval None
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          void SRAM_Init(void)
    108          {
   \                     SRAM_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
    109            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    110            FSMC_NORSRAMTimingInitTypeDef  p;
    111            GPIO_InitTypeDef GPIO_InitStructure; 
    112            
    113            /* Enable GPIOs clock */
    114            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF |
    115                                   RCC_AHB1Periph_GPIOG, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2078             MOVS     R0,#+120
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    116          
    117            /* Enable FSMC clock */
    118            RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE); 
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB3PeriphClockCmd
    119            
    120          /*-- GPIOs Configuration -----------------------------------------------------*/
    121          /*
    122           +-------------------+--------------------+------------------+------------------+
    123           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0 <-> FSMC_A0  | PG0 <-> FSMC_A10 |
    124           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1 <-> FSMC_A1  | PG1 <-> FSMC_A11 |
    125           | PD4  <-> FSMC_NOE | PE2  <-> FSMC_A23  | PF2 <-> FSMC_A2  | PG2 <-> FSMC_A12 |
    126           | PD5  <-> FSMC_NWE | PE3  <-> FSMC_A19  | PF3 <-> FSMC_A3  | PG3 <-> FSMC_A13 |
    127           | PD8  <-> FSMC_D13 | PE4  <-> FSMC_A20  | PF4 <-> FSMC_A4  | PG4 <-> FSMC_A14 |
    128           | PD9  <-> FSMC_D14 | PE5  <-> FSMC_A21  | PF5 <-> FSMC_A5  | PG5 <-> FSMC_A15 |
    129           | PD10 <-> FSMC_D15 | PE6  <-> FSMC_A22  | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    130           | PD11 <-> FSMC_A16 | PE7  <-> FSMC_D4   | PF13 <-> FSMC_A7 |------------------+
    131           | PD12 <-> FSMC_A17 | PE8  <-> FSMC_D5   | PF14 <-> FSMC_A8 |
    132           | PD13 <-> FSMC_A18 | PE9  <-> FSMC_D6   | PF15 <-> FSMC_A9 |
    133           | PD14 <-> FSMC_D0  | PE10 <-> FSMC_D7   |------------------+
    134           | PD15 <-> FSMC_D1  | PE11 <-> FSMC_D8   |
    135           +-------------------| PE12 <-> FSMC_D9   |
    136                               | PE13 <-> FSMC_D10  |
    137                               | PE14 <-> FSMC_D11  |
    138                               | PE15 <-> FSMC_D12  |
    139                               +--------------------+
    140          */
    141          
    142            /* GPIOD configuration */
    143            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000014   0x220C             MOVS     R2,#+12
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000001A   0x.... 0x....      BL       GPIO_PinAFConfig
    144            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
   \   0000001E   0x220C             MOVS     R2,#+12
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000024   0x.... 0x....      BL       GPIO_PinAFConfig
    145            GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000028   0x220C             MOVS     R2,#+12
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000002E   0x.... 0x....      BL       GPIO_PinAFConfig
    146            GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000032   0x220C             MOVS     R2,#+12
   \   00000034   0x2105             MOVS     R1,#+5
   \   00000036   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000038   0x.... 0x....      BL       GPIO_PinAFConfig
    147            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x2108             MOVS     R1,#+8
   \   00000040   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000042   0x.... 0x....      BL       GPIO_PinAFConfig
    148            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
   \   00000046   0x220C             MOVS     R2,#+12
   \   00000048   0x2109             MOVS     R1,#+9
   \   0000004A   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000004C   0x.... 0x....      BL       GPIO_PinAFConfig
    149            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000050   0x220C             MOVS     R2,#+12
   \   00000052   0x210A             MOVS     R1,#+10
   \   00000054   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000056   0x.... 0x....      BL       GPIO_PinAFConfig
    150            GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC); 
   \   0000005A   0x220C             MOVS     R2,#+12
   \   0000005C   0x210B             MOVS     R1,#+11
   \   0000005E   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000060   0x.... 0x....      BL       GPIO_PinAFConfig
    151            GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_FSMC);
   \   00000064   0x220C             MOVS     R2,#+12
   \   00000066   0x210C             MOVS     R1,#+12
   \   00000068   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000006A   0x.... 0x....      BL       GPIO_PinAFConfig
    152            GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_FSMC);
   \   0000006E   0x220C             MOVS     R2,#+12
   \   00000070   0x210D             MOVS     R1,#+13
   \   00000072   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000074   0x.... 0x....      BL       GPIO_PinAFConfig
    153            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000078   0x220C             MOVS     R2,#+12
   \   0000007A   0x210E             MOVS     R1,#+14
   \   0000007C   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000007E   0x.... 0x....      BL       GPIO_PinAFConfig
    154            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000082   0x220C             MOVS     R2,#+12
   \   00000084   0x210F             MOVS     R1,#+15
   \   00000086   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000088   0x.... 0x....      BL       GPIO_PinAFConfig
    155          
    156            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_4  | GPIO_Pin_5  | 
    157                                          GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 | GPIO_Pin_11 |
    158                                          GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   \   0000008C   0xF64F 0x7033      MOVW     R0,#+65331
   \   00000090   0x9000             STR      R0,[SP, #+0]
    159            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0xF88D 0x0004      STRB     R0,[SP, #+4]
    160            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000098   0x2003             MOVS     R0,#+3
   \   0000009A   0xF88D 0x0005      STRB     R0,[SP, #+5]
    161            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xF88D 0x0006      STRB     R0,[SP, #+6]
    162            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xF88D 0x0007      STRB     R0,[SP, #+7]
    163          
    164            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000000AA   0x4669             MOV      R1,SP
   \   000000AC   0x....             LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000000AE   0x.... 0x....      BL       GPIO_Init
    165          
    166          
    167            /* GPIOE configuration */
    168            GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FSMC);
   \   000000B2   0x220C             MOVS     R2,#+12
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000B8   0x.... 0x....      BL       GPIO_PinAFConfig
    169            GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FSMC);
   \   000000BC   0x220C             MOVS     R2,#+12
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000C2   0x.... 0x....      BL       GPIO_PinAFConfig
    170            GPIO_PinAFConfig(GPIOE, GPIO_PinSource2 , GPIO_AF_FSMC);
   \   000000C6   0x220C             MOVS     R2,#+12
   \   000000C8   0x2102             MOVS     R1,#+2
   \   000000CA   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000CC   0x.... 0x....      BL       GPIO_PinAFConfig
    171            GPIO_PinAFConfig(GPIOE, GPIO_PinSource3 , GPIO_AF_FSMC);
   \   000000D0   0x220C             MOVS     R2,#+12
   \   000000D2   0x2103             MOVS     R1,#+3
   \   000000D4   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000D6   0x.... 0x....      BL       GPIO_PinAFConfig
    172            GPIO_PinAFConfig(GPIOE, GPIO_PinSource4 , GPIO_AF_FSMC);
   \   000000DA   0x220C             MOVS     R2,#+12
   \   000000DC   0x2104             MOVS     R1,#+4
   \   000000DE   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000E0   0x.... 0x....      BL       GPIO_PinAFConfig
    173            GPIO_PinAFConfig(GPIOE, GPIO_PinSource5 , GPIO_AF_FSMC);
   \   000000E4   0x220C             MOVS     R2,#+12
   \   000000E6   0x2105             MOVS     R1,#+5
   \   000000E8   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000EA   0x.... 0x....      BL       GPIO_PinAFConfig
    174            GPIO_PinAFConfig(GPIOE, GPIO_PinSource6 , GPIO_AF_FSMC);
   \   000000EE   0x220C             MOVS     R2,#+12
   \   000000F0   0x2106             MOVS     R1,#+6
   \   000000F2   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000F4   0x.... 0x....      BL       GPIO_PinAFConfig
    175            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
   \   000000F8   0x220C             MOVS     R2,#+12
   \   000000FA   0x2107             MOVS     R1,#+7
   \   000000FC   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000FE   0x.... 0x....      BL       GPIO_PinAFConfig
    176            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
   \   00000102   0x220C             MOVS     R2,#+12
   \   00000104   0x2108             MOVS     R1,#+8
   \   00000106   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000108   0x.... 0x....      BL       GPIO_PinAFConfig
    177            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
   \   0000010C   0x220C             MOVS     R2,#+12
   \   0000010E   0x2109             MOVS     R1,#+9
   \   00000110   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000112   0x.... 0x....      BL       GPIO_PinAFConfig
    178            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
   \   00000116   0x220C             MOVS     R2,#+12
   \   00000118   0x210A             MOVS     R1,#+10
   \   0000011A   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000011C   0x.... 0x....      BL       GPIO_PinAFConfig
    179            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
   \   00000120   0x220C             MOVS     R2,#+12
   \   00000122   0x210B             MOVS     R1,#+11
   \   00000124   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000126   0x.... 0x....      BL       GPIO_PinAFConfig
    180            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
   \   0000012A   0x220C             MOVS     R2,#+12
   \   0000012C   0x210C             MOVS     R1,#+12
   \   0000012E   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000130   0x.... 0x....      BL       GPIO_PinAFConfig
    181            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
   \   00000134   0x220C             MOVS     R2,#+12
   \   00000136   0x210D             MOVS     R1,#+13
   \   00000138   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000013A   0x.... 0x....      BL       GPIO_PinAFConfig
    182            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
   \   0000013E   0x220C             MOVS     R2,#+12
   \   00000140   0x210E             MOVS     R1,#+14
   \   00000142   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000144   0x.... 0x....      BL       GPIO_PinAFConfig
    183            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
   \   00000148   0x220C             MOVS     R2,#+12
   \   0000014A   0x210F             MOVS     R1,#+15
   \   0000014C   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000014E   0x.... 0x....      BL       GPIO_PinAFConfig
    184          
    185            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_2  | GPIO_Pin_3 |  
    186                                          GPIO_Pin_4  | GPIO_Pin_5  | GPIO_Pin_6  | GPIO_Pin_7 |
    187                                          GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 | GPIO_Pin_11|
    188                                          GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000152   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000156   0x9000             STR      R0,[SP, #+0]
    189          
    190            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000158   0x4669             MOV      R1,SP
   \   0000015A   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000015C   0x.... 0x....      BL       GPIO_Init
    191          
    192          
    193            /* GPIOF configuration */
    194            GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FSMC);
   \   00000160   0x220C             MOVS     R2,#+12
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000166   0x.... 0x....      BL       GPIO_PinAFConfig
    195            GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FSMC);
   \   0000016A   0x220C             MOVS     R2,#+12
   \   0000016C   0x2101             MOVS     R1,#+1
   \   0000016E   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000170   0x.... 0x....      BL       GPIO_PinAFConfig
    196            GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FSMC);
   \   00000174   0x220C             MOVS     R2,#+12
   \   00000176   0x2102             MOVS     R1,#+2
   \   00000178   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   0000017A   0x.... 0x....      BL       GPIO_PinAFConfig
    197            GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FSMC);
   \   0000017E   0x220C             MOVS     R2,#+12
   \   00000180   0x2103             MOVS     R1,#+3
   \   00000182   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000184   0x.... 0x....      BL       GPIO_PinAFConfig
    198            GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FSMC);
   \   00000188   0x220C             MOVS     R2,#+12
   \   0000018A   0x2104             MOVS     R1,#+4
   \   0000018C   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   0000018E   0x.... 0x....      BL       GPIO_PinAFConfig
    199            GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FSMC);
   \   00000192   0x220C             MOVS     R2,#+12
   \   00000194   0x2105             MOVS     R1,#+5
   \   00000196   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000198   0x.... 0x....      BL       GPIO_PinAFConfig
    200            GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FSMC);
   \   0000019C   0x220C             MOVS     R2,#+12
   \   0000019E   0x210C             MOVS     R1,#+12
   \   000001A0   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000001A2   0x.... 0x....      BL       GPIO_PinAFConfig
    201            GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FSMC);
   \   000001A6   0x220C             MOVS     R2,#+12
   \   000001A8   0x210D             MOVS     R1,#+13
   \   000001AA   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000001AC   0x.... 0x....      BL       GPIO_PinAFConfig
    202            GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FSMC);
   \   000001B0   0x220C             MOVS     R2,#+12
   \   000001B2   0x210E             MOVS     R1,#+14
   \   000001B4   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000001B6   0x.... 0x....      BL       GPIO_PinAFConfig
    203            GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FSMC);
   \   000001BA   0x220C             MOVS     R2,#+12
   \   000001BC   0x210F             MOVS     R1,#+15
   \   000001BE   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000001C0   0x.... 0x....      BL       GPIO_PinAFConfig
    204          
    205            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_2  | GPIO_Pin_3  | 
    206                                          GPIO_Pin_4  | GPIO_Pin_5  | GPIO_Pin_12 | GPIO_Pin_13 |
    207                                          GPIO_Pin_14 | GPIO_Pin_15;      
   \   000001C4   0xF24F 0x003F      MOVW     R0,#+61503
   \   000001C8   0x9000             STR      R0,[SP, #+0]
    208          
    209            GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   000001CA   0x4669             MOV      R1,SP
   \   000001CC   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000001CE   0x.... 0x....      BL       GPIO_Init
    210          
    211          
    212            /* GPIOG configuration */
    213            GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FSMC);
   \   000001D2   0x220C             MOVS     R2,#+12
   \   000001D4   0x2100             MOVS     R1,#+0
   \   000001D6   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   000001D8   0x.... 0x....      BL       GPIO_PinAFConfig
    214            GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FSMC);
   \   000001DC   0x220C             MOVS     R2,#+12
   \   000001DE   0x2101             MOVS     R1,#+1
   \   000001E0   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   000001E2   0x.... 0x....      BL       GPIO_PinAFConfig
    215            GPIO_PinAFConfig(GPIOG, GPIO_PinSource2 , GPIO_AF_FSMC);
   \   000001E6   0x220C             MOVS     R2,#+12
   \   000001E8   0x2102             MOVS     R1,#+2
   \   000001EA   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   000001EC   0x.... 0x....      BL       GPIO_PinAFConfig
    216            GPIO_PinAFConfig(GPIOG, GPIO_PinSource3 , GPIO_AF_FSMC);
   \   000001F0   0x220C             MOVS     R2,#+12
   \   000001F2   0x2103             MOVS     R1,#+3
   \   000001F4   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   000001F6   0x.... 0x....      BL       GPIO_PinAFConfig
    217            GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FSMC);
   \   000001FA   0x220C             MOVS     R2,#+12
   \   000001FC   0x2104             MOVS     R1,#+4
   \   000001FE   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000200   0x.... 0x....      BL       GPIO_PinAFConfig
    218            GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FSMC);
   \   00000204   0x220C             MOVS     R2,#+12
   \   00000206   0x2105             MOVS     R1,#+5
   \   00000208   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   0000020A   0x.... 0x....      BL       GPIO_PinAFConfig
    219            GPIO_PinAFConfig(GPIOG, GPIO_PinSource9 , GPIO_AF_FSMC);
   \   0000020E   0x220C             MOVS     R2,#+12
   \   00000210   0x2109             MOVS     R1,#+9
   \   00000212   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000214   0x.... 0x....      BL       GPIO_PinAFConfig
    220          
    221            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_2  | GPIO_Pin_3 | 
    222                                          GPIO_Pin_4  | GPIO_Pin_5  |GPIO_Pin_9;      
   \   00000218   0xF240 0x203F      MOVW     R0,#+575
   \   0000021C   0x9000             STR      R0,[SP, #+0]
    223          
    224            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   0000021E   0x4669             MOV      R1,SP
   \   00000220   0x....             LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000222   0x.... 0x....      BL       GPIO_Init
    225          
    226          /*-- FSMC Configuration ------------------------------------------------------*/
    227            p.FSMC_AddressSetupTime = 1;
   \   00000226   0x2001             MOVS     R0,#+1
   \   00000228   0x9002             STR      R0,[SP, #+8]
    228            p.FSMC_AddressHoldTime = 0;
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x9003             STR      R0,[SP, #+12]
    229            p.FSMC_DataSetupTime = 2;
   \   0000022E   0x2002             MOVS     R0,#+2
   \   00000230   0x9004             STR      R0,[SP, #+16]
    230            p.FSMC_BusTurnAroundDuration = 0;
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x9005             STR      R0,[SP, #+20]
    231            p.FSMC_CLKDivision = 0;
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x9006             STR      R0,[SP, #+24]
    232            p.FSMC_DataLatency = 0;
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x9007             STR      R0,[SP, #+28]
    233            p.FSMC_AccessMode = FSMC_AccessMode_A;
   \   0000023E   0x2000             MOVS     R0,#+0
   \   00000240   0x9008             STR      R0,[SP, #+32]
    234          
    235            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
   \   00000242   0x2002             MOVS     R0,#+2
   \   00000244   0x9009             STR      R0,[SP, #+36]
    236            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x900A             STR      R0,[SP, #+40]
    237            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0x900B             STR      R0,[SP, #+44]
    238            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   0000024E   0x2010             MOVS     R0,#+16
   \   00000250   0x900C             STR      R0,[SP, #+48]
    239            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   00000252   0x2000             MOVS     R0,#+0
   \   00000254   0x900D             STR      R0,[SP, #+52]
    240            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
   \   00000256   0x2000             MOVS     R0,#+0
   \   00000258   0x900E             STR      R0,[SP, #+56]
    241            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x900F             STR      R0,[SP, #+60]
    242            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   0000025E   0x2000             MOVS     R0,#+0
   \   00000260   0x9010             STR      R0,[SP, #+64]
    243            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x9011             STR      R0,[SP, #+68]
    244            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   00000266   0xF44F 0x5080      MOV      R0,#+4096
   \   0000026A   0x9012             STR      R0,[SP, #+72]
    245            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x9013             STR      R0,[SP, #+76]
    246            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000270   0x2000             MOVS     R0,#+0
   \   00000272   0x9014             STR      R0,[SP, #+80]
    247            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   00000274   0x2000             MOVS     R0,#+0
   \   00000276   0x9015             STR      R0,[SP, #+84]
    248            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   00000278   0xA802             ADD      R0,SP,#+8
   \   0000027A   0x9016             STR      R0,[SP, #+88]
    249            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   0000027C   0xA802             ADD      R0,SP,#+8
   \   0000027E   0x9017             STR      R0,[SP, #+92]
    250          
    251            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
   \   00000280   0xA809             ADD      R0,SP,#+36
   \   00000282   0x.... 0x....      BL       FSMC_NORSRAMInit
    252          
    253            /*!< Enable FSMC Bank1_SRAM2 Bank */
    254            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE); 
   \   00000286   0x2101             MOVS     R1,#+1
   \   00000288   0x2002             MOVS     R0,#+2
   \   0000028A   0x.... 0x....      BL       FSMC_NORSRAMCmd
    255          
    256          }
   \   0000028E   0xB019             ADD      SP,SP,#+100
   \   00000290   0xBD00             POP      {PC}             ;; return
    257          
    258          /**
    259            * @brief  Writes a Half-word buffer to the FSMC SRAM memory.
    260            * @param  pBuffer : pointer to buffer.
    261            * @param  WriteAddr : SRAM memory internal address from which the data will be
    262            *         written.
    263            * @param  NumHalfwordToWrite : number of half-words to write.
    264            * @retval None
    265            */

   \                                 In section .text, align 2, keep-with-next
    266          void SRAM_WriteBuffer(uint16_t* pBuffer, uint32_t WriteAddr, uint32_t NumHalfwordToWrite)
    267          {
   \                     SRAM_WriteBuffer: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xE006             B.N      ??SRAM_WriteBuffer_0
    268            for (; NumHalfwordToWrite != 0; NumHalfwordToWrite--) /* while there is data to write */
    269            {
    270              /* Transfer data to the memory */
    271              *(uint16_t *) (Bank1_SRAM2_ADDR + WriteAddr) = *pBuffer++;
   \                     ??SRAM_WriteBuffer_1: (+1)
   \   00000004   0x8803             LDRH     R3,[R0, #+0]
   \   00000006   0xF111 0x44C8      ADDS     R4,R1,#+1677721600
   \   0000000A   0x8023             STRH     R3,[R4, #+0]
   \   0000000C   0x1C80             ADDS     R0,R0,#+2
    272          
    273              /* Increment the address*/
    274              WriteAddr += 2;
   \   0000000E   0x1C89             ADDS     R1,R1,#+2
    275            }
   \   00000010   0x1E52             SUBS     R2,R2,#+1
   \                     ??SRAM_WriteBuffer_0: (+1)
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD1F6             BNE.N    ??SRAM_WriteBuffer_1
    276          }
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return
    277          
    278          /**
    279            * @brief  Reads a block of data from the FSMC SRAM memory.
    280            * @param  pBuffer : pointer to the buffer that receives the data read from the
    281            *         SRAM memory.
    282            * @param  ReadAddr : SRAM memory internal address to read from.
    283            * @param  NumHalfwordToRead : number of half-words to read.
    284            * @retval None
    285            */

   \                                 In section .text, align 2, keep-with-next
    286          void SRAM_ReadBuffer(uint16_t* pBuffer, uint32_t ReadAddr, uint32_t NumHalfwordToRead)
    287          {
   \                     SRAM_ReadBuffer: (+1)
   \   00000000   0xE006             B.N      ??SRAM_ReadBuffer_0
    288            for (; NumHalfwordToRead != 0; NumHalfwordToRead--) /* while there is data to read */
    289            {
    290              /* Read a half-word from the memory */
    291              *pBuffer++ = *(__IO uint16_t*) (Bank1_SRAM2_ADDR + ReadAddr);
   \                     ??SRAM_ReadBuffer_1: (+1)
   \   00000002   0xF111 0x43C8      ADDS     R3,R1,#+1677721600
   \   00000006   0x881B             LDRH     R3,[R3, #+0]
   \   00000008   0x8003             STRH     R3,[R0, #+0]
   \   0000000A   0x1C80             ADDS     R0,R0,#+2
    292          
    293              /* Increment the address*/
    294              ReadAddr += 2;
   \   0000000C   0x1C89             ADDS     R1,R1,#+2
    295            }
   \   0000000E   0x1E52             SUBS     R2,R2,#+1
   \                     ??SRAM_ReadBuffer_0: (+1)
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD1F6             BNE.N    ??SRAM_ReadBuffer_1
    296          }
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x40021800         DC32     0x40021800
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /**
    303            * @}
    304            */
    305          
    306          /**
    307            * @}
    308            */
    309          
    310          /**
    311            * @}
    312            */
    313          
    314          /**
    315            * @}
    316            */
    317          
    318          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     104   SRAM_Init
       104   -> FSMC_NORSRAMCmd
       104   -> FSMC_NORSRAMInit
       104   -> GPIO_Init
       104   -> GPIO_PinAFConfig
       104   -> RCC_AHB1PeriphClockCmd
       104   -> RCC_AHB3PeriphClockCmd
       0   SRAM_ReadBuffer
       4   SRAM_WriteBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
     658  SRAM_Init
      22  SRAM_ReadBuffer
      26  SRAM_WriteBuffer

 
 722 bytes in section .text
 
 722 bytes of CODE memory

Errors: none
Warnings: none
