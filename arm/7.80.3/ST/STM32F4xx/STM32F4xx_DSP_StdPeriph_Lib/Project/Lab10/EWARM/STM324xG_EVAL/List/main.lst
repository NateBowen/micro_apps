###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       03/Apr/2017  21:47:58
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\main.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab10\main.c
      1          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD404             BMI.N    ??__NVIC_SetPriority_0
   \   00000006   0x0109             LSLS     R1,R1,#+4
   \   00000008   0x....             LDR.N    R2,??DataTable3  ;; 0xe000e400
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x5411             STRB     R1,[R2, R0]
   \   0000000E   0xE007             B.N      ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \   00000010   0x0109             LSLS     R1,R1,#+4
   \   00000012   0x....             LDR.N    R2,??DataTable3_1  ;; 0xe000ed18
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000001A   0x4410             ADD      R0,R2,R0
   \   0000001C   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \                     ??__NVIC_SetPriority_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x1E41             SUBS     R1,R0,#+1
   \   00000004   0xF1B1 0x7F80      CMP      R1,#+16777216
   \   00000008   0xD301             BCC.N    ??SysTick_Config_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable3_2  ;; 0xe000e014
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x210F             MOVS     R1,#+15
   \   00000016   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001A   0x.... 0x....      BL       __NVIC_SetPriority
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable3_3  ;; 0xe000e018
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0x2007             MOVS     R0,#+7
   \   00000026   0x....             LDR.N    R1,??DataTable3_4  ;; 0xe000e010
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
      2          
      3          void writeInstruction(uint16_t data);
      4          void writeData(uint16_t data);
      5          void writeRegs(uint16_t data);
      6          void sendSpi(uint16_t data);
      7            

   \                                 In section .text, align 2, keep-with-next
      8          int main(void){
   \                     main: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
      9            SysTick_Config(SystemCoreClock / 1000);
   \   00000004   0x....             LDR.N    R0,??DataTable3_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x.... 0x....      BL       SysTick_Config
     10            
     11            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0xF44F 0x5080      MOV      R0,#+4096
   \   0000001A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     12            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     13          
     14            SPI_InitTypeDef SPI_InitStructure;
     15            GPIO_InitTypeDef GPIO_InitStructure;
     16            
     17            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     18            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   0000002C   0xF44F 0x7082      MOV      R0,#+260
   \   00000030   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     19            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     20            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     21            SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     22            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     23            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64; 
   \   0000004E   0x2028             MOVS     R0,#+40
   \   00000050   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     24            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     25            SPI_InitStructure.SPI_CRCPolynomial = 7;
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     26            SPI_Init(SPI1, &SPI_InitStructure);
   \   00000060   0xA902             ADD      R1,SP,#+8
   \   00000062   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40013000
   \   00000064   0x.... 0x....      BL       SPI_Init
     27            
     28            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
   \   00000068   0x20F0             MOVS     R0,#+240
   \   0000006A   0x9000             STR      R0,[SP, #+0]
     29            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0xF88D 0x0004      STRB     R0,[SP, #+4]
     30            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xF88D 0x0006      STRB     R0,[SP, #+6]
     31            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000078   0x2003             MOVS     R0,#+3
   \   0000007A   0xF88D 0x0005      STRB     R0,[SP, #+5]
     32            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0xF88D 0x0007      STRB     R0,[SP, #+7]
     33            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000084   0x4669             MOV      R1,SP
   \   00000086   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   00000088   0x.... 0x....      BL       GPIO_Init
     34            
     35            // SPI1_NSS CHIP SELECT
     36            GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI1);
   \   0000008C   0x2205             MOVS     R2,#+5
   \   0000008E   0x2104             MOVS     R1,#+4
   \   00000090   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   00000092   0x.... 0x....      BL       GPIO_PinAFConfig
     37            // SPI1_SCK
     38            GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
   \   00000096   0x2205             MOVS     R2,#+5
   \   00000098   0x2105             MOVS     R1,#+5
   \   0000009A   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   0000009C   0x.... 0x....      BL       GPIO_PinAFConfig
     39            // SPI1_MISO
     40            GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
   \   000000A0   0x2205             MOVS     R2,#+5
   \   000000A2   0x2106             MOVS     R1,#+6
   \   000000A4   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   000000A6   0x.... 0x....      BL       GPIO_PinAFConfig
     41            // SPI1_MOSI
     42            GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
   \   000000AA   0x2205             MOVS     R2,#+5
   \   000000AC   0x2107             MOVS     R1,#+7
   \   000000AE   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40020000
   \   000000B0   0x.... 0x....      BL       GPIO_PinAFConfig
     43            
     44            //  GPIOA->ODR &= ~GPIO_Pin_4;
     45            
     46            SPI_Cmd(SPI1, ENABLE);
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40013000
   \   000000B8   0x.... 0x....      BL       SPI_Cmd
     47            
     48            writeInstruction(0x30);
   \   000000BC   0x2030             MOVS     R0,#+48
   \   000000BE   0x.... 0x....      BL       writeInstruction
     49            writeInstruction(0x30);
   \   000000C2   0x2030             MOVS     R0,#+48
   \   000000C4   0x.... 0x....      BL       writeInstruction
     50            writeInstruction(0x0F);
   \   000000C8   0x200F             MOVS     R0,#+15
   \   000000CA   0x.... 0x....      BL       writeInstruction
     51            writeInstruction(0x01);
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x.... 0x....      BL       writeInstruction
     52            writeInstruction(0x07);
   \   000000D4   0x2007             MOVS     R0,#+7
   \   000000D6   0x.... 0x....      BL       writeInstruction
     53            
     54            //set extened instruction mode
     55          //  writeInstruction(0x36);
     56            writeInstruction(0x34);
   \   000000DA   0x2034             MOVS     R0,#+52
   \   000000DC   0x.... 0x....      BL       writeInstruction
     57            writeInstruction(0x36);
   \   000000E0   0x2036             MOVS     R0,#+54
   \   000000E2   0x.... 0x....      BL       writeInstruction
     58            
     59            writeInstruction(0x80);
   \   000000E6   0x2080             MOVS     R0,#+128
   \   000000E8   0x.... 0x....      BL       writeInstruction
     60            writeInstruction(0x80);
   \   000000EC   0x2080             MOVS     R0,#+128
   \   000000EE   0x.... 0x....      BL       writeInstruction
     61            writeData(0xFF);
   \   000000F2   0x20FF             MOVS     R0,#+255
   \   000000F4   0x.... 0x....      BL       writeData
     62            
     63            for(uint16_t wait = 0; wait < 0xFFF0; wait++);
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0xE000             B.N      ??main_0
   \                     ??main_1: (+1)
   \   000000FC   0x1C40             ADDS     R0,R0,#+1
   \                     ??main_0: (+1)
   \   000000FE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000100   0xF64F 0x71F0      MOVW     R1,#+65520
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xDBF9             BLT.N    ??main_1
     64            writeInstruction(0x01);
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0x.... 0x....      BL       writeInstruction
     65            writeData(0xFF);
   \   0000010E   0x20FF             MOVS     R0,#+255
   \   00000110   0x.... 0x....      BL       writeData
     66            
     67            
     68            // x=64 y=256 
     69            //draw BOX
     70            uint16_t verticalAddress, horizontalAddress;
     71            for(int x = 1; x <= 14; x++ ) {
   \   00000114   0x2501             MOVS     R5,#+1
   \   00000116   0xE01E             B.N      ??main_2
     72              //TOP OF BOX
     73              verticalAddress = 12;
   \                     ??main_3: (+1)
   \   00000118   0x200C             MOVS     R0,#+12
     74              horizontalAddress = x;
   \   0000011A   0x002C             MOVS     R4,R5
     75              //set GRAM address
     76              writeInstruction(0x80 | verticalAddress);
   \   0000011C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000120   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000122   0x.... 0x....      BL       writeInstruction
     77              writeInstruction(0x80 | horizontalAddress);
   \   00000126   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000012A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012C   0x.... 0x....      BL       writeInstruction
     78              writeData(0xFF);
   \   00000130   0x20FF             MOVS     R0,#+255
   \   00000132   0x.... 0x....      BL       writeData
     79              
     80              //BOTTOM BORDER
     81              verticalAddress = 48;
   \   00000136   0x2030             MOVS     R0,#+48
     82              horizontalAddress = x;
   \   00000138   0x002C             MOVS     R4,R5
     83              writeInstruction(0x80 | verticalAddress);
   \   0000013A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000013E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000140   0x.... 0x....      BL       writeInstruction
     84              writeInstruction(0x80 | horizontalAddress);
   \   00000144   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   00000148   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014A   0x.... 0x....      BL       writeInstruction
     85              writeData(0xFF);
   \   0000014E   0x20FF             MOVS     R0,#+255
   \   00000150   0x.... 0x....      BL       writeData
     86            }
   \   00000154   0x1C6D             ADDS     R5,R5,#+1
   \                     ??main_2: (+1)
   \   00000156   0x2D0F             CMP      R5,#+15
   \   00000158   0xDBDE             BLT.N    ??main_3
     87            for(int y = 12; y < 48; y++ ) {
   \   0000015A   0x250C             MOVS     R5,#+12
   \   0000015C   0xE01E             B.N      ??main_4
     88              verticalAddress = y;
   \                     ??main_5: (+1)
   \   0000015E   0x0028             MOVS     R0,R5
     89              horizontalAddress = 1;
   \   00000160   0x2401             MOVS     R4,#+1
     90              writeInstruction(0x80 | verticalAddress);
   \   00000162   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000166   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000168   0x.... 0x....      BL       writeInstruction
     91              writeInstruction(0x80 | horizontalAddress);
   \   0000016C   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   00000170   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000172   0x.... 0x....      BL       writeInstruction
     92              writeData(0x0F);
   \   00000176   0x200F             MOVS     R0,#+15
   \   00000178   0x.... 0x....      BL       writeData
     93              
     94              verticalAddress = y;
   \   0000017C   0x0028             MOVS     R0,R5
     95              horizontalAddress = 14;
   \   0000017E   0x240E             MOVS     R4,#+14
     96              writeInstruction(0x80 | verticalAddress);
   \   00000180   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000184   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000186   0x.... 0x....      BL       writeInstruction
     97              writeInstruction(0x80 | horizontalAddress);
   \   0000018A   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000018E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000190   0x.... 0x....      BL       writeInstruction
     98              writeData(0xF0);
   \   00000194   0x20F0             MOVS     R0,#+240
   \   00000196   0x.... 0x....      BL       writeData
     99            }
   \   0000019A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??main_4: (+1)
   \   0000019C   0x2D30             CMP      R5,#+48
   \   0000019E   0xDBDE             BLT.N    ??main_5
    100            
    101            
    102            //draw 8 chars
    103            while (1) { 
   \                     ??main_6: (+1)
   \   000001A0   0xE7FE             B.N      ??main_6
    104            }
    105          }
    106          
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void writeInstruction(uint16_t data) {
   \                     writeInstruction: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    109            sendSpi(0xF8 | 0x00);
   \   00000004   0x20F8             MOVS     R0,#+248
   \   00000006   0x.... 0x....      BL       sendSpi
    110            writeRegs(data);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       writeRegs
    111          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void writeData(uint16_t data) {
   \                     writeData: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    114            sendSpi(0xF8 | 0x02);
   \   00000004   0x20FA             MOVS     R0,#+250
   \   00000006   0x.... 0x....      BL       sendSpi
    115            writeRegs(data);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       writeRegs
    116          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void writeRegs(uint16_t data) {
   \                     writeRegs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    119            sendSpi(data & 0xF0);
   \   00000004   0xF014 0x00F0      ANDS     R0,R4,#0xF0
   \   00000008   0x.... 0x....      BL       sendSpi
    120            sendSpi((data & 0x0F) << 4);
   \   0000000C   0x0120             LSLS     R0,R4,#+4
   \   0000000E   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000012   0x.... 0x....      BL       sendSpi
    121          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    122          
    123          /**
    124          void writeInstruction(uint16_t data) {
    125            sendSpi(0x1F);
    126            writeRegs(data);
    127          }
    128          
    129          void writeData(uint16_t data) {
    130            sendSpi(0x1F | 0x50);
    131            writeRegs(data);
    132          }
    133          
    134          void writeRegs(uint16_t data) {
    135            sendSpi(data & 0x0F);
    136            sendSpi( (data >> 4) & 0x0F);
    137          }
    138          */

   \                                 In section .text, align 2, keep-with-next
    139          void sendSpi(uint16_t data) {
   \                     sendSpi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    140            while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
   \                     ??sendSpi_0: (+1)
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40013000
   \   00000008   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD0F9             BEQ.N    ??sendSpi_0
    141            SPI_I2S_SendData(SPI1, data);
   \   00000010   0x0021             MOVS     R1,R4
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40013000
   \   00000016   0x.... 0x....      BL       SPI_I2S_SendData
    142            for(uint16_t dumbDelay = 0; dumbDelay < 0x0FF0; dumbDelay++);     
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE000             B.N      ??sendSpi_1
   \                     ??sendSpi_2: (+1)
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \                     ??sendSpi_1: (+1)
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0xF5B0 0x6F7F      CMP      R0,#+4080
   \   00000026   0xDBFA             BLT.N    ??sendSpi_2
    143          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40020000         DC32     0x40020000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SysTick_Config
         8   -> __NVIC_SetPriority
       0   __NVIC_SetPriority
      40   main
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_Init
        40   -> SysTick_Config
        40   -> writeData
        40   -> writeInstruction
       8   sendSpi
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
       8   writeData
         8   -> sendSpi
         8   -> writeRegs
       8   writeInstruction
         8   -> sendSpi
         8   -> writeRegs
       8   writeRegs
         8   -> sendSpi


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      46  SysTick_Config
      34  __NVIC_SetPriority
     418  main
      42  sendSpi
      20  writeData
      20  writeInstruction
      24  writeRegs

 
 636 bytes in section .text
 
 636 bytes of CODE memory

Errors: none
Warnings: none
