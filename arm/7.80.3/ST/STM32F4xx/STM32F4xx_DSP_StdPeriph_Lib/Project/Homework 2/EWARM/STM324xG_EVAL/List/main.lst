###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       01/Feb/2017  21:42:44
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\main.c
#    Command line =  
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\main.c" -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL
#        -lC
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\STM324xG_EVAL\List" -o
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\STM324xG_EVAL\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\..\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\..\..\..\Utilities\STM32_EVAL\Common\" -I
#        "C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\" -Ol
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework
#        2\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Homework 2\main.c
      1          /* Includes */
      2          #include "main.h"
      3          #include "stm32f4xx.h"
      4          
      5          /* Defines */
      6          #define DATA_PINS       0xFF00
      7          #define SIGNAL_PIN      GPIO_Pin_2
      8          

   \                                 In section .bss, align 4
      9          GPIO_InitTypeDef   GPIO_InitStructure;
   \                     GPIO_InitStructure:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     10          EXTI_InitTypeDef   EXTI_InitStructure;
   \                     EXTI_InitStructure:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     11          NVIC_InitTypeDef   NVIC_InitStructure_Main;
   \                     NVIC_InitStructure_Main:
   \   00000000                      DS8 4
     12          

   \                                 In section .text, align 4, keep-with-next
     13          int main(void)
     14          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     15          
     16            /*!< At this stage the microcontroller clock setting is already configured, 
     17            this is done through SystemInit() function which is called from startup
     18            files (startup_stm32f40xx.s/startup_stm32f427x.s/startup_stm32f429x.s)
     19            before to branch to application main. 
     20            To reconfigure the default setting of SystemInit() function, refer to
     21            system_stm32f4xx.c file
     22            */  
     23            
     24            /* GPIOC and GPIOE Peripheral clock enable */
     25            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     26            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     27            
     28            /* Enable SYSCFG clock */
     29            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF44F 0x4080      MOV      R0,#+16384
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30           
     31            /* Configure PC8:PC15 output */
     32            GPIO_InitStructure.GPIO_Pin = DATA_PINS;
   \   0000001C   0xF44F 0x407F      MOV      R0,#+65280
   \   00000020   0x4922             LDR.N    R1,??main_0
   \   00000022   0x6008             STR      R0,[R1, #+0]
     33            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x4921             LDR.N    R1,??main_0
   \   00000028   0x7108             STRB     R0,[R1, #+4]
     34            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x491F             LDR.N    R1,??main_0
   \   0000002E   0x7188             STRB     R0,[R1, #+6]
     35            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x491E             LDR.N    R1,??main_0
   \   00000034   0x7148             STRB     R0,[R1, #+5]
     36            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x491C             LDR.N    R1,??main_0
   \   0000003A   0x71C8             STRB     R0,[R1, #+7]
     37            GPIO_Init(GPIOC, &GPIO_InitStructure); 
   \   0000003C   0x491B             LDR.N    R1,??main_0
   \   0000003E   0x481C             LDR.N    R0,??main_0+0x4  ;; 0x40020800
   \   00000040   0x.... 0x....      BL       GPIO_Init
     38            
     39            /* Configure PE2 input */
     40            GPIO_InitStructure.GPIO_Pin = SIGNAL_PIN;
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x4919             LDR.N    R1,??main_0
   \   00000048   0x6008             STR      R0,[R1, #+0]
     41            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x4917             LDR.N    R1,??main_0
   \   0000004E   0x7108             STRB     R0,[R1, #+4]
     42            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x4916             LDR.N    R1,??main_0
   \   00000054   0x71C8             STRB     R0,[R1, #+7]
     43            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000056   0x4915             LDR.N    R1,??main_0
   \   00000058   0x4816             LDR.N    R0,??main_0+0x8  ;; 0x40021000
   \   0000005A   0x.... 0x....      BL       GPIO_Init
     44            
     45            
     46            /* Connect EXTI Line2 to PE2 pin */
     47            SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
   \   0000005E   0x2102             MOVS     R1,#+2
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0x.... 0x....      BL       SYSCFG_EXTILineConfig
     48          
     49            /* Configure EXTI Line2 */
     50            EXTI_InitStructure.EXTI_Line = EXTI_Line2;
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0x4913             LDR.N    R1,??main_0+0xC
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     51            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x4912             LDR.N    R1,??main_0+0xC
   \   00000070   0x7108             STRB     R0,[R1, #+4]
     52            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;  
   \   00000072   0x2010             MOVS     R0,#+16
   \   00000074   0x4910             LDR.N    R1,??main_0+0xC
   \   00000076   0x7148             STRB     R0,[R1, #+5]
     53            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x490F             LDR.N    R1,??main_0+0xC
   \   0000007C   0x7188             STRB     R0,[R1, #+6]
     54            EXTI_Init(&EXTI_InitStructure);
   \   0000007E   0x480E             LDR.N    R0,??main_0+0xC
   \   00000080   0x.... 0x....      BL       EXTI_Init
     55          
     56            /* Enable and set EXTI Line2 Interrupt to the lowest priority */
     57            NVIC_InitStructure_Main.NVIC_IRQChannel = EXTI2_IRQn;
   \   00000084   0x2008             MOVS     R0,#+8
   \   00000086   0x490D             LDR.N    R1,??main_0+0x10
   \   00000088   0x7008             STRB     R0,[R1, #+0]
     58            NVIC_InitStructure_Main.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \   0000008A   0x200F             MOVS     R0,#+15
   \   0000008C   0x490B             LDR.N    R1,??main_0+0x10
   \   0000008E   0x7048             STRB     R0,[R1, #+1]
     59            NVIC_InitStructure_Main.NVIC_IRQChannelSubPriority = 0x0F;
   \   00000090   0x200F             MOVS     R0,#+15
   \   00000092   0x490A             LDR.N    R1,??main_0+0x10
   \   00000094   0x7088             STRB     R0,[R1, #+2]
     60            NVIC_InitStructure_Main.NVIC_IRQChannelCmd = ENABLE;
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x4908             LDR.N    R1,??main_0+0x10
   \   0000009A   0x70C8             STRB     R0,[R1, #+3]
     61            NVIC_Init(&NVIC_InitStructure_Main);  
   \   0000009C   0x4807             LDR.N    R0,??main_0+0x10
   \   0000009E   0x.... 0x....      BL       NVIC_Init
     62          
     63            GPIOC->ODR = 0xA500;
   \   000000A2   0xF44F 0x4025      MOV      R0,#+42240
   \   000000A6   0x4906             LDR.N    R1,??main_0+0x14  ;; 0x40020814
   \   000000A8   0x6008             STR      R0,[R1, #+0]
     64          
     65            while (1)
   \                     ??main_1: (+1)
   \   000000AA   0xE7FE             B.N      ??main_1
   \                     ??main_0:
   \   000000AC   0x........         DC32     GPIO_InitStructure
   \   000000B0   0x40020800         DC32     0x40020800
   \   000000B4   0x40021000         DC32     0x40021000
   \   000000B8   0x........         DC32     EXTI_InitStructure
   \   000000BC   0x........         DC32     NVIC_InitStructure_Main
   \   000000C0   0x40020814         DC32     0x40020814
     66            {  
     67                /* Just sit around doing nothing. */
     68            }
     69          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> EXTI_Init
         8   -> GPIO_Init
         8   -> NVIC_Init
         8   -> RCC_AHB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
         8   -> SYSCFG_EXTILineConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  EXTI_InitStructure
       8  GPIO_InitStructure
       4  NVIC_InitStructure_Main
     196  main

 
  20 bytes in section .bss
 196 bytes in section .text
 
 196 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
