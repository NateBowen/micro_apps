###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       30/Jan/2017  17:17:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\main.c
#    Command line =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\STM324xG_EVAL\List
#        -o
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\..\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\proj\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab2\main.c
      1          #include "main.h"
      2          
      3          #define LED_PORT        GPIOA
      4          #define LED_PINS        0xFF
      5          
      6          #define SWITCH_PORT     GPIOD
      7          #define SWITCH_PINS     0xFF
      8          

   \                                 In section .bss, align 4
      9          GPIO_InitTypeDef   GPIO_InitStructure;
   \                     GPIO_InitStructure:
   \   00000000                      DS8 8
     10          

   \                                 In section .text, align 4, keep-with-next
     11          int main(void)
     12          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     13            
     14            /* GPIOA and GPIOD Peripheral clock enable */
     15            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     16            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     17            
     18            /* Configure LED_PINS as output */
     19            GPIO_InitStructure.GPIO_Pin = LED_PINS;
   \   00000012   0x20FF             MOVS     R0,#+255
   \   00000014   0x4915             LDR.N    R1,??main_0
   \   00000016   0x6008             STR      R0,[R1, #+0]
     20            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x4914             LDR.N    R1,??main_0
   \   0000001C   0x7108             STRB     R0,[R1, #+4]
     21            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4912             LDR.N    R1,??main_0
   \   00000022   0x7188             STRB     R0,[R1, #+6]
     22            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x4911             LDR.N    R1,??main_0
   \   00000028   0x7148             STRB     R0,[R1, #+5]
     23            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x490F             LDR.N    R1,??main_0
   \   0000002E   0x71C8             STRB     R0,[R1, #+7]
     24            GPIO_Init(LED_PORT, &GPIO_InitStructure); 
   \   00000030   0x490E             LDR.N    R1,??main_0
   \   00000032   0x480F             LDR.N    R0,??main_0+0x4  ;; 0x40020000
   \   00000034   0x.... 0x....      BL       GPIO_Init
     25            
     26            /* Configure SWITCH_PINS as input */
     27            GPIO_InitStructure.GPIO_Pin = SWITCH_PINS;
   \   00000038   0x20FF             MOVS     R0,#+255
   \   0000003A   0x490C             LDR.N    R1,??main_0
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     28            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x490A             LDR.N    R1,??main_0
   \   00000042   0x7108             STRB     R0,[R1, #+4]
     29            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x4909             LDR.N    R1,??main_0
   \   00000048   0x71C8             STRB     R0,[R1, #+7]
     30            GPIO_Init(SWITCH_PORT, &GPIO_InitStructure);   
   \   0000004A   0x4908             LDR.N    R1,??main_0
   \   0000004C   0x4809             LDR.N    R0,??main_0+0x8  ;; 0x40020c00
   \   0000004E   0x.... 0x....      BL       GPIO_Init
     31            
     32            int switchValue = 0;
   \   00000052   0x2000             MOVS     R0,#+0
     33            
     34            while (1)
     35            {
     36              /* Read SWITCH_PORT and copy value to LED_PORT */
     37              //LED_PORT->ODR = (SWITCH_PORT->IDR & 0x00FF);
     38              switchValue = (SWITCH_PORT->IDR & 0x000F);
   \                     ??main_1: (+1)
   \   00000054   0x4808             LDR.N    R0,??main_0+0xC  ;; 0x40020c10
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF010 0x000F      ANDS     R0,R0,#0xF
     39              switchValue ^= (SWITCH_PORT->IDR & 0x00F0);
   \   0000005C   0x4906             LDR.N    R1,??main_0+0xC  ;; 0x40020c10
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0xF011 0x01F0      ANDS     R1,R1,#0xF0
   \   00000064   0x4048             EORS     R0,R1,R0
     40              LED_PORT->ODR = switchValue;
   \   00000066   0x4905             LDR.N    R1,??main_0+0x10  ;; 0x40020014
   \   00000068   0x6008             STR      R0,[R1, #+0]
   \   0000006A   0xE7F3             B.N      ??main_1
   \                     ??main_0:
   \   0000006C   0x........         DC32     GPIO_InitStructure
   \   00000070   0x40020000         DC32     0x40020000
   \   00000074   0x40020C00         DC32     0x40020c00
   \   00000078   0x40020C10         DC32     0x40020c10
   \   0000007C   0x40020014         DC32     0x40020014
     41            }
     42          }
     43          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> GPIO_Init
         8   -> RCC_AHB1PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  GPIO_InitStructure
     128  main

 
   8 bytes in section .bss
 128 bytes in section .text
 
 128 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
