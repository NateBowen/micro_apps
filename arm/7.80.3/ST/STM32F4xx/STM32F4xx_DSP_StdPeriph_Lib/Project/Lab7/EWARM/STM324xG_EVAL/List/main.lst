###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       13/Mar/2017  20:11:17
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\main.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List\main.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj\main.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\main.c
      1          #include "main.h"
      2          
      3          //#include "prelab_task1.h"
      4          //#include "prelab_task2.h"
      5          //#include "prelab_task3.h"
      6          //#include "task1.h"
      7          //#include "task2.h"
      8          //#include "task3.h"
      9          
     10          //uint16_t ADCInputValue;

   \                                 In section .bss, align 2
     11          uint16_t SawtoothValue = 0;
   \                     SawtoothValue:
   \   00000000                      DS8 2
     12          

   \                                 In section .text, align 4, keep-with-next
     13          int main(void)
     14          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
     15            GPIO_InitTypeDef GPIO_InitStructure;                  
     16            NVIC_InitTypeDef NVIC_InitStructure;
     17            TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     18            TIM_OCInitTypeDef  TIM_OCInitStructure;
     19            DAC_InitTypeDef  DAC_InitStructure;
     20            
     21            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     22            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     23            RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0xF05F 0x5000      MOVS     R0,#+536870912
   \   0000001A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     24            
     25            /* DAC channel 1 (DAC_OUT1 = PA.4) configuration */
     26            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x9001             STR      R0,[SP, #+4]
     27            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0xF88D 0x0008      STRB     R0,[SP, #+8]
     28            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF88D 0x000B      STRB     R0,[SP, #+11]
     29            GPIO_Init(GPIOA, &GPIO_InitStructure);  
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0x4843             LDR.N    R0,??main_0      ;; 0x40020000
   \   00000032   0x.... 0x....      BL       GPIO_Init
     30            
     31            /* DAC channel1 Configuration */
     32            DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9003             STR      R0,[SP, #+12]
     33            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9004             STR      R0,[SP, #+16]
     34            DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9006             STR      R0,[SP, #+24]
     35            DAC_Init(DAC_Channel_1, &DAC_InitStructure);
   \   00000042   0xA903             ADD      R1,SP,#+12
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       DAC_Init
     36            
     37            /* Enable DAC Channel1 */
     38            DAC_Cmd(DAC_Channel_1, ENABLE);  
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       DAC_Cmd
     39            
     40            
     41            
     42            
     43            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x9001             STR      R0,[SP, #+4]
     44            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xF88D 0x0008      STRB     R0,[SP, #+8]
     45            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   0000005C   0x2003             MOVS     R0,#+3
   \   0000005E   0xF88D 0x0009      STRB     R0,[SP, #+9]
     46            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x000A      STRB     R0,[SP, #+10]
     47            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF88D 0x000B      STRB     R0,[SP, #+11]
     48            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000006E   0xA901             ADD      R1,SP,#+4
   \   00000070   0x4833             LDR.N    R0,??main_0      ;; 0x40020000
   \   00000072   0x.... 0x....      BL       GPIO_Init
     49            
     50            GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
   \   00000076   0x2201             MOVS     R2,#+1
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x4831             LDR.N    R0,??main_0      ;; 0x40020000
   \   0000007C   0x.... 0x....      BL       GPIO_PinAFConfig
     51            
     52            
     53            NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   00000080   0x201C             MOVS     R0,#+28
   \   00000082   0xF88D 0x0000      STRB     R0,[SP, #+0]
     54            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF88D 0x0001      STRB     R0,[SP, #+1]
     55            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     56            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xF88D 0x0003      STRB     R0,[SP, #+3]
     57            NVIC_Init(&NVIC_InitStructure);
   \   00000098   0x4668             MOV      R0,SP
   \   0000009A   0x.... 0x....      BL       NVIC_Init
     58            
     59            TIM_TimeBaseStructure.TIM_Period = SystemCoreClock / 1000 / 2 / 1000 * 25;
   \   0000009E   0x4829             LDR.N    R0,??main_0+0x4
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF44F 0x717A      MOV      R1,#+1000
   \   000000A6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000AA   0x0840             LSRS     R0,R0,#+1
   \   000000AC   0xF44F 0x717A      MOV      R1,#+1000
   \   000000B0   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000B4   0x2119             MOVS     R1,#+25
   \   000000B6   0x4348             MULS     R0,R1,R0
   \   000000B8   0x9008             STR      R0,[SP, #+32]
     60            TIM_TimeBaseStructure.TIM_Prescaler = 0;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0xF8AD 0x001C      STRH     R0,[SP, #+28]
     61            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xF8AD 0x0024      STRH     R0,[SP, #+36]
     62            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     63            TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   000000CC   0xA907             ADD      R1,SP,#+28
   \   000000CE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000D2   0x.... 0x....      BL       TIM_TimeBaseInit
     64            
     65            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Inactive;
   \   000000D6   0x2020             MOVS     R0,#+32
   \   000000D8   0xF8AD 0x0028      STRH     R0,[SP, #+40]
     66            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xF8AD 0x002A      STRH     R0,[SP, #+42]
     67            TIM_OCInitStructure.TIM_Pulse = 200;
   \   000000E2   0x20C8             MOVS     R0,#+200
   \   000000E4   0x900C             STR      R0,[SP, #+48]
     68            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xF8AD 0x0034      STRH     R0,[SP, #+52]
     69            TIM_OC3Init(TIM2, &TIM_OCInitStructure);  
   \   000000EC   0xA90A             ADD      R1,SP,#+40
   \   000000EE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000F2   0x.... 0x....      BL       TIM_OC3Init
     70            
     71            TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Disable);
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000FC   0x.... 0x....      BL       TIM_OC3PreloadConfig
     72            
     73            
     74            /* TIM2 enable counter */
     75            TIM_Cmd(TIM2, ENABLE);
   \   00000100   0x2101             MOVS     R1,#+1
   \   00000102   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000106   0x.... 0x....      BL       TIM_Cmd
     76            
     77            /* Enable the CC2 Interrupt Request */
     78            TIM_ITConfig(TIM2, TIM_IT_CC3, ENABLE);
   \   0000010A   0x2201             MOVS     R2,#+1
   \   0000010C   0x2108             MOVS     R1,#+8
   \   0000010E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000112   0x.... 0x....      BL       TIM_ITConfig
     79            
     80            
     81              /* DAC channel1 Configuration */
     82            DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x9003             STR      R0,[SP, #+12]
     83            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x9004             STR      R0,[SP, #+16]
     84            DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x9006             STR      R0,[SP, #+24]
     85            DAC_Init(DAC_Channel_1, &DAC_InitStructure);
   \   00000122   0xA903             ADD      R1,SP,#+12
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      BL       DAC_Init
     86            
     87            /* Enable DAC Channel1 */
     88            DAC_Cmd(DAC_Channel_1, ENABLE);  
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x.... 0x....      BL       DAC_Cmd
     89            
     90            
     91            //   Uncomment only one of these
     92            //  prelab_task1();
     93            //  prelab_task2();
     94            //  prelab_task3();
     95            //  task1();
     96            //  task2();
     97            //  task3();
     98            
     99            /* Infinite loop */
    100            while (1)
    101            {
    102              DAC_SetChannel1Data(DAC_Align_12b_R, SawtoothValue);
   \                     ??main_1: (+1)
   \   00000132   0x4805             LDR.N    R0,??main_0+0x8
   \   00000134   0x8801             LDRH     R1,[R0, #+0]
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x.... 0x....      BL       DAC_SetChannel1Data
   \   0000013C   0xE7F9             B.N      ??main_1
   \   0000013E   0xBF00             Nop      
   \                     ??main_0:
   \   00000140   0x40020000         DC32     0x40020000
   \   00000144   0x........         DC32     SystemCoreClock
   \   00000148   0x........         DC32     SawtoothValue
    103              
    104              //Catch the processor in case the task() functions exit.
    105            }
    106          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   main
        64   -> DAC_Cmd
        64   -> DAC_Init
        64   -> DAC_SetChannel1Data
        64   -> GPIO_Init
        64   -> GPIO_PinAFConfig
        64   -> NVIC_Init
        64   -> RCC_AHB1PeriphClockCmd
        64   -> RCC_APB1PeriphClockCmd
        64   -> TIM_Cmd
        64   -> TIM_ITConfig
        64   -> TIM_OC3Init
        64   -> TIM_OC3PreloadConfig
        64   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  SawtoothValue
     332  main

 
   2 bytes in section .bss
 332 bytes in section .text
 
 332 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
