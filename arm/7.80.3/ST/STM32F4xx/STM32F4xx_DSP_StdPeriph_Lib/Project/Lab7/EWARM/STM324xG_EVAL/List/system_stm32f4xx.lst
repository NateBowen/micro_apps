###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       13/Mar/2017  20:09:35
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\system_stm32f4xx.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\system_stm32f4xx.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List\system_stm32f4xx.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj\system_stm32f4xx.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\system_stm32f4xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f4xx.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    13-March-2017
      7            * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F4xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          stm32f4xx_Clock_Configuration_V1.1.0.xls
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f4xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F40xx/41xx/427x/437x devices
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 168000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 168000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 8000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 8
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 336
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 7
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Main regulator output voltage          | Scale1 mode
     78            *-----------------------------------------------------------------------------
     79            *        Flash Latency(WS)                      | 5
     80            *-----------------------------------------------------------------------------
     81            *        Prefetch Buffer                        | OFF
     82            *-----------------------------------------------------------------------------
     83            *        Instruction cache                      | ON
     84            *-----------------------------------------------------------------------------
     85            *        Data cache                             | ON
     86            *-----------------------------------------------------------------------------
     87            *        Require 48MHz for USB OTG FS,          | Disabled
     88            *        SDIO and RNG clock                     |
     89            *-----------------------------------------------------------------------------
     90            *=============================================================================
     91            ****************************************************************************** 
     92            * @attention
     93            *
     94            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     95            *
     96            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     97            * You may not use this file except in compliance with the License.
     98            * You may obtain a copy of the License at:
     99            *
    100            *        http://www.st.com/software_license_agreement_liberty_v2
    101            *
    102            * Unless required by applicable law or agreed to in writing, software 
    103            * distributed under the License is distributed on an "AS IS" BASIS, 
    104            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    105            * See the License for the specific language governing permissions and
    106            * limitations under the License.
    107            *
    108            ******************************************************************************
    109            */
    110          
    111          /** @addtogroup CMSIS
    112            * @{
    113            */
    114          
    115          /** @addtogroup stm32f4xx_system
    116            * @{
    117            */  
    118            
    119          /** @addtogroup STM32F4xx_System_Private_Includes
    120            * @{
    121            */
    122          
    123          #include "stm32f4xx.h"
    124          
    125          /**
    126            * @}
    127            */
    128          
    129          /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
    130            * @{
    131            */
    132          
    133          /**
    134            * @}
    135            */
    136          
    137          /** @addtogroup STM32F4xx_System_Private_Defines
    138            * @{
    139            */
    140          
    141          /************************* Miscellaneous Configuration ************************/
    142          /*!< Uncomment the following line if you need to use external SRAM mounted
    143               on STM324xG_EVAL/STM324x7I_EVAL board as data memory  */
    144          /* #define DATA_IN_ExtSRAM */
    145          
    146          /*!< Uncomment the following line if you need to relocate your vector Table in
    147               Internal SRAM. */
    148          /* #define VECT_TAB_SRAM */
    149          #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
    150                                             This value must be a multiple of 0x200. */
    151          /******************************************************************************/
    152          
    153          /************************* PLL Parameters *************************************/
    154          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
    155          #define PLL_M      8
    156          #define PLL_N      336
    157          
    158          /* SYSCLK = PLL_VCO / PLL_P */
    159          #define PLL_P      2
    160          
    161          /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
    162          #define PLL_Q      7
    163          
    164          /******************************************************************************/
    165          
    166          /**
    167            * @}
    168            */
    169          
    170          /** @addtogroup STM32F4xx_System_Private_Macros
    171            * @{
    172            */
    173          
    174          /**
    175            * @}
    176            */
    177          
    178          /** @addtogroup STM32F4xx_System_Private_Variables
    179            * @{
    180            */
    181          

   \                                 In section .data, align 4
    182            uint32_t SystemCoreClock = 168000000;
   \                     SystemCoreClock:
   \   00000000   0x0A037A00         DC32 168000000
    183          

   \                                 In section .data, align 4
    184            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09    
    185          
    186          /**
    187            * @}
    188            */
    189          
    190          /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
    191            * @{
    192            */
    193          
    194          static void SetSysClock(void);
    195          #ifdef DATA_IN_ExtSRAM
    196            static void SystemInit_ExtMemCtl(void); 
    197          #endif /* DATA_IN_ExtSRAM */
    198          
    199          /**
    200            * @}
    201            */
    202          
    203          /** @addtogroup STM32F4xx_System_Private_Functions
    204            * @{
    205            */
    206          
    207          /**
    208            * @brief  Setup the microcontroller system
    209            *         Initialize the Embedded Flash Interface, the PLL and update the 
    210            *         SystemFrequency variable.
    211            * @param  None
    212            * @retval None
    213            */

   \                                 In section .text, align 2, keep-with-next
    214          void SystemInit(void)
    215          {
   \                     SystemInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    216            /* FPU settings ------------------------------------------------------------*/
    217            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    218              SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0xe000ed88
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x0070      ORRS     R0,R0,#0xF00000
   \   0000000A   0x....             LDR.N    R1,??DataTable2  ;; 0xe000ed88
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    219            #endif
    220            /* Reset the RCC clock configuration to the default reset state ------------*/
    221            /* Set HSION bit */
    222            RCC->CR |= (uint32_t)0x00000001;
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000016   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023800
   \   00000018   0x6008             STR      R0,[R1, #+0]
    223          
    224            /* Reset CFGR register */
    225            RCC->CFGR = 0x00000000;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    226          
    227            /* Reset HSEON, CSSON and PLLON bits */
    228            RCC->CR &= (uint32_t)0xFEF6FFFF;
   \   00000020   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable2_3  ;; 0xfef6ffff
   \   00000026   0x4008             ANDS     R0,R1,R0
   \   00000028   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023800
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    229          
    230            /* Reset PLLCFGR register */
    231            RCC->PLLCFGR = 0x24003010;
   \   0000002C   0x....             LDR.N    R0,??DataTable2_4  ;; 0x24003010
   \   0000002E   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   00000030   0x6008             STR      R0,[R1, #+0]
    232          
    233            /* Reset HSEBYP bit */
    234            RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   00000032   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   0000003A   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023800
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    235          
    236            /* Disable all interrupts */
    237            RCC->CIR = 0x00000000;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable2_6  ;; 0x4002380c
   \   00000042   0x6008             STR      R0,[R1, #+0]
    238          
    239          #ifdef DATA_IN_ExtSRAM
    240            SystemInit_ExtMemCtl(); 
    241          #endif /* DATA_IN_ExtSRAM */
    242                   
    243            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    244               AHB/APBx prescalers and Flash settings ----------------------------------*/
    245            SetSysClock();
   \   00000044   0x.... 0x....      BL       SetSysClock
    246          
    247            /* Configure the Vector Table location add offset address ------------------*/
    248          #ifdef VECT_TAB_SRAM
    249            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    250          #else
    251            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
   \   00000048   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000004C   0x....             LDR.N    R1,??DataTable2_7  ;; 0xe000ed08
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    252          #endif
    253          }
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
    254          
    255          /**
    256             * @brief  Update SystemCoreClock variable according to Clock Register Values.
    257            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    258            *         be used by the user application to setup the SysTick timer or configure
    259            *         other parameters.
    260            *           
    261            * @note   Each time the core clock (HCLK) changes, this function must be called
    262            *         to update SystemCoreClock variable value. Otherwise, any configuration
    263            *         based on this variable will be incorrect.         
    264            *     
    265            * @note   - The system frequency computed by this function is not the real 
    266            *           frequency in the chip. It is calculated based on the predefined 
    267            *           constant and the selected clock source:
    268            *             
    269            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    270            *                                              
    271            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    272            *                          
    273            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    274            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    275            *         
    276            *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
    277            *             16 MHz) but the real value may vary depending on the variations
    278            *             in voltage and temperature.   
    279            *    
    280            *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
    281            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    282            *              frequency of the crystal used. Otherwise, this function may
    283            *              have wrong result.
    284            *                
    285            *         - The result of this function could be not correct when using fractional
    286            *           value for HSE crystal.
    287            *     
    288            * @param  None
    289            * @retval None
    290            */

   \                                 In section .text, align 2, keep-with-next
    291          void SystemCoreClockUpdate(void)
    292          {
    293            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x2102             MOVS     R1,#+2
    294            
    295            /* Get SYSCLK source -------------------------------------------------------*/
    296            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \   0000000A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF010 0x000C      ANDS     R0,R0,#0xC
    297          
    298            switch (tmp)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD004             BEQ.N    ??SystemCoreClockUpdate_0
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD006             BEQ.N    ??SystemCoreClockUpdate_1
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xD008             BEQ.N    ??SystemCoreClockUpdate_2
   \   0000001E   0xE02D             B.N      ??SystemCoreClockUpdate_3
    299            {
    300              case 0x00:  /* HSI used as system clock source */
    301                SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable2_8  ;; 0xf42400
   \   00000022   0x....             LDR.N    R1,??DataTable2_9
   \   00000024   0x6008             STR      R0,[R1, #+0]
    302                break;
   \   00000026   0xE02C             B.N      ??SystemCoreClockUpdate_4
    303              case 0x04:  /* HSE used as system clock source */
    304                SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable2_10  ;; 0x17d7840
   \   0000002A   0x....             LDR.N    R1,??DataTable2_9
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    305                break;
   \   0000002E   0xE028             B.N      ??SystemCoreClockUpdate_4
    306              case 0x08:  /* PLL used as system clock source */
    307          
    308                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    309                   SYSCLK = PLL_VCO / PLL_P
    310                   */    
    311                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40023804
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF3C0 0x5080      UBFX     R0,R0,#+22,#+1
    312                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
   \   00000038   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0xF011 0x013F      ANDS     R1,R1,#0x3F
    313                
    314                if (pllsource != 0)
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD008             BEQ.N    ??SystemCoreClockUpdate_5
    315                {
    316                  /* HSE used as PLL clock source */
    317                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
   \   00000044   0x....             LDR.N    R0,??DataTable2_10  ;; 0x17d7840
   \   00000046   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000004A   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0xF3C1 0x1188      UBFX     R1,R1,#+6,#+9
   \   00000052   0x4348             MULS     R0,R1,R0
   \   00000054   0xE007             B.N      ??SystemCoreClockUpdate_6
    318                }
    319                else
    320                {
    321                  /* HSI used as PLL clock source */
    322                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
   \                     ??SystemCoreClockUpdate_5: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable2_8  ;; 0xf42400
   \   00000058   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000005C   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0xF3C1 0x1188      UBFX     R1,R1,#+6,#+9
   \   00000064   0x4348             MULS     R0,R1,R0
    323                }
    324          
    325                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
   \                     ??SystemCoreClockUpdate_6: (+1)
   \   00000066   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0xF3C1 0x4101      UBFX     R1,R1,#+16,#+2
   \   0000006E   0x1C49             ADDS     R1,R1,#+1
   \   00000070   0x0049             LSLS     R1,R1,#+1
    326                SystemCoreClock = pllvco/pllp;
   \   00000072   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000076   0x....             LDR.N    R1,??DataTable2_9
   \   00000078   0x6008             STR      R0,[R1, #+0]
    327                break;
   \   0000007A   0xE002             B.N      ??SystemCoreClockUpdate_4
    328              default:
    329                SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \   0000007C   0x....             LDR.N    R0,??DataTable2_8  ;; 0xf42400
   \   0000007E   0x....             LDR.N    R1,??DataTable2_9
   \   00000080   0x6008             STR      R0,[R1, #+0]
    330                break;
    331            }
    332            /* Compute HCLK frequency --------------------------------------------------*/
    333            /* Get HCLK prescaler */
    334            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
   \                     ??SystemCoreClockUpdate_4: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x....             LDR.N    R1,??DataTable2_11
   \   00000088   0xF3C0 0x1003      UBFX     R0,R0,#+4,#+4
   \   0000008C   0x5C08             LDRB     R0,[R1, R0]
    335            /* HCLK frequency */
    336            SystemCoreClock >>= tmp;
   \   0000008E   0x....             LDR.N    R1,??DataTable2_9
   \   00000090   0x6809             LDR      R1,[R1, #+0]
   \   00000092   0x40C1             LSRS     R1,R1,R0
   \   00000094   0x....             LDR.N    R0,??DataTable2_9
   \   00000096   0x6001             STR      R1,[R0, #+0]
    337          }
   \   00000098   0x4770             BX       LR               ;; return
    338          
    339          /**
    340            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    341            *         AHB/APBx prescalers and Flash settings
    342            * @Note   This function should be called only once the RCC clock configuration  
    343            *         is reset to the default reset state (done in SystemInit() function).   
    344            * @param  None
    345            * @retval None
    346            */

   \                                 In section .text, align 2, keep-with-next
    347          static void SetSysClock(void)
    348          {
   \                     SetSysClock: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
    349          /******************************************************************************/
    350          /*            PLL (clocked by HSE) used as System clock source                */
    351          /******************************************************************************/
    352            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    353            
    354            /* Enable HSE */
    355            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
   \   0000000A   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000012   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023800
   \   00000014   0x6008             STR      R0,[R1, #+0]
    356           
    357            /* Wait till HSE is ready and if Time out is reached exit */
    358            do
    359            {
    360              HSEStatus = RCC->CR & RCC_CR_HSERDY;
   \                     ??SetSysClock_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF410 0x3000      ANDS     R0,R0,#0x20000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    361              StartUpCounter++;
   \   00000020   0x9801             LDR      R0,[SP, #+4]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x9001             STR      R0,[SP, #+4]
    362            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD103             BNE.N    ??SetSysClock_1
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0xF5B0 0x6FA0      CMP      R0,#+1280
   \   00000032   0xD1F0             BNE.N    ??SetSysClock_0
    363          
    364            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
   \                     ??SetSysClock_1: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x0380             LSLS     R0,R0,#+14
   \   0000003A   0xD502             BPL.N    ??SetSysClock_2
    365            {
    366              HSEStatus = (uint32_t)0x01;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0xE001             B.N      ??SetSysClock_3
    367            }
    368            else
    369            {
    370              HSEStatus = (uint32_t)0x00;
   \                     ??SetSysClock_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
    371            }
    372          
    373            if (HSEStatus == (uint32_t)0x01)
   \                     ??SetSysClock_3: (+1)
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD13E             BNE.N    ??SetSysClock_4
    374            {
    375              /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    376              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
   \   0000004C   0x....             LDR.N    R0,??DataTable2_12  ;; 0x40023840
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000054   0x....             LDR.N    R1,??DataTable2_12  ;; 0x40023840
   \   00000056   0x6008             STR      R0,[R1, #+0]
    377              PWR->CR |= PWR_CR_VOS;
   \   00000058   0x....             LDR.N    R0,??DataTable2_13  ;; 0x40007000
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF450 0x4040      ORRS     R0,R0,#0xC000
   \   00000060   0x....             LDR.N    R1,??DataTable2_13  ;; 0x40007000
   \   00000062   0x6008             STR      R0,[R1, #+0]
    378          
    379              /* HCLK = SYSCLK / 1*/
    380              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
   \   00000064   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    381                
    382              /* PCLK2 = HCLK / 2*/
    383              RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
   \   0000006C   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000074   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   00000076   0x6008             STR      R0,[R1, #+0]
    384              
    385              /* PCLK1 = HCLK / 4*/
    386              RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
   \   00000078   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF450 0x50A0      ORRS     R0,R0,#0x1400
   \   00000080   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   00000082   0x6008             STR      R0,[R1, #+0]
    387          
    388              /* Configure the main PLL */
    389              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    390                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
   \   00000084   0x....             LDR.N    R0,??DataTable2_14  ;; 0x7405408
   \   00000086   0x....             LDR.N    R1,??DataTable2_5  ;; 0x40023804
   \   00000088   0x6008             STR      R0,[R1, #+0]
    391          
    392              /* Enable the main PLL */
    393              RCC->CR |= RCC_CR_PLLON;
   \   0000008A   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000092   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023800
   \   00000094   0x6008             STR      R0,[R1, #+0]
    394          
    395              /* Wait till the main PLL is ready */
    396              while((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_5: (+1)
   \   00000096   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x0180             LSLS     R0,R0,#+6
   \   0000009C   0xD5FB             BPL.N    ??SetSysClock_5
    397              {
    398              }
    399             
    400              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    401              FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
   \   0000009E   0xF240 0x6005      MOVW     R0,#+1541
   \   000000A2   0x....             LDR.N    R1,??DataTable2_15  ;; 0x40023c00
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    402          
    403              /* Select the main PLL as system clock source */
    404              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \   000000A6   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x0880             LSRS     R0,R0,#+2
   \   000000AC   0x0080             LSLS     R0,R0,#+2
   \   000000AE   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    405              RCC->CFGR |= RCC_CFGR_SW_PLL;
   \   000000B2   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000BA   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40023808
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    406          
    407              /* Wait till the main PLL is used as system clock source */
    408              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
   \                     ??SetSysClock_6: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40023808
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   000000C6   0x2808             CMP      R0,#+8
   \   000000C8   0xD1F9             BNE.N    ??SetSysClock_6
    409              {
    410              }
    411            }
    412            else
    413            { /* If HSE fails to start-up, the application will have wrong clock
    414                   configuration. User can add here some code to deal with this error */
    415            }
    416          
    417          }
   \                     ??SetSysClock_4: (+1)
   \   000000CA   0xB002             ADD      SP,SP,#+8
   \   000000CC   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000ED88         DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40023808         DC32     0x40023808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xFEF6FFFF         DC32     0xfef6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x24003010         DC32     0x24003010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4002380C         DC32     0x4002380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x017D7840         DC32     0x17d7840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     AHBPrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x07405408         DC32     0x7405408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x40023C00         DC32     0x40023c00
    418          
    419          /**
    420            * @brief  Setup the external memory controller. Called in startup_stm32f4xx.s 
    421            *          before jump to __main
    422            * @param  None
    423            * @retval None
    424            */ 
    425          #ifdef DATA_IN_ExtSRAM
    426          /**
    427            * @brief  Setup the external memory controller.
    428            *         Called in startup_stm32f4xx.s before jump to main.
    429            *         This function configures the external SRAM mounted on STM324xG_EVAL/STM324x7I_EVAL board
    430            *         This SRAM will be used as program data memory (including heap and stack).
    431            * @param  None
    432            * @retval None
    433            */
    434          void SystemInit_ExtMemCtl(void)
    435          {
    436          /*-- GPIOs Configuration -----------------------------------------------------*/
    437          /*
    438           +-------------------+--------------------+------------------+------------------+
    439           +                       SRAM pins assignment                                   +
    440           +-------------------+--------------------+------------------+------------------+
    441           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0 <-> FSMC_A0  | PG0 <-> FSMC_A10 |
    442           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1 <-> FSMC_A1  | PG1 <-> FSMC_A11 |
    443           | PD4  <-> FSMC_NOE | PE2  <-> FSMC_A23  | PF2 <-> FSMC_A2  | PG2 <-> FSMC_A12 |
    444           | PD5  <-> FSMC_NWE | PE3  <-> FSMC_A19  | PF3 <-> FSMC_A3  | PG3 <-> FSMC_A13 |
    445           | PD8  <-> FSMC_D13 | PE4  <-> FSMC_A20  | PF4 <-> FSMC_A4  | PG4 <-> FSMC_A14 |
    446           | PD9  <-> FSMC_D14 | PE5  <-> FSMC_A21  | PF5 <-> FSMC_A5  | PG5 <-> FSMC_A15 |
    447           | PD10 <-> FSMC_D15 | PE6  <-> FSMC_A22  | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    448           | PD11 <-> FSMC_A16 | PE7  <-> FSMC_D4   | PF13 <-> FSMC_A7 |------------------+
    449           | PD12 <-> FSMC_A17 | PE8  <-> FSMC_D5   | PF14 <-> FSMC_A8 |
    450           | PD13 <-> FSMC_A18 | PE9  <-> FSMC_D6   | PF15 <-> FSMC_A9 |
    451           | PD14 <-> FSMC_D0  | PE10 <-> FSMC_D7   |------------------+
    452           | PD15 <-> FSMC_D1  | PE11 <-> FSMC_D8   |
    453           +-------------------| PE12 <-> FSMC_D9   |
    454                               | PE13 <-> FSMC_D10  |
    455                               | PE14 <-> FSMC_D11  |
    456                               | PE15 <-> FSMC_D12  |
    457                               +--------------------+
    458          */
    459             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    460            RCC->AHB1ENR   |= 0x00000078;
    461            
    462            /* Connect PDx pins to FSMC Alternate function */
    463            GPIOD->AFR[0]  = 0x00cc00cc;
    464            GPIOD->AFR[1]  = 0xcccccccc;
    465            /* Configure PDx pins in Alternate function mode */  
    466            GPIOD->MODER   = 0xaaaa0a0a;
    467            /* Configure PDx pins speed to 100 MHz */  
    468            GPIOD->OSPEEDR = 0xffff0f0f;
    469            /* Configure PDx pins Output type to push-pull */  
    470            GPIOD->OTYPER  = 0x00000000;
    471            /* No pull-up, pull-down for PDx pins */ 
    472            GPIOD->PUPDR   = 0x00000000;
    473          
    474            /* Connect PEx pins to FSMC Alternate function */
    475            GPIOE->AFR[0]  = 0xcccccccc;
    476            GPIOE->AFR[1]  = 0xcccccccc;
    477            /* Configure PEx pins in Alternate function mode */ 
    478            GPIOE->MODER   = 0xaaaaaaaa;
    479            /* Configure PEx pins speed to 100 MHz */ 
    480            GPIOE->OSPEEDR = 0xffffffff;
    481            /* Configure PEx pins Output type to push-pull */  
    482            GPIOE->OTYPER  = 0x00000000;
    483            /* No pull-up, pull-down for PEx pins */ 
    484            GPIOE->PUPDR   = 0x00000000;
    485          
    486            /* Connect PFx pins to FSMC Alternate function */
    487            GPIOF->AFR[0]  = 0x00cccccc;
    488            GPIOF->AFR[1]  = 0xcccc0000;
    489            /* Configure PFx pins in Alternate function mode */   
    490            GPIOF->MODER   = 0xaa000aaa;
    491            /* Configure PFx pins speed to 100 MHz */ 
    492            GPIOF->OSPEEDR = 0xff000fff;
    493            /* Configure PFx pins Output type to push-pull */  
    494            GPIOF->OTYPER  = 0x00000000;
    495            /* No pull-up, pull-down for PFx pins */ 
    496            GPIOF->PUPDR   = 0x00000000;
    497          
    498            /* Connect PGx pins to FSMC Alternate function */
    499            GPIOG->AFR[0]  = 0x00cccccc;
    500            GPIOG->AFR[1]  = 0x000000c0;
    501            /* Configure PGx pins in Alternate function mode */ 
    502            GPIOG->MODER   = 0x00080aaa;
    503            /* Configure PGx pins speed to 100 MHz */ 
    504            GPIOG->OSPEEDR = 0x000c0fff;
    505            /* Configure PGx pins Output type to push-pull */  
    506            GPIOG->OTYPER  = 0x00000000;
    507            /* No pull-up, pull-down for PGx pins */ 
    508            GPIOG->PUPDR   = 0x00000000;
    509            
    510          /*-- FSMC Configuration ------------------------------------------------------*/
    511            /* Enable the FSMC interface clock */
    512            RCC->AHB3ENR         |= 0x00000001;
    513          
    514            /* Configure and enable Bank1_SRAM2 */
    515            FSMC_Bank1->BTCR[2]  = 0x00001011;
    516            FSMC_Bank1->BTCR[3]  = 0x00000201;
    517            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    518          /*
    519            Bank1_SRAM2 is configured as follow:
    520          
    521            p.FSMC_AddressSetupTime = 1;
    522            p.FSMC_AddressHoldTime = 0;
    523            p.FSMC_DataSetupTime = 2;
    524            p.FSMC_BusTurnAroundDuration = 0;
    525            p.FSMC_CLKDivision = 0;
    526            p.FSMC_DataLatency = 0;
    527            p.FSMC_AccessMode = FSMC_AccessMode_A;
    528          
    529            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    530            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    531            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    532            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    533            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    534            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    535            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    536            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    537            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    538            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    539            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    540            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    541            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    542            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    543            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    544          */
    545          }
    546          #endif /* DATA_IN_ExtSRAM */
    547          
    548          
    549          /**
    550            * @}
    551            */
    552          
    553          /**
    554            * @}
    555            */
    556            
    557          /**
    558            * @}
    559            */    
    560          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    561          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
       0   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
     206  SetSysClock
       4  SystemCoreClock
     154  SystemCoreClockUpdate
      82  SystemInit

 
  20 bytes in section .data
 506 bytes in section .text
 
 506 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
