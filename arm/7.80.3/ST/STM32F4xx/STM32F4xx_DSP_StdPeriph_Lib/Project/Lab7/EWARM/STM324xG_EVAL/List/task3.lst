###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.3.12102/W32 for ARM       13/Mar/2017  21:39:55
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\task3.c
#    Command line =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\task3.c
#        -D USE_STDPERIPH_DRIVER -D STM32F40XX -D USE_STM324xG_EVAL -lC
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List
#        -o
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\
#        -Ol --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\List\task3.lst
#    Object file  =  
#        C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\EWARM\STM324xG_EVAL\Obj\task3.o
#
###############################################################################

C:\Users\ecelab\Desktop\micro_apps\arm\7.80.3\ST\STM32F4xx\STM32F4xx_DSP_StdPeriph_Lib\Project\Lab7\task3.c
      1          #include "task2.h"
      2          
      3          static void ADC_Config(void);
      4          static void DAC_Config(void);
      5          
      6          extern uint16_t ADCInputValue;
      7          
      8          #define ADC_0_4_VOLTS   544
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void task3(void)
     11          {
   \                     task3: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     12            ADC_Config();
   \   00000002   0x.... 0x....      BL       ADC_Config
     13            DAC_Config();
   \   00000006   0x.... 0x....      BL       DAC_Config
     14             
     15            // Start ADC1 Software Conversion
     16            ADC_SoftwareStartConv(ADC1); 
   \   0000000A   0x....             LDR.N    R0,??DataTable1  ;; 0x40012000
   \   0000000C   0x.... 0x....      BL       ADC_SoftwareStartConv
     17            
     18            while(1)
     19            {
     20              DAC_SetChannel1Data(DAC_Align_12b_R, (ADCInputValue * 0.75) + ADC_0_4_VOLTS);
                                                          ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??task3_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable1_1
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       __aeabi_ui2d
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x....             LDR.N    R3,??DataTable1_2  ;; 0x3fe80000
   \   0000001C   0x.... 0x....      BL       __aeabi_dmul
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x....             LDR.N    R3,??DataTable1_3  ;; 0x40810000
   \   00000024   0x.... 0x....      BL       __aeabi_dadd
   \   00000028   0x.... 0x....      BL       __aeabi_d2iz
   \   0000002C   0x0001             MOVS     R1,R0
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       DAC_SetChannel1Data
   \   00000036   0xE7EB             B.N      ??task3_0
     21            }
     22            
     23          }
     24          
     25          /**
     26            * @brief  ADC3 channel07 with DMA configuration
     27            * @note   This function Configure the ADC peripheral  
     28                      1) Enable peripheral clocks
     29                      2) DMA2_Stream0 channel2 configuration
     30                      3) Configure ADC Channel7 pin as analog input
     31                      4) Configure ADC3 Channel7 
     32            * @param  None
     33            * @retval None
     34            */

   \                                 In section .text, align 2, keep-with-next
     35          static void ADC_Config(void)
     36          {
   \                     ADC_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
     37            GPIO_InitTypeDef       GPIO_InitStructure;
     38            ADC_InitTypeDef        ADC_InitStructure;
     39            ADC_CommonInitTypeDef  ADC_CommonInitStructure;  
     40            NVIC_InitTypeDef      NVIC_InitStructure;
     41            
     42            NVIC_InitStructure.NVIC_IRQChannel = ADC_IRQn;
   \   00000004   0x2012             MOVS     R0,#+18
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
     43            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
     44            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
     45            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0003      STRB     R0,[SP, #+3]
     46            NVIC_Init(&NVIC_InitStructure);
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       NVIC_Init
     47            
     48            /* Enable peripheral clocks *************************************************/
     49          //  RCC_AHB1PeriphClockCmd( ADC1_2_CHANNEL_GPIO_CLK , ENABLE);
     50            RCC_APB2PeriphClockCmd( RCC_APB2Periph_ADC1 , ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0xF44F 0x7080      MOV      R0,#+256
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     51            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     52          
     53            /* Configure ADC Channel 12 pin as analog input *****************************/ 
     54            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
   \   00000034   0x2040             MOVS     R0,#+64
   \   00000036   0x9001             STR      R0,[SP, #+4]
     55            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0xF88D 0x0008      STRB     R0,[SP, #+8]
     56            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF88D 0x000B      STRB     R0,[SP, #+11]
     57            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40020000
   \   00000048   0x.... 0x....      BL       GPIO_Init
     58          
     59            /* ADC Common configuration *************************************************/
     60            ADC_CommonInitStructure.ADC_Mode =  ADC_Mode_Independent;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9009             STR      R0,[SP, #+36]
     61            ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;  
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x900B             STR      R0,[SP, #+44]
     62            ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2; 
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x900A             STR      R0,[SP, #+40]
     63            ADC_CommonInit(&ADC_CommonInitStructure);
   \   00000058   0xA809             ADD      R0,SP,#+36
   \   0000005A   0x.... 0x....      BL       ADC_CommonInit
     64          
     65            /* ADC1 regular channel 12 configuration ************************************/
     66            ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9003             STR      R0,[SP, #+12]
     67            ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x0010      STRB     R0,[SP, #+16]
     68            ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF88D 0x0011      STRB     R0,[SP, #+17]
     69            ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9005             STR      R0,[SP, #+20]
     70            ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9006             STR      R0,[SP, #+24]
     71            ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x9007             STR      R0,[SP, #+28]
     72            ADC_InitStructure.ADC_NbrOfConversion = 1;
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0xF88D 0x0020      STRB     R0,[SP, #+32]
     73            ADC_Init(ADC1, &ADC_InitStructure);
   \   00000080   0xA903             ADD      R1,SP,#+12
   \   00000082   0x....             LDR.N    R0,??DataTable1  ;; 0x40012000
   \   00000084   0x.... 0x....      BL       ADC_Init
     74          
     75            ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 1, ADC_SampleTime_3Cycles);
   \   00000088   0x2300             MOVS     R3,#+0
   \   0000008A   0x2201             MOVS     R2,#+1
   \   0000008C   0x2106             MOVS     R1,#+6
   \   0000008E   0x....             LDR.N    R0,??DataTable1  ;; 0x40012000
   \   00000090   0x.... 0x....      BL       ADC_RegularChannelConfig
     76          
     77            /* Enable ADC1 **************************************************************/
     78            ADC_Cmd(ADC1, ENABLE);
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x....             LDR.N    R0,??DataTable1  ;; 0x40012000
   \   00000098   0x.... 0x....      BL       ADC_Cmd
     79            
     80            ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
   \   0000009C   0x2201             MOVS     R2,#+1
   \   0000009E   0xF240 0x2105      MOVW     R1,#+517
   \   000000A2   0x....             LDR.N    R0,??DataTable1  ;; 0x40012000
   \   000000A4   0x.... 0x....      BL       ADC_ITConfig
     81          }
   \   000000A8   0xB00D             ADD      SP,SP,#+52
   \   000000AA   0xBD00             POP      {PC}             ;; return
     82            

   \                                 In section .text, align 2, keep-with-next
     83          void DAC_Config(void)
     84          {
   \                     DAC_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     85            DAC_InitTypeDef       DAC_InitStructure;
     86            
     87            RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF05F 0x5000      MOVS     R0,#+536870912
   \   0000000A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     88            
     89            DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
     90            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9001             STR      R0,[SP, #+4]
     91            DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9003             STR      R0,[SP, #+12]
     92            DAC_Init(DAC_Channel_1, &DAC_InitStructure);
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       DAC_Init
     93            
     94            DAC_Cmd(DAC_Channel_1, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       DAC_Cmd
     95          }
   \   0000002A   0xB005             ADD      SP,SP,#+20
   \   0000002C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40012000         DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ADCInputValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x3FE80000         DC32     0x3fe80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40810000         DC32     0x40810000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40020000         DC32     0x40020000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   ADC_Config
        56   -> ADC_Cmd
        56   -> ADC_CommonInit
        56   -> ADC_ITConfig
        56   -> ADC_Init
        56   -> ADC_RegularChannelConfig
        56   -> GPIO_Init
        56   -> NVIC_Init
        56   -> RCC_AHB1PeriphClockCmd
        56   -> RCC_APB2PeriphClockCmd
      24   DAC_Config
        24   -> DAC_Cmd
        24   -> DAC_Init
        24   -> RCC_APB1PeriphClockCmd
       8   task3
         8   -> ADC_Config
         8   -> ADC_SoftwareStartConv
         8   -> DAC_Config
         8   -> DAC_SetChannel1Data
         8   -> __aeabi_d2iz
         8   -> __aeabi_dadd
         8   -> __aeabi_dmul
         8   -> __aeabi_ui2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
     172  ADC_Config
      46  DAC_Config
      56  task3

 
 294 bytes in section .text
 
 294 bytes of CODE memory

Errors: none
Warnings: 1
